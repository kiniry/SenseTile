refinement[m,i: TYPE]: THEORY
BEGIN

 mod: VAR m
 imp: VAR i

 extract  :TYPE  = [i -> m];  
 generate :TYPE  = [m -> i];
 ref: TYPE = PRED[[m,i]]
 
 |-: VAR ref
 e:  VAR extract
 g:  VAR generate

 
graph_ex?(e):bool = FORALL (mod:m, imp:i) : graph(e)(imp,mod)

graph_ge?(g):bool = FORALL (mod:m, imp:i) : graph(g)(mod,imp)

ref_ex?(e,|-):bool = graph_ex?(e) AND  
		     FORALL (imp:i):|-(e(imp),imp)

ref_ge?(g,|-):bool = graph_ge?(g) AND 
		     FORALL (mod:m): |-(mod,g(mod)) 


% triple refinement record definition 
ref_triple_record: TYPE = [#e:extract, g:generate, r:PRED[[m,i]]#]


% this is a definition of a valid refinement triple 
ref_triple?(rt:ref_triple_record): bool = 
  LET e:extract= rt`e, 
      g:generate=rt`g, 
      |-:ref=rt`r IN
             FORALL (mod:m, imp:i): 
               ref_ex?(e,|-)   AND 
               ref_ge?(g,|-)   AND 
               |-(mod, g(mod)) AND
               |-(e(imp),imp)  AND
               |-(e(imp), g(mod))
                                   

ref_triple_type: TYPE = (ref_triple?)


% properties
lemma_model: LEMMA FORALL (rt:ref_triple_type, mod:m, imp:i ):  
                           rt`r(mod,rt`g(mod)) => mod = rt`e(rt`g(mod))

lemma_implementation: LEMMA FORALL (rt:ref_triple_type, mod:m, imp:i ):  
                            rt`r(rt`e(imp),imp) => imp = rt`g(rt`e(imp))

lemma_ref_composition_mod : LEMMA FORALL (rt:ref_triple_type, mod:m, imp:i ):
                            rt`r(mod,imp) => rt`r(o(rt`e,rt`g)(mod), imp) 

lemma_ref_composition_imp : LEMMA FORALL (rt:ref_triple_type, mod:m, imp:i ):
                            rt`r(mod,imp) => rt`r(mod, o(rt`g,rt`e)(imp)) 

lemma_compositiion_mod_imp :LEMMA FORALL (rt:ref_triple_type, mod:m, imp:i ):
                            rt`r(mod,imp) => rt`r(o(rt`e,rt`g)(mod), o(rt`g,rt`e)(imp)) 

END refinement



ref_partial_order[ m,i :TYPE, 
                    RI:(partial_order?[i]),
                    RM:(partial_order?[m]) ]:THEORY
BEGIN
IMPORTING refinement[m,i],
          partial_order[m,RM],
          partial_order[i,RI],
          QuotientDefinition[m],
          QuotientDefinition[i]


lemma_eqClass_members  :LEMMA FORALL (mod:m, imp:i, rt:ref_triple_type):
                              member(rt`e(imp), EquivClass(RM)(mod) ) AND
                              member(rt`g(mod),EquivClass(RI)(imp) )


lemma_eqClass_ref :LEMMA FORALL (mod:m, imp:i, rt:ref_triple_type): 
                            member(rt`e(imp), EquivClass(RM)(mod) ) AND
                            member(rt`g(mod),EquivClass(RI)(imp) ) =>
                            (rt`r(mod,imp) => rt`r(rt`e(imp),rt`g(mod)))
END ref_partial_order

%
%set_refinement
%
%set_refinement[T, R: TYPE]: THEORY
%BEGIN
%  IMPORTING refinement[set[T], set[R]]
%END set_refinement



%%%%%%% PARTIAL ORDER REWRITING %%%%%%%%%
p_order_rewrite[T : TYPE+ , <=:(partial_order?[T])]: THEORY
BEGIN

p,q,r : VAR T

is_reflexive: LEMMA p <= p

is_antisymmetric: LEMMA p <= q AND q <= p =>  p = q

is_transitive: LEMMA p <= q AND q <= r => p <= r

AUTO_REWRITE+  is_reflexive,is_antisymmetric,is_transitive

END p_order_rewrite



%%%%%%% PARTIAL ORDER THEORY %%%%%%%%%
partial_order[T:TYPE, <=:(partial_order?[T])]:THEORY
BEGIN

IMPORTING p_order_rewrite[T,<=] 

t1,t2 : VAR T

A:VAR set[T]
B:VAR set[T]

% Definition of upper and lower bounds (Ralph's meet and join)
% Let B be a subset of poset A. An element a of set A is a lower
% bound of set B if t1 <= a for every t1 member of B. Dually,
% an element of a of A is an upper bound of B if t1 <= a for all
% t1 member of B.

upper_bound?(t1,A):bool  = ( FORALL (a:(A)): a <= t1 );
lower_bound?(t1,A):bool  = ( FORALL (a:(A)): t1 <= a );

% Set of upper bounds and set of lower bounds definitions.
% Ralph's book definition.

UB_set(A):set[T]= {t1: T | upper_bound?(t1,A)};
LB_set(A):set[T]= {t1: T | lower_bound?(t1,A)}; 

% Least upper bound (supremum or join) and 
% Greatest lower bound (infimum or meet )--- definitions.

join?(t1,A):bool = upper_bound?(t1,A) AND 
                                (FORALL (t2:(UB_set(A))): t1 <= t2 )

meet?(t1,A):bool = lower_bound?(t1,A) AND 
		   	        (FORALL (t2:(LB_set(A))): t2 <= t1 ) 
% Existance join and meet definitions
join_exists?(A):bool = EXISTS t1 : join?(t1,A);
meet_exists?(A):bool = EXISTS t1 : meet?(t1,A); 


% Least upper bound exists (def) join exists.
% Greatest lower bound exists (def) meet exists.
Join_exists : TYPE = (join_exists?)
Meet_exists :TYPE  = (meet_exists?)

% Set of meets and joins --- definitions.
Meet_set(A):set[T] = {t1 :T | meet?(t1,A) }
Join_set(A):set[T] = {t1 :T | join?(t1,A) }

%meet and join choice
join(jo:(join_exists?)) : T = choose(Join_set(jo))
meet(me:(meet_exists?)) : T = choose(Meet_set(me))

singleton_join       : LEMMA join?(t1, singleton(t1))
singleton_join_exists: LEMMA join_exists?(singleton(t1))
join_unique_lem: LEMMA join_exists?(A) IMPLIES unique?(Join_set(A))
join_of_singleton: LEMMA join(singleton(t1)) = t1


% -- Maximal and minimal elements
 min?(t1, A): bool = A(t1) 
 	      AND FORALL ( t2: (A)): t2 <= t1 IMPLIES t2 = t1
 
 max?(t1, A): bool = A(t1) 
 	      AND FORALL ( t2: (A)): t1 <= t2 IMPLIES t2 = t1
 
 Min_set(A): set[T] = { t1: T |  min?(t1, A) }
 Max_set(A): set[T] = { t1: T |  max?(t1, A) }


%Chain definition - partial order is linear
chain?(A): bool = nonempty?(A) AND
  FORALL (t1, t2: (A)): (t1 <= t2) OR (t2 <= t1)

Chain : TYPE = (chain?)

JUDGEMENT Chain SUBTYPE_OF (nonempty?[T])


%Least element--- definition

least_element?(t1, A): bool = A(t1) AND lower_bound?(t1, A)

least_elem_is_min: LEMMA least_element?(t1, A) IMPLIES min?(t1, A)

END partial_order



%%%%%%% PARTIAL ORDER REWRITE LEMMAS %%%%%%%%%
po_rewrite_lemmas[T: TYPE, <=: (partial_order?[T])]: THEORY
 BEGIN

  IMPORTING partial_order[T, <=]

  t1, t2: T

  A: set[T]

  J: VAR (join_exists?)

  JUDGEMENT A HAS_TYPE (nonempty?[T])

  upper_bound_e: LEMMA
    upper_bound?(t1, A) = every(LAMBDA (t2: T): t2 <= t1)(A)

  upper_bound_trans: LEMMA
    upper_bound?(t1, A) AND t1 <= t2 IMPLIES upper_bound?(t2, A)

  join_def_lemma: LEMMA join?(join(J), J)

  singleton_linear: LEMMA chain?(singleton(t1))
 END po_rewrite_lemmas



%%%%%%% POINTWISE EXTENSION FUNCTION DEFINITION %%%%%%%%%
pointwise_ext [D, C: TYPE+, le:(partial_order?[C])]: THEORY

BEGIN

f,g :VAR [D -> C]
t1: VAR D
<=(f, g) : bool = FORALL (t1: D): le(f(t1), g(t1))

pointwise_is_partial_order : LEMMA partial_order?[[ D -> C]](<=)

JUDGEMENT <= HAS_TYPE (partial_order? [[D -> C]])

END pointwise_ext


%%%%%%% MONOTONIC FUNCTION DEFINITION %%%%%%%%%
monotonic_f[D: TYPE, C:TYPE, 
	   le_D:(partial_order?[D]), 
	   le_C:(partial_order?[C])]: THEORY
BEGIN

IMPORTING  partial_order[D,le_D],
	   partial_order[C,le_C] 

f : VAR  [D -> C]

s,s1,s2 : VAR D

t       : VAR C

% Ralph's definition of monotonicity 
mono?(f): bool =
   FORALL s1,s2: le_D(s1,s2) IMPLIES le_C(f(s1),f(s2))

const_monotonic   : LEMMA mono?(LAMBDA s: t)

monotonic_nonempty: LEMMA nonempty?( mono?)

Monotonic: TYPE+ = (mono?)

JUDGEMENT mono? HAS_TYPE (nonempty? [[D->C]])

END monotonic_f


%%%%%PREDICATE TRANSFORMER%%%%%%%
predicate_trans[T:TYPE] :THEORY
BEGIN
 
p,q,r : VAR PRED[T]

t: VAR T

true     :PRED[T] = (LAMBDA (u:T): TRUE);

false    :PRED[T] = (LAMBDA (u:T): FALSE);

and(p,q) :PRED[T] = (LAMBDA (u:T): p(u) AND q(u));

or(p,q)  :PRED[T] = (LAMBDA (u:T): p(u) OR q(u));

not(q)   :PRED[T] = (LAMBDA (u:T): NOT q(u));

|>(p,q)  :bool = (FORALL (u:T): p(u) IMPLIES q(u));

iff(p,q) :bool = (p |> q) AND (q |> p);

abort(q):bool  = false

magic(q):bool  = true

select(p)(r):PRED[T] = { s:(r) | p(s) }

AUTO_REWRITE+ true, false, and, or, not,|>,iff,<=>;

implies_reflexivity : LEMMA p |> p

implies_transitivity: LEMMA (p |> r)  AND 
                      (r |> q)  IMPLIES  (p |> q)

implies_antisymmetry:LEMMA (p |> r)  AND 
		      ( r |> p ) => p = r

% Implication and equivalence on predicate 
% transformers can also be defined as 
% pointwise extension: 

impl_lema: LEMMA (p |>q )=> (p(t) => q(t)) 

eqv_lema : LEMMA ( iff(p,q) )=> p(t) = q(t)

every_select: LEMMA every(p)(select(p)(r))


END predicate_trans



%%%%%%% REFINES THEORY %%%%%%%%%
refines_t[T1, T2: TYPE]: THEORY
BEGIN
IMPORTING predicate_trans

p_transf : TYPE = [PRED[T1] -> PRED[T2]]                                                  

c, c1, c2 :VAR  p_transf

p: VAR PRED[T1]

q: VAR PRED[T2]

t1: VAR T1

monotonic?(c):bool = FORALL (p,q:PRED[T1]): (p |> q) => (c(p) |> c(q));

refines?(c1,c): bool = FORALL (q:PRED[T1]): c(q)|> c1(q) 

AUTO_REWRITE+ refines?, monotonic?

refines_reflexivity: LEMMA refines?(c,c)

refines_transitivity: LEMMA refines?(c1,c) AND 
                      refines?(c2,c1) => refines?(c2, c)
 
refines_antisymmetry: LEMMA refines?(c1,c) AND 
                      refines?(c,c1) => c(t1) = c1(t1)

END refines_t


%%%%%%% SEQUENTIAL COMPOSITION %%%%%%%%%
seq_comp [T1, T2, T3, T4 :TYPE]:THEORY
BEGIN IMPORTING refines_t 

a1, b1 : VAR p_transf[T3, T4]

a2, b2 : VAR p_transf[T2, T3]

a3 : VAR p_transf[T1, T2]

skip: p_transf[T3,T3]  = (LAMBDA (q:PRED [T3]) : q)

lemma_skip_mono:LEMMA monotonic?(skip)

seq_monotonic: LEMMA monotonic?(a1) AND monotonic?(a2)
                      =>  monotonic?(a1 o a2)

seq_mono_refinement : LEMMA monotonic?(b1) AND refines?(b1,a1) 
                            AND refines?(b2,a2) => refines?(b1 o b2, a1 o a2)


seq_mono_refinement2 : LEMMA monotonic?(a1) AND refines?(b1,a1) 
                            AND refines?(b2,a2) => refines?(b1 o b2, a1 o a2)

seq_extensionality : LEMMA (a1 = b1 AND a2 = b2) => (a1 o a2)= (b1 o b2)

seq_extension: LEMMA (a1 = b1) => (a1 o a2) = (b1 o a2)

remove_left_skip : LEMMA refines?( a2, skip  o a2 )

remove_right_skip : LEMMA refines?( a1, a1 o skip )

eliminate_parentheses1 : LEMMA a1 o a2 o a3 = a1 o ( a2 o a3)

eliminate_parentheses2 : LEMMA a1 o a2 o a3 = (a1 o  a2) o a3

END seq_comp


%%%%%%% FIXED POINTS %%%%%%%%%
% Important because garantees the existance of 
% (meet , join) fixed points, which are needed for 
% defining recursion and iteration. 

fixed_point[T:TYPE]: THEORY
BEGIN
IMPORTING refines_t

s : VAR setof[[PRED[T]]]
f:  VAR p_transf [T,T]

p,q : VAR PRED [T]
c, d : VAR p_transf [T,T]


glb(s) : PRED [T] = (LAMBDA (u:T): (FORALL (p:PRED[T]): s(p) => p(u)))

fix(f) : PRED [T] = glb(LAMBDA (p:PRED [T]): f(p) |> p)


gr_lower_lower : LEMMA s(p) => glb(s) |> p

gr_lower_greatest : LEMMA
      (FORALL (r:PRED [T]): s(r) => (q |> r)) => (q |> glb(s))

fix_monotonic: LEMMA monotonic?(f) => f(fix(f)) = fix(f)

fix_point_least: LEMMA (f(p) |> p) => (fix(f) |> p)            

fix_point_mono : LEMMA
      (FORALL (q:PRED [T]): c(q) |> d(q)) => (fix(c) |> fix(d))

END fixed_point





