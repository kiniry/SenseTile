(refinement
 (ext_preserves_equiv 0
  (ext_preserves_equiv-1 nil 3493218719 3493218762
   ("" (auto-rewrite-defs :always? true)
    (("" (assert) (("" (grind) (("" (postpone) nil nil)) nil)) nil))
    nil)
   unchecked nil 42951 80 t shostak))
 (equal_ext_to_equality 0
  (equal_ext_to_equality-1 nil 3493805906 3493993609
   ("" (skolem!)
    (("" (flatten)
      (("" (use "ext_is_left_inv_of_gen")
        (("" (auto-rewrite-defs :always? t)
          (("" (assert :let-reduce? t :cases-rewrite? nil) nil nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ext_is_left_inv_of_gen formula-decl nil refinement nil)
    (T formal-type-decl nil refinement nil))
   145 80 t shostak))
 (ref_extract_generate_equal 0
  (ref_extract_generate_equal-1 nil 3493376461 3493910052
   ("" (use "ext_preserves_equiv")
    (("" (skosimp)
      (("" (inst - "ext(u!1)" "ext(gen(t!1))" "u!1" "gen(t!1)")
        (("" (prop) nil nil)) nil))
      nil))
    nil)
   untried
   ((ext_preserves_equiv formula-decl nil refinement nil)
    (T formal-type-decl nil refinement nil)
    (U formal-type-decl nil refinement nil)
    (ext formal-const-decl "[U -> T]" refinement nil)
    (gen formal-const-decl "[T -> U]" refinement nil))
   359 190 t shostak))
 (equal_gen_to_equality 0
  (equal_gen_to_equality-1 nil 3493806154 3493806204
   ("" (skolem!)
    (("" (flatten)
      (("" (use "gen_is_left_inv_of_ext") (("" (assert) nil nil)) nil))
      nil))
    nil)
   untried
   ((U formal-type-decl nil refinement nil)
    (gen_is_left_inv_of_ext formula-decl nil refinement nil))
   50803 70 t shostak))
 (ref_generate_extract_equal 0
  (ref_generate_extract_equal-1 nil 3493376524 3493910083
   ("" (skosimp)
    (("" (lemma "gen_preserves_equiv")
      (("" (inst - "t!1" "ext(u!1)" "gen(t!1)" "gen(ext(u!1))")
        (("" (prop) nil nil)) nil))
      nil))
    nil)
   untried
   ((T formal-type-decl nil refinement nil)
    (U formal-type-decl nil refinement nil)
    (ext formal-const-decl "[U -> T]" refinement nil)
    (gen formal-const-decl "[T -> U]" refinement nil)
    (gen_preserves_equiv formula-decl nil refinement nil))
   102 20 t shostak))
 (ref_left_composition 0
  (ref_left_composition-1 nil 3493221933 3493992201
   ("" (grind)
    (("" (use "extract_consistent_with_refinement") nil nil)) nil)
   untried
   ((extract_consistent_with_refinement formula-decl nil refinement
     nil)
    (U formal-type-decl nil refinement nil)
    (T formal-type-decl nil refinement nil)
    (gen formal-const-decl "[T -> U]" refinement nil))
   8360 80 t shostak))
 (ref_right_composition 0
  (ref_right_composition-1 nil 3493223332 3493992254
   ("" (grind)
    (("" (use "generate_consistent_with_refinement") nil nil)) nil)
   untried
   ((generate_consistent_with_refinement formula-decl nil refinement
     nil)
    (T formal-type-decl nil refinement nil)
    (U formal-type-decl nil refinement nil)
    (ext formal-const-decl "[U -> T]" refinement nil))
   20504 70 t shostak))
 (ref_composition 0
  (ref_composition-1 nil 3493216667 3494000793
   ("" (skosimp)
    (("" (use "ref_left_composition")
      (("" (use "ref_right_composition") (("" (grind) nil nil)) nil))
      nil))
    nil)
   untried
   ((ref_right_composition formula-decl nil refinement nil)
    (T formal-type-decl nil refinement nil)
    (U formal-type-decl nil refinement nil)
    (gen formal-const-decl "[T -> U]" refinement nil)
    (ext formal-const-decl "[U -> T]" refinement nil)
    (ref_left_composition formula-decl nil refinement nil))
   131 40 t shostak))
 (equivalence_ref_impl 0
  (equivalence_ref_impl-1 nil 3493809819 3494000988
   ("" (grind) nil nil) untried nil 187037 160 t shostak))
 (rep_equiv_ref_impl 0
  (rep_equiv_ref_impl-1 nil 3493368335 3494001097
   ("" (grind)
    (("" (expand "EquivClass") (("" (postpone) nil nil)) nil)) nil)
   untried nil 93883 450 t shostak))
 (rep_equiv_ext_ref_impl 0
  (rep_equiv_ext_ref_impl-1 nil 3493377117 3493377228
   ("" (postpone) nil nil) untried nil 110582 230 t shostak)))
(refinement_model_theory
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488787669 3493127412
   ("" (assuming-tcc) nil nil) unchecked nil 56 20 nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488787669 3493127412
   ("" (assuming-tcc) nil nil) unchecked nil 26 30 nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488787669 3493127412
   ("" (assuming-tcc) nil nil) unchecked nil 72 50 nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488787669 3493127412
   ("" (assuming-tcc) nil nil) unchecked nil 47 50 nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked nil 104 60 nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked nil 80 60 nil nil)))
(singleton_example
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488787669 3493127413
   ("" (subtype-tcc) nil nil) unchecked
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   53 60 nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488787669 3493127413
   ("" (subtype-tcc) nil nil) unchecked
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   39 30 nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((g0 const-decl "[T0 -> U0]" singleton_example nil)
    (ref0 const-decl "predicate[[T0, U0]]" singleton_example nil))
   6 0 nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((e0 const-decl "[U0 -> T0]" singleton_example nil)
    (ref0 const-decl "predicate[[T0, U0]]" singleton_example nil))
   6 10 nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((g0 const-decl "[T0 -> U0]" singleton_example nil)
    (e0 const-decl "[U0 -> T0]" singleton_example nil))
   23 0 nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((e0 const-decl "[U0 -> T0]" singleton_example nil)
    (g0 const-decl "[T0 -> U0]" singleton_example nil))
   6 0 nil nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((g0 const-decl "[T0 -> U0]" singleton_example nil)) 12 10 nil nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((e0 const-decl "[U0 -> T0]" singleton_example nil)) 9 0 nil nil)))
(finite_nats_trivial
 (g1_TCC1 0
  (g1_TCC1-1 nil 3488788908 3495912248 ("" (subtype-tcc) nil nil)
   unchecked nil 95 10 t nil))
 (e1_TCC1 0
  (e1_TCC1-1 nil 3488788908 3495912253 ("" (subtype-tcc) nil nil)
   unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   231 120 t nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488788908 3495912258
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T1 type-eq-decl nil finite_nats_trivial nil))
   192 70 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488788908 3495912264
   ("" (subtype-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U1 type-eq-decl nil finite_nats_trivial nil))
   392 240 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488788908 3495912270
   ("" (assuming-tcc) nil nil) unchecked
   ((ref1 const-decl "predicate[[T1, U1]]" finite_nats_trivial nil)
    (g1 const-decl "[T1 -> U1]" finite_nats_trivial nil))
   88 10 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488788908 3495915016
   ("" (auto-rewrite-defs :always? t)
    (("" (assert :let-reduce? t :cases-rewrite? nil)
      (("" (skolem-typepred)
        (("" (flatten)
          ((""
            (assert :let-reduce? t :quant-simp? nil
                    :implicit-typepreds? nil :cases-rewrite? nil)
            nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e1 const-decl "[U1 -> T1]" finite_nats_trivial nil)
    (ref1 const-decl "predicate[[T1, U1]]" finite_nats_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   31434 170 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488788908 3493127414
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T1 type-eq-decl nil finite_nats_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (e1 const-decl "[U1 -> T1]" finite_nats_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (g1 const-decl "[T1 -> U1]" finite_nats_trivial nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   261 240 nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488788908 3495914182
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e1 const-decl "[U1 -> T1]" finite_nats_trivial nil)
    (g1 const-decl "[T1 -> U1]" finite_nats_trivial nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   55414 310 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3488788908 3493127415
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T1 type-eq-decl nil finite_nats_trivial nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (g1 const-decl "[T1 -> U1]" finite_nats_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   366 330 nil nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3488788908 3493127415
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T1 type-eq-decl nil finite_nats_trivial nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e1 const-decl "[U1 -> T1]" finite_nats_trivial nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   217 180 nil nil)))
(finite_nats_non_trivial
 (g2_TCC1 0
  (g2_TCC1-1 nil 3488788853 3493800336 ("" (subtype-tcc) nil nil)
   unchecked nil 122 50 t nil))
 (e2_TCC1 0
  (e2_TCC1-1 nil 3488788853 3493800340 ("" (subtype-tcc) nil nil)
   unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   238 150 t nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488788853 3493800350
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T2 type-eq-decl nil finite_nats_non_trivial nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   851 660 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488788853 3493732459
   ("" (subtype-tcc)
    (("1" (expand "abs") (("1" (smash) nil nil)) nil)
     ("2" (expand "abs") (("2" (smash) nil nil)) nil))
    nil)
   unchecked
   ((reflexive? const-decl "bool" relations nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil))
   17434 1740 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488788853 3493732437
   ("" (assuming-tcc) nil nil) unchecked
   ((ref2 const-decl "predicate[[T2, U2]]" finite_nats_non_trivial nil)
    (g2 const-decl "[T2 -> U2]" finite_nats_non_trivial nil))
   65 10 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488788853 3493732432
   ("" (assuming-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e2 const-decl "[U2 -> T2]" finite_nats_non_trivial nil)
    (ref2 const-decl "predicate[[T2, U2]]" finite_nats_non_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   358 240 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488788853 3493732428
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (e2 const-decl "[U2 -> T2]" finite_nats_non_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (g2 const-decl "[T2 -> U2]" finite_nats_non_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (T2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   425 290 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488788853 3493732422
   ("" (assuming-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e2 const-decl "[U2 -> T2]" finite_nats_non_trivial nil)
    (g2 const-decl "[T2 -> U2]" finite_nats_non_trivial nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil))
   467 330 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3488788853 3493732395
   ("" (skolem-typepred) (("" (flatten) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T2 type-eq-decl nil finite_nats_non_trivial nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (g2 const-decl "[T2 -> U2]" finite_nats_non_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   4417 1390 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3488788853 3493732413
   ("" (assuming-tcc) (("" (expand "abs") (("" (smash) nil nil)) nil))
    nil)
   unchecked
   ((sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e2 const-decl "[U2 -> T2]" finite_nats_non_trivial nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (T2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil))
   13021 580 t nil)))
(infinite_to_infinite_infinite_equival_finite_equival_classes
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493708103 3493708135
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil))
   233 140 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493708103 3493708139
   ("" (subtype-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil))
   446 330 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493708103 3493708144
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (ref4 const-decl "predicate[[T4, U4]]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   329 220 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493708103 3493708148
   ("" (assuming-tcc) nil nil) unchecked
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (ref4 const-decl "predicate[[T4, U4]]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil))
   120 80 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493708103 3493708152
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   310 220 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493708103 3493708157
   ("" (assuming-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil))
   356 280 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493708103 3493708161
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   431 330 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493708103 3493708167
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   286 170 t nil)))
(infinite_to_infinite_infinite_equival_infinite_equival_classes
 (e4_TCC1 0
  (e4_TCC1-1 nil 3493711581 3493713371 ("" (subtype-tcc) nil nil)
   unchecked nil 98 10 t nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493709490 3493713375
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   192 100 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493709490 3493713379
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   181 130 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493709490 3493713384
   ("" (assuming-tcc) nil nil) unchecked
   ((ref4 const-decl "predicate[[T4, U4]]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   22 10 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493709490 3493713388
   ("" (assuming-tcc) nil nil) unchecked
   ((ref4 const-decl "predicate[[T4, U4]]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   56 20 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493709490 3493713392
   ("" (assuming-tcc) nil nil) unchecked
   ((equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   30 0 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493709490 3493713396
   ("" (assuming-tcc) nil nil) unchecked
   ((equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   30 10 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493709490 3493713400
   ("" (assuming-tcc) nil nil) unchecked
   ((equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   126 60 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493709490 3493713404
   ("" (assuming-tcc) nil nil) unchecked
   ((equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   121 60 t nil)))
(infinite_nats_finite_equivalence_classes
 (g3_TCC1 0
  (g3_TCC1-1 nil 3493116210 3493800495 ("" (subtype-tcc) nil nil)
   unchecked
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   102 60 t nil))
 (e3_TCC1 0
  (e3_TCC1-1 nil 3493116210 3493800499 ("" (subtype-tcc) nil nil)
   unchecked
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (U3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   197 140 t nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493116210 3493800502
   ("" (subtype-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil))
   261 210 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493116210 3493800506
   ("" (subtype-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil))
   297 220 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493116210 3493800509
   ("" (assuming-tcc) nil nil) unchecked
   ((ref3 const-decl "predicate[[T3, U3]]"
     infinite_nats_finite_equivalence_classes nil)
    (g3 const-decl "[T3 -> U3]"
     infinite_nats_finite_equivalence_classes nil))
   39 10 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493116210 3493800514
   ("" (assuming-tcc) nil nil) unchecked
   ((ref3 const-decl "predicate[[T3, U3]]"
     infinite_nats_finite_equivalence_classes nil)
    (e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil))
   26 20 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493116210 3493800517
   ("" (assuming-tcc) nil nil) unchecked
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (equivT const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil)
    (g3 const-decl "[T3 -> U3]"
     infinite_nats_finite_equivalence_classes nil))
   145 80 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493116210 3493800521
   ("" (assuming-tcc) nil nil) unchecked
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (equivU const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (g3 const-decl "[T3 -> U3]"
     infinite_nats_finite_equivalence_classes nil)
    (e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil))
   91 80 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493116210 3493800525
   ("" (assuming-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivU const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (equivT const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (g3 const-decl "[T3 -> U3]"
     infinite_nats_finite_equivalence_classes nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (U3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (odd? const-decl "bool" integers nil)
    (T3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   305 220 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493116210 3493800529
   ("" (assuming-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivT const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (equivU const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil)
    (U3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (odd? const-decl "bool" integers nil)
    (T3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   171 150 t nil)))
(infinite_to_infinite_trivial
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3492947826 3493800412
   ("" (assuming-tcc) nil nil) unchecked
   ((T4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (equivT const-decl "bool" infinite_to_infinite_trivial nil)
    (reflexive? const-decl "bool" relations nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   9221 290 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3492947826 3493800417
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool" infinite_to_infinite_trivial nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil infinite_to_infinite_trivial nil))
   167 100 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3492947826 3493800422
   ("" (assuming-tcc) nil nil) unchecked
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (ref4 const-decl "predicate[[T4, U4]]" infinite_to_infinite_trivial
     nil)
    (g4 const-decl "[T4 -> U4]" infinite_to_infinite_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil))
   148 70 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3492947826 3493800426
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (e4 const-decl "[U4 -> T4]" infinite_to_infinite_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (ref4 const-decl "predicate[[T4, U4]]" infinite_to_infinite_trivial
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (U4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   398 260 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3492947826 3493800431
   ("" (assuming-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivT const-decl "bool" infinite_to_infinite_trivial nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (e4 const-decl "[U4 -> T4]" infinite_to_infinite_trivial nil)
    (g4 const-decl "[T4 -> U4]" infinite_to_infinite_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil infinite_to_infinite_trivial nil))
   389 260 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3492947826 3493800436
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (e4 const-decl "[U4 -> T4]" infinite_to_infinite_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (g4 const-decl "[T4 -> U4]" infinite_to_infinite_trivial nil)
    (equivU const-decl "bool" infinite_to_infinite_trivial nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (U4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   286 220 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3492947826 3493800440
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivU const-decl "bool" infinite_to_infinite_trivial nil)
    (equivT const-decl "bool" infinite_to_infinite_trivial nil)
    (g4 const-decl "[T4 -> U4]" infinite_to_infinite_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (U4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (T4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   283 160 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3492947826 3493800444
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivT const-decl "bool" infinite_to_infinite_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (equivU const-decl "bool" infinite_to_infinite_trivial nil)
    (e4 const-decl "[U4 -> T4]" infinite_to_infinite_trivial nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (U4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (T4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   409 320 t nil)))
(finite_to_infinite
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488787670 3493127449
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool" finite_to_infinite nil))
   129 80 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488787670 3493127454
   ("" (expand "equivU")
    (("" (expand "equivalence?")
      (("" (split)
        (("1" (expand "reflexive?") (("1" (propax) nil nil)) nil)
         ("2" (expand "symmetric?")
          (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)
         ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   unchecked
   ((equivU const-decl "bool" finite_to_infinite nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   260 200 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488787670 3493127459
   ("" (assuming-tcc) nil nil) unchecked
   ((ref6 const-decl "predicate[[T6, U6]]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T6 type-eq-decl nil finite_to_infinite nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (g6 const-decl "[T6 -> U6]" finite_to_infinite nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   194 150 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488787670 3493800294
   ("" (assuming-tcc) nil nil) unchecked
   ((even? const-decl "bool" integers nil)
    (e6 const-decl "[U6 -> T6]" finite_to_infinite nil)
    (ref6 const-decl "predicate[[T6, U6]]" finite_to_infinite nil))
   11912 20 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488787670 3493133292 ("" (grind) nil nil)
   unchecked
   ((g6 const-decl "[T6 -> U6]" finite_to_infinite nil)
    (e6 const-decl "[U6 -> T6]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (equivT const-decl "bool" finite_to_infinite nil))
   27814 30 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488787670 3493133379
   ("" (skolem-typepred)
    (("" (expand "equivU")
      (("" (expand "g6")
        (("" (expand "e6")
          (("" (expand "even?") (("" (smash) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((equivU const-decl "bool" finite_to_infinite nil)
    (e6 const-decl "[U6 -> T6]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (g6 const-decl "[T6 -> U6]" finite_to_infinite nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   13486 40 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3488787670 3493800311
   ("" (assuming-tcc) nil nil) unchecked
   ((equivU const-decl "bool" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (equivT const-decl "bool" finite_to_infinite nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   94 50 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3488787670 3493800316
   ("" (assuming-tcc) nil nil) unchecked
   ((equivT const-decl "bool" finite_to_infinite nil)
    (equivU const-decl "bool" finite_to_infinite nil)
    (e6 const-decl "[U6 -> T6]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   118 70 t nil)))
(infinite_to_finite_finite_equival_finite_equival_classes
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493802504 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493802504 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493802504 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493802504 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493802504 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493802504 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493802504 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493802504 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil)))
(infinite_to_finite_infinite_equival_finite_equival_classes
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493717741 3494001700
   ("" (expand "equivalence?")
    (("" (prop)
      (("1" (expand "reflexive?")
        (("1" (expand "equivT") (("1" (propax) nil nil)) nil)) nil)
       ("2" (expand "symmetric?")
        (("2" (expand "equivT")
          (("2" (expand "odd?")
            (("2" (skolem!)
              (("2" (flatten)
                (("2" (expand "even?")
                  (("2" (iff)
                    (("2" (prop)
                      (("1" (iff) (("1" (prop) nil nil)) nil)
                       ("2" (iff) (("2" (prop) nil nil)) nil)
                       ("3" (iff) (("3" (prop) nil nil)) nil)
                       ("4" (iff) (("4" (prop) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "transitive?")
        (("3" (skolem-typepred)
          (("3" (flatten)
            (("3" (expand "equivT")
              (("3" (expand "odd?")
                (("3" (prop)
                  (("1" (expand "even?")
                    (("1" (iff) (("1" (prop) nil nil)) nil)) nil)
                   ("2" (expand "even?")
                    (("2" (iff) (("2" (prop) nil nil)) nil)) nil)
                   ("3" (expand "even?")
                    (("3" (iff) (("3" (prop) nil nil)) nil)) nil)
                   ("4" (expand "even?")
                    (("4" (iff) (("4" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((equivT const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (reflexive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (symmetric? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   150675 390 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493717741 3494001179
   ("" (subtype-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil))
   369 280 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493717741 3494001183
   ("" (assuming-tcc)
    (("" (expand "ref7")
      (("" (smash)
        (("1" (expand "g7") (("1" (smash) nil nil)) nil)
         ("2" (expand "g7") (("2" (smash) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((even? const-decl "bool" integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (g7 const-decl "[T7 -> U7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (ref7 const-decl "predicate[[T7, U7]]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil))
   235 100 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493717741 3494001188
   ("" (assuming-tcc)
    (("" (expand "ref7") (("" (smash) (("" (grind) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((even? const-decl "bool" integers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e7 const-decl "[U7 -> T7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (ref7 const-decl "predicate[[T7, U7]]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil))
   605 520 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493717741 3494001192
   ("" (skolem-typepred)
    (("" (expand "equivT")
      (("" (expand "odd?")
        (("" (expand "e7")
          (("" (prop)
            (("" (expand "even?")
              (("" (smash)
                (("1" (expand "g7")
                  (("1" (smash)
                    (("1" (expand "even?") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil)
                 ("3" (inst 1 "0") (("3" (grind) nil nil)) nil)
                 ("4" (expand "g7")
                  (("4" (smash)
                    (("1" (inst + "0") (("1" (grind) nil nil)) nil)
                     ("2" (expand "even?") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (g7 const-decl "[T7 -> U7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even? const-decl "bool" integers nil)
    (e7 const-decl "[U7 -> T7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (equivT const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   521 380 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493717741 3494001196
   ("" (skolem-typepred)
    (("" (expand "equivU")
      (("" (expand "odd?")
        (("" (iff)
          (("" (prop)
            (("1" (expand "e7")
              (("1" (expand "g7")
                (("1" (smash)
                  (("1" (expand "even?") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "g7")
              (("2" (expand "e7")
                (("2" (smash)
                  (("2" (expand "even?")
                    (("2" (skolem!)
                      (("2" (inst + "0") (("2" (smash) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (g7 const-decl "[T7 -> U7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e7 const-decl "[U7 -> T7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equivU const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   325 210 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493717741 3494001201
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "g7")
        (("" (expand "equivT")
          (("" (expand "equivU")
            (("" (expand "odd?")
              (("" (expand "even?")
                (("" (iff)
                  (("" (prop)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (record) nil nil) ("2" (record) nil nil)
                         ("3" (record) nil nil) ("4" (record) nil nil))
                        nil))
                      nil)
                     ("2" (smash) nil nil) ("3" (smash) nil nil)
                     ("4" (iff)
                      (("4" (prop)
                        (("1" (smash) nil nil) ("2" (smash) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (g7 const-decl "[T7 -> U7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (equivU const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd? const-decl "bool" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivT const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   503 420 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493717741 3494001206
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "e7")
        (("" (expand "equivU")
          (("" (expand "equivT")
            (("" (iff)
              (("" (prop)
                (("1" (expand "even?")
                  (("1" (smash) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (smash)
                  (("2" (expand "even?")
                    (("2" (expand "odd?") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (e7 const-decl "[U7 -> T7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (equivT const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (even? const-decl "bool" integers nil)
    (equivU const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   491 350 t nil)))
(finite_to_infinite_finite_equival_infinite_equival_classes
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493904101 3493994579
   ("" (subtype-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T8 type-eq-decl nil
     finite_to_infinite_finite_equival_infinite_equival_classes nil))
   353 260 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493904101 3493994583
   ("" (subtype-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (U8 type-eq-decl nil
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   426 310 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493904101 3493994595
   ("" (assuming-tcc)
    (("" (expand "ref8")
      (("" (smash)
        (("" (expand "g8") (("" (smash) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((even? const-decl "bool" integers nil)
    (T8 type-eq-decl nil
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (g8 const-decl "[T8 -> U8]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (ref8 const-decl "predicate[[T8, U8]]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil))
   8630 390 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493904101 3493994611
   ("" (assuming-tcc)
    (("" (expand "ref8")
      (("" (smash)
        (("1" (grind) nil nil)
         ("2" (expand "e8") (("2" (smash) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((even? const-decl "bool" integers nil)
    (U8 type-eq-decl nil
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (e8 const-decl "[U8 -> T8]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (ref8 const-decl "predicate[[T8, U8]]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil))
   9451 140 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493904101 3493994619
   ("" (skolem!)
    (("" (expand "equivT")
      (("" (iff)
        (("" (prop)
          (("1" (expand "even?")
            (("1" (expand "odd?")
              (("1" (smash) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (smash)
            (("2" (expand "odd?")
              (("2" (expand "even?")
                (("2" (smash)
                  (("2" (expand "e8")
                    (("2" (smash)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((even? const-decl "bool" integers nil)
    (e8 const-decl "[U8 -> T8]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (g8 const-decl "[T8 -> U8]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (odd? const-decl "bool" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivT const-decl "bool"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   3044 230 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493904101 3493994910
   ("" (skolem-typepred)
    (("" (expand "equivU")
      (("" (expand "g8")
        (("" (smash) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equivU const-decl "bool"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (e8 const-decl "[U8 -> T8]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (g8 const-decl "[T8 -> U8]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (U8 type-eq-decl nil
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   24300 180 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493904101 3493994880
   ("" (skolem!)
    (("" (flatten)
      (("" (expand "equivT")
        (("" (expand "equivU")
          (("" (iff)
            (("" (prop)
              (("1" (expand "odd?")
                (("1" (expand "even?")
                  (("1" (expand "g8")
                    (("1" (smash)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equivT const-decl "bool"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (g8 const-decl "[T8 -> U8]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (equivU const-decl "bool"
     finite_to_infinite_finite_equival_infinite_equival_classes nil))
   479 380 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493913147 3493994874
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "e8")
        (("" (expand "equivU")
          (("" (expand "equivT")
            (("" (smash)
              (("1" (expand "odd?")
                (("1" (expand "even?") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (expand "odd?") (("2" (propax) nil nil)) nil)
               ("3" (expand "even?")
                (("3" (expand "odd?") (("3" (propax) nil nil)) nil))
                nil)
               ("4" (expand "odd?")
                (("4" (expand "even?") (("4" (propax) nil nil)) nil))
                nil)
               ("5" (expand "even?")
                (("5" (expand "odd?") (("5" (propax) nil nil)) nil))
                nil)
               ("6" (expand "odd?")
                (("6" (expand "even?") (("6" (propax) nil nil)) nil))
                nil)
               ("7" (expand "odd?") (("7" (propax) nil nil)) nil)
               ("8" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equivU const-decl "bool"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivT const-decl "bool"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (e8 const-decl "[U8 -> T8]"
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (U8 type-eq-decl nil
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (T8 type-eq-decl nil
     finite_to_infinite_finite_equival_infinite_equival_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   66544 1900 t nil)))
(trivial_tuple_refinement
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3495902842 3495903964
   ("" (expand "equivalence?")
    (("" (prop)
      (("1" (expand "reflexive?")
        (("1" (skolem-typepred)
          (("1" (expand "equivT") (("1" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (expand "symmetric?")
        (("2" (skolem-typepred)
          (("2" (flatten)
            (("2" (expand "equivT") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (expand "transitive?")
        (("3" (skolem-typepred)
          (("3" (flatten)
            (("3" (expand "equivT") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool" trivial_tuple_refinement nil))
   138 30 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3495902842 3495903968
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool" trivial_tuple_refinement nil))
   72 20 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3495902842 3495903974
   ("" (assuming-tcc) nil nil) unchecked
   ((ref9 const-decl "predicate[[T9, U9]]" trivial_tuple_refinement
     nil))
   46 10 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3495902842 3495903978
   ("" (assuming-tcc) nil nil) unchecked
   ((ref9 const-decl "predicate[[T9, U9]]" trivial_tuple_refinement
     nil))
   70 10 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3495902842 3495903983
   ("" (assuming-tcc) nil nil) unchecked
   ((equivT const-decl "bool" trivial_tuple_refinement nil)) 62 10 t
   nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3495902842 3495903988
   ("" (assuming-tcc) nil nil) unchecked
   ((equivU const-decl "bool" trivial_tuple_refinement nil)) 64 10 t
   nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3495902842 3495903992
   ("" (assuming-tcc) nil nil) unchecked
   ((equivU const-decl "bool" trivial_tuple_refinement nil)
    (equivT const-decl "bool" trivial_tuple_refinement nil))
   35 10 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3495902842 3495903997
   ("" (assuming-tcc) nil nil) unchecked
   ((equivT const-decl "bool" trivial_tuple_refinement nil)
    (equivU const-decl "bool" trivial_tuple_refinement nil))
   60 10 t nil)))
(finite_nats_tuple_trivial
 (g10_TCC1 0
  (g10_TCC1-1 nil 3495909195 3495911892
   ("" (skolem!) (("" (typepred "t!1`1") (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T10 type-eq-decl nil finite_nats_tuple_trivial nil))
   121 60 t nil))
 (g10_TCC2 0
  (g10_TCC2-1 nil 3495909195 3495911897 ("" (subtype-tcc) nil nil)
   unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   150 70 t nil))
 (e10_TCC1 0
  (e10_TCC1-1 nil 3495909195 3495911902 ("" (subtype-tcc) nil nil)
   unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   171 110 t nil))
 (e10_TCC2 0
  (e10_TCC2-1 nil 3495909195 3495911908 ("" (subtype-tcc) nil nil)
   unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   173 130 t nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3495909195 3495911913
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool" finite_nats_tuple_trivial nil))
   168 80 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3495909195 3495911919
   ("" (subtype-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool" finite_nats_tuple_trivial nil))
   564 450 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3495909195 3495986687
   ("" (assuming-tcc) nil nil) unchecked
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ref10 const-decl "predicate[[T10, U10]]" finite_nats_tuple_trivial
     nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (g10 const-decl "[T10 -> U10]" finite_nats_tuple_trivial nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   367 240 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3495909195 3495986714
   ("" (skolem!)
    (("" (expand "ref10")
      (("" (prop)
        (("1" (expand "e10") (("1" (propax) nil nil)) nil)
         ("2" (expand "e10") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((e10 const-decl "[U10 -> T10]" finite_nats_tuple_trivial nil)
    (ref10 const-decl "predicate[[T10, U10]]" finite_nats_tuple_trivial
     nil))
   15315 20 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3495909195 3495915827
   ("" (auto-rewrite-defs :always? true)
    (("" (assert)
      (("" (skolem-typepred)
        ((""
          (assert :let-reduce? t :quant-simp? nil :implicit-typepreds?
                  nil :cases-rewrite? nil)
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (prop)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (smash) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equivT const-decl "bool" finite_nats_tuple_trivial nil)
    (e10 const-decl "[U10 -> T10]" finite_nats_tuple_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (g10 const-decl "[T10 -> U10]" finite_nats_tuple_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   361288 590 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3495909195 3495911952
   ("" (assuming-tcc) nil nil) unchecked
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivU const-decl "bool" finite_nats_tuple_trivial nil)
    (g10 const-decl "[T10 -> U10]" finite_nats_tuple_trivial nil)
    (e10 const-decl "[U10 -> T10]" finite_nats_tuple_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   462 340 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3495909195 3495911960
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "equivT")
        (("" (expand "equivU")
          (("" (prop)
            (("1" (grind) nil nil)
             ("2" (expand "g10") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((equivT const-decl "bool" finite_nats_tuple_trivial nil)
    (g10 const-decl "[T10 -> U10]" finite_nats_tuple_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivU const-decl "bool" finite_nats_tuple_trivial nil))
   782 600 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3495909195 3495911967
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "equivU")
        (("" (expand "equivT")
          (("" (prop)
            (("1" (expand "e10") (("1" (grind) nil nil)) nil)
             ("2" (expand "e10") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((equivU const-decl "bool" finite_nats_tuple_trivial nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (e10 const-decl "[U10 -> T10]" finite_nats_tuple_trivial nil)
    (equivT const-decl "bool" finite_nats_tuple_trivial nil))
   1401 1010 t nil)))
(infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3496031729 3496031744
   ("" (subtype-tcc) nil nil) proved
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil))
   267 130 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3496031729 3496031749
   ("" (subtype-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil))
   550 370 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3496031729 3496031754
   ("" (assuming-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ref11 const-decl "predicate[[T11, U11]]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (g11 const-decl "[T11 -> U11]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   386 240 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3496031729 3496031759
   ("" (assuming-tcc) nil nil) proved
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (ref11 const-decl "predicate[[T11, U11]]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (e11 const-decl "[U11 -> T11]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/"))
   134 70 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3496031729 3496031765
   ("" (assuming-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equivT const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (e11 const-decl "[U11 -> T11]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (g11 const-decl "[T11 -> U11]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   362 250 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3496031729 3496031770
   ("" (assuming-tcc) nil nil) proved
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivU const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (g11 const-decl "[T11 -> U11]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (e11 const-decl "[U11 -> T11]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   436 320 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3496031729 3496031885
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "g11")
        (("" (expand "equivT")
          (("" (expand "equivU")
            (("" (prop)
              (("1" (expand "div")
                (("1" (expand "sgn") (("1" (smash) nil nil)) nil)) nil)
               ("2" (expand "div")
                (("2" (expand "sgn") (("2" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((equivT const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (sgn const-decl "int" real_defs nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div const-decl "integer" div "ints/")
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivU const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (g11 const-decl "[T11 -> U11]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil))
   74391 830 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3496031729 3496031800
   ("" (assuming-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivT const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (equivU const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (e11 const-decl "[U11 -> T11]"
     infinite_to_infinite_tuples_infinite_equival_finite_equival_classes
     nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn const-decl "int" real_defs nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   384 250 t nil)))
(infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
 (e12_TCC1 0
  (e12_TCC1-1 nil 3496033769 3496033781 ("" (subtype-tcc) nil nil)
   proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   76 20 t nil))
 (e12_TCC2 0
  (e12_TCC2-1 nil 3496033769 3496033777 ("" (subtype-tcc) nil nil)
   proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   109 20 t nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3496033769 3496033787
   ("" (subtype-tcc) nil nil) proved
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil))
   162 70 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3496033769 3496033791
   ("" (subtype-tcc) nil nil) proved
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil))
   150 80 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3496033769 3496033796
   ("" (assuming-tcc) nil nil) proved
   ((ref12 const-decl "predicate[[T12, U12]]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (g12 const-decl "[T12 -> U12]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil))
   88 20 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3496033769 3496033801
   ("" (assuming-tcc) nil nil) proved
   ((ref12 const-decl "predicate[[T12, U12]]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (e12 const-decl "[U12 -> T12]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil))
   78 20 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3496033769 3496033805
   ("" (assuming-tcc) nil nil) proved
   ((equivT const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (e12 const-decl "[U12 -> T12]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (g12 const-decl "[T12 -> U12]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil))
   50 20 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3496033769 3496033809
   ("" (assuming-tcc) nil nil) proved
   ((equivU const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (g12 const-decl "[T12 -> U12]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (e12 const-decl "[U12 -> T12]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil))
   67 10 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3496033769 3496033814
   ("" (assuming-tcc) nil nil) proved
   ((equivU const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (equivT const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (g12 const-decl "[T12 -> U12]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil))
   116 40 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3496033769 3496033819
   ("" (assuming-tcc) nil nil) proved
   ((equivT const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (equivU const-decl "bool"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil)
    (e12 const-decl "[U12 -> T12]"
     infinite_to_infinite_tuples_infinite_equival_infinite_equival_classes
     nil))
   121 30 t nil)))
(infinite_nats_finite_tuples_equivalence_classes
 (g13_TCC1 0
  (g13_TCC1-1 nil 3496041900 3496041912 ("" (subtype-tcc) nil nil)
   proved
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   104 40 t nil))
 (g13_TCC2 0
  (g13_TCC2-1 nil 3496041900 3496042003
   ("" (subtype-tcc)
    (("" (typepred "t!1`2")
      (("" (expand "odd?") (("" (propax) nil nil)) nil)) nil))
    nil)
   proved
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (T13 type-eq-decl nil
     infinite_nats_finite_tuples_equivalence_classes nil))
   22934 90 t nil))
 (e13_TCC1 0
  (e13_TCC1-1 nil 3496041900 3496042025
   ("" (subtype-tcc)
    (("" (typepred "u!1`1")
      (("" (expand "odd?") (("" (propax) nil nil)) nil)) nil))
    nil)
   proved
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (U13 type-eq-decl nil
     infinite_nats_finite_tuples_equivalence_classes nil))
   17141 90 t nil))
 (e13_TCC2 0
  (e13_TCC2-1 nil 3496041900 nil ("" (subtype-tcc) nil nil) nil nil nil
   nil nil nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3496041900 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3496041900 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3496041900 nil ("" (assuming-tcc) nil nil)
   nil nil nil nil nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3496041900 nil ("" (assuming-tcc) nil nil)
   nil nil nil nil nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3496041900 nil ("" (assuming-tcc) nil nil)
   nil nil nil nil nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3496041900 nil ("" (assuming-tcc) nil nil)
   nil nil nil nil nil nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3496041900 nil ("" (assuming-tcc) nil nil)
   nil nil nil nil nil nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3496041900 nil ("" (assuming-tcc) nil nil)
   nil nil nil nil nil nil)))
(two_to_three_tuple_refinement
 (g10_TCC1 0
  (g10_TCC1-1 nil 3495902842 nil ("" (existence-tcc) nil nil) unchecked
   nil nil nil nil nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3495902842 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3495902842 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3495902842 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3495902842 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3495902842 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3495902842 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3495902842 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3495902842 nil ("" (assuming-tcc) nil nil)
   unchecked nil nil nil nil nil)))
(dependent_tuple_refinement)
(trivial_record_refinement)
(function_refinement)
(sequence_refinement)
(list_refinement)
(datatypes_refinement)
(predicate_refinement)
(relation_refinement)
(indexed_sets_refinement)
(nested_sets_refinement)
(subtype_refinement)
(dependent_type_refinement)
(simplest_examples)
(intermediate_examples)

