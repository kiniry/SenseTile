(refinement
 (ext_preserves_equiv 0
  (ext_preserves_equiv-1 nil 3493218719 3493218762
   ("" (auto-rewrite-defs :always? true)
    (("" (assert) (("" (grind) (("" (postpone) nil nil)) nil)) nil))
    nil)
   unchecked nil 42951 80 t shostak))
 (ref_extract_generate_equal 0
  (ref_extract_generate_equal-1 nil 3493376461 3493445387
   ("" (use "ext_preserves_equiv")
    (("" (skosimp)
      (("" (inst - "ext(u!1)" "ext(gen(t!1))" "u!1" "gen(t!1)")
        (("" (prop) nil nil)) nil))
      nil))
    nil)
   unfinished
   ((gen formal-const-decl "[T -> U]" refinement nil)
    (ext formal-const-decl "[U -> T]" refinement nil)
    (U formal-type-decl nil refinement nil)
    (T formal-type-decl nil refinement nil)
    (ext_preserves_equiv formula-decl nil refinement nil))
   54571 490 t shostak))
 (ref_generate_extract_equal 0
  (ref_generate_extract_equal-1 nil 3493376524 3493705882
   ("" (skosimp)
    (("" (lemma "gen_preserves_equiv")
      (("" (inst - "t!1" "ext(u!1)" "gen(t!1)" "gen(ext(u!1))")
        (("" (prop) nil nil)) nil))
      nil))
    nil)
   proved
   ((T formal-type-decl nil refinement nil)
    (U formal-type-decl nil refinement nil)
    (ext formal-const-decl "[U -> T]" refinement nil)
    (gen formal-const-decl "[T -> U]" refinement nil)
    (gen_preserves_equiv formula-decl nil refinement nil))
   238 80 t shostak))
 (ref_left_composition 0
  (ref_left_composition-1 nil 3493221933 3493706548
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "left_inverse?")
        (("" (inst - "t!1") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((left_inverse? const-decl "bool" function_inverse_def nil)
    (T formal-type-decl nil refinement nil))
   115036 270 t shostak))
 (ref_right_composition 0
  (ref_right_composition-1 nil 3493223332 3493536156
   ("" (skolem-typepred) (("" (flatten) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((right_inverse? const-decl "bool" function_inverse_def nil)
    (U formal-type-decl nil refinement nil))
   2717 50 t shostak))
 (ref_composition 0
  (ref_composition-1 nil 3493216667 3493223269
   ("" (skosimp)
    (("" (use "ref_left_composition")
      (("" (use "ref_right_composition") (("" (grind) nil nil)) nil))
      nil))
    nil)
   unfinished
   ((ref_left_composition formula-decl nil refinement nil)
    (ext formal-const-decl "[U -> T]" refinement nil)
    (gen formal-const-decl "[T -> U]" refinement nil)
    (U formal-type-decl nil refinement nil)
    (T formal-type-decl nil refinement nil)
    (ref_right_composition formula-decl nil refinement nil))
   33633 40 t shostak))
 (rep_equiv_ref_impl 0
  (rep_equiv_ref_impl-1 nil 3493368335 3493377287
   ("" (grind)
    (("" (expand "EquivClass") (("" (postpone) nil nil)) nil)) nil)
   unfinished nil 47008 160 t shostak))
 (rep_equiv_ext_ref_impl 0
  (rep_equiv_ext_ref_impl-1 nil 3493377117 3493377228
   ("" (postpone) nil nil) unfinished nil 110582 230 t shostak)))
(refinement_model_theory
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488787669 3493127412
   ("" (assuming-tcc) nil nil) unchecked nil 56 20 nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488787669 3493127412
   ("" (assuming-tcc) nil nil) unchecked nil 26 30 nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488787669 3493127412
   ("" (assuming-tcc) nil nil) unchecked nil 72 50 nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488787669 3493127412
   ("" (assuming-tcc) nil nil) unchecked nil 47 50 nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked nil 104 60 nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked nil 80 60 nil nil)))
(singleton_example
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488787669 3493127413
   ("" (subtype-tcc) nil nil) unchecked
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   53 60 nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488787669 3493127413
   ("" (subtype-tcc) nil nil) unchecked
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   39 30 nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((g0 const-decl "[T0 -> U0]" singleton_example nil)
    (ref0 const-decl "predicate[[T0, U0]]" singleton_example nil))
   6 0 nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((e0 const-decl "[U0 -> T0]" singleton_example nil)
    (ref0 const-decl "predicate[[T0, U0]]" singleton_example nil))
   6 10 nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((g0 const-decl "[T0 -> U0]" singleton_example nil)
    (e0 const-decl "[U0 -> T0]" singleton_example nil))
   23 0 nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((e0 const-decl "[U0 -> T0]" singleton_example nil)
    (g0 const-decl "[T0 -> U0]" singleton_example nil))
   6 0 nil nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((g0 const-decl "[T0 -> U0]" singleton_example nil)) 12 10 nil nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3488787669 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((e0 const-decl "[U0 -> T0]" singleton_example nil)) 9 0 nil nil)))
(finite_nats_trivial
 (g1_TCC1 0
  (g1_TCC1-1 nil 3488788908 3493127413 ("" (subtype-tcc) nil nil)
   unchecked nil 33 40 nil nil))
 (e1_TCC1 0
  (e1_TCC1-1 nil 3488788908 3493127413 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   161 140 t nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488788908 3493127413
   ("" (subtype-tcc) nil nil) unchecked
   ((T1 type-eq-decl nil finite_nats_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   137 100 nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488788908 3493127413
   ("" (subtype-tcc) nil nil) unchecked
   ((U1 type-eq-decl nil finite_nats_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   348 300 nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488788908 3493127413
   ("" (assuming-tcc) nil nil) unchecked
   ((g1 const-decl "[T1 -> U1]" finite_nats_trivial nil)
    (ref1 const-decl "predicate[[T1, U1]]" finite_nats_trivial nil))
   14 20 nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488788908 3493127414
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ref1 const-decl "predicate[[T1, U1]]" finite_nats_trivial nil)
    (e1 const-decl "[U1 -> T1]" finite_nats_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   356 300 nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488788908 3493127414
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T1 type-eq-decl nil finite_nats_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (e1 const-decl "[U1 -> T1]" finite_nats_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (g1 const-decl "[T1 -> U1]" finite_nats_trivial nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   261 240 nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488788908 3493127414
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e1 const-decl "[U1 -> T1]" finite_nats_trivial nil)
    (g1 const-decl "[T1 -> U1]" finite_nats_trivial nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   279 270 nil nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3488788908 3493127415
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T1 type-eq-decl nil finite_nats_trivial nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (g1 const-decl "[T1 -> U1]" finite_nats_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   366 330 nil nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3488788908 3493127415
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T1 type-eq-decl nil finite_nats_trivial nil)
    (U1 type-eq-decl nil finite_nats_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e1 const-decl "[U1 -> T1]" finite_nats_trivial nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   217 180 nil nil)))
(finite_nats_non_trivial
 (g2_TCC1 0
  (g2_TCC1-1 nil 3488788853 3493732374 ("" (subtype-tcc) nil nil)
   proved nil 59 10 t nil))
 (e2_TCC1 0
  (e2_TCC1-1 nil 3488788853 3493127415 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   156 130 nil nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488788853 3493127416
   ("" (subtype-tcc) nil nil) unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (T2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   645 540 nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488788853 3493732459
   ("" (subtype-tcc)
    (("1" (expand "abs") (("1" (smash) nil nil)) nil)
     ("2" (expand "abs") (("2" (smash) nil nil)) nil))
    nil)
   proved
   ((== const-decl "bool" finite_nats_non_trivial nil)
    (reflexive? const-decl "bool" relations nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "nat" div "ints/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil))
   17434 1740 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488788853 3493732437
   ("" (assuming-tcc) nil nil) proved
   ((ref2 const-decl "predicate[[T2, U2]]" finite_nats_non_trivial nil)
    (g2 const-decl "[T2 -> U2]" finite_nats_non_trivial nil))
   65 10 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488788853 3493732432
   ("" (assuming-tcc) nil nil) proved
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e2 const-decl "[U2 -> T2]" finite_nats_non_trivial nil)
    (ref2 const-decl "predicate[[T2, U2]]" finite_nats_non_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   358 240 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488788853 3493732428
   ("" (assuming-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (== const-decl "bool" finite_nats_non_trivial nil)
    (e2 const-decl "[U2 -> T2]" finite_nats_non_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (g2 const-decl "[T2 -> U2]" finite_nats_non_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (T2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   425 290 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488788853 3493732422
   ("" (assuming-tcc) nil nil) proved
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "nat" div "ints/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e2 const-decl "[U2 -> T2]" finite_nats_non_trivial nil)
    (g2 const-decl "[T2 -> U2]" finite_nats_non_trivial nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (== const-decl "bool" finite_nats_non_trivial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil))
   467 330 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3488788853 3493732395
   ("" (skolem-typepred) (("" (flatten) (("" (grind) nil nil)) nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T2 type-eq-decl nil finite_nats_non_trivial nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "nat" div "ints/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (g2 const-decl "[T2 -> U2]" finite_nats_non_trivial nil)
    (== const-decl "bool" finite_nats_non_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (== const-decl "bool" finite_nats_non_trivial nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   4417 1390 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3488788853 3493732413
   ("" (assuming-tcc) (("" (expand "abs") (("" (smash) nil nil)) nil))
    nil)
   proved
   ((sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e2 const-decl "[U2 -> T2]" finite_nats_non_trivial nil)
    (== const-decl "bool" finite_nats_non_trivial nil)
    (== const-decl "bool" finite_nats_non_trivial nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "nat" div "ints/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (U2 type-eq-decl nil finite_nats_non_trivial nil)
    (T2 type-eq-decl nil finite_nats_non_trivial nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil))
   13021 580 t nil)))
(infinite_to_infinite_infinite_equival_finite_equival_classes
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493708103 3493708135
   ("" (subtype-tcc) nil nil) proved
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil))
   233 140 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493708103 3493708139
   ("" (subtype-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil))
   446 330 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493708103 3493708144
   ("" (assuming-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (ref4 const-decl "predicate[[T4, U4]]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   329 220 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493708103 3493708148
   ("" (assuming-tcc) nil nil) proved
   ((int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (ref4 const-decl "predicate[[T4, U4]]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil))
   120 80 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493708103 3493708152
   ("" (assuming-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   310 220 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493708103 3493708157
   ("" (assuming-tcc) nil nil) proved
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil))
   356 280 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493708103 3493708161
   ("" (assuming-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   431 330 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493708103 3493708167
   ("" (assuming-tcc) nil nil) proved
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   286 170 t nil)))
(infinite_to_infinite_infinite_equival_infinite_equival_classes
 (e4_TCC1 0
  (e4_TCC1-1 nil 3493711581 3493713371 ("" (subtype-tcc) nil nil)
   proved nil 98 10 t nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493709490 3493713375
   ("" (subtype-tcc) nil nil) proved
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   192 100 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493709490 3493713379
   ("" (subtype-tcc) nil nil) proved
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   181 130 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493709490 3493713384
   ("" (assuming-tcc) nil nil) proved
   ((ref4 const-decl "predicate[[T4, U4]]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   22 10 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493709490 3493713388
   ("" (assuming-tcc) nil nil) proved
   ((ref4 const-decl "predicate[[T4, U4]]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   56 20 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493709490 3493713392
   ("" (assuming-tcc) nil nil) proved
   ((equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   30 0 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493709490 3493713396
   ("" (assuming-tcc) nil nil) proved
   ((equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil))
   30 10 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493709490 3493713400
   ("" (assuming-tcc) nil nil) proved
   ((equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (g4 const-decl "[T4 -> U4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   126 60 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493709490 3493713404
   ("" (assuming-tcc) nil nil) proved
   ((equivT const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (equivU const-decl "bool"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (e4 const-decl "[U4 -> T4]"
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (U4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (T4 type-eq-decl nil
     infinite_to_infinite_infinite_equival_infinite_equival_classes
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   121 60 t nil)))
(infinite_nats_finite_equivalence_classes
 (g3_TCC1 0
  (g3_TCC1-1 nil 3493116210 3493127440 ("" (subtype-tcc) nil nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers
     nil))
   58 60 nil nil))
 (e3_TCC1 0
  (e3_TCC1-1 nil 3493116210 3493127440 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil))
   153 130 nil nil))
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493116210 3493127440
   ("" (subtype-tcc) nil nil) unchecked
   ((T3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (equivT const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   216 180 nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493116210 3493127441
   ("" (subtype-tcc) nil nil) unchecked
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (U3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (equivU const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   229 200 nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493116210 3493127441
   ("" (assuming-tcc) nil nil) unchecked
   ((g3 const-decl "[T3 -> U3]"
     infinite_nats_finite_equivalence_classes nil)
    (ref3 const-decl "predicate[[T3, U3]]"
     infinite_nats_finite_equivalence_classes nil))
   12 10 nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493116210 3493127441
   ("" (assuming-tcc) nil nil) unchecked
   ((e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil)
    (ref3 const-decl "predicate[[T3, U3]]"
     infinite_nats_finite_equivalence_classes nil))
   11 10 nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493116210 3493127441
   ("" (assuming-tcc) nil nil) unchecked
   ((g3 const-decl "[T3 -> U3]"
     infinite_nats_finite_equivalence_classes nil)
    (e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil)
    (equivT const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   67 70 nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493116210 3493127441
   ("" (assuming-tcc) nil nil) unchecked
   ((e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil)
    (g3 const-decl "[T3 -> U3]"
     infinite_nats_finite_equivalence_classes nil)
    (equivU const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   68 70 nil nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493116210 3493546581
   ("" (assuming-tcc) nil nil) unchecked
   ((odd? const-decl "bool" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil)
    (surjective? const-decl "bool" functions nil)
    (g3 const-decl "[T3 -> U3]"
     infinite_nats_finite_equivalence_classes nil)
    (equivT const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (U3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (T3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2030 930 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493116210 3493127441
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (odd? const-decl "bool" integers nil)
    (U3 type-eq-decl nil infinite_nats_finite_equivalence_classes nil)
    (e3 const-decl "[U3 -> T3]"
     infinite_nats_finite_equivalence_classes nil)
    (equivU const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (equivT const-decl "bool" infinite_nats_finite_equivalence_classes
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   146 130 nil nil)))
(infinite_to_infinite_trivial
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3492947826 3493127442
   ("" (subtype-tcc) nil nil) unchecked
   ((T4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (equivT const-decl "bool" infinite_to_infinite_trivial nil)
    (reflexive? const-decl "bool" relations nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   304 250 nil nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3492947826 3493127442
   ("" (subtype-tcc) nil nil) unchecked
   ((T4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (equivU const-decl "bool" infinite_to_infinite_trivial nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   99 80 nil nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3492947826 3493127442
   ("" (assuming-tcc) nil nil) unchecked
   ((sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (g4 const-decl "[T4 -> U4]" infinite_to_infinite_trivial nil)
    (ref4 const-decl "predicate[[T4, U4]]" infinite_to_infinite_trivial
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   67 70 nil nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3492947826 3493127442
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (U4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (ref4 const-decl "predicate[[T4, U4]]" infinite_to_infinite_trivial
     nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (e4 const-decl "[U4 -> T4]" infinite_to_infinite_trivial nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   228 210 nil nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3492947826 3493127442
   ("" (assuming-tcc) nil nil) unchecked
   ((T4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (g4 const-decl "[T4 -> U4]" infinite_to_infinite_trivial nil)
    (e4 const-decl "[U4 -> T4]" infinite_to_infinite_trivial nil)
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (equivT const-decl "bool" infinite_to_infinite_trivial nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   285 270 nil nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3492947826 3493127442
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (U4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (equivU const-decl "bool" infinite_to_infinite_trivial nil)
    (g4 const-decl "[T4 -> U4]" infinite_to_infinite_trivial nil)
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (e4 const-decl "[U4 -> T4]" infinite_to_infinite_trivial nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   224 200 nil nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3492947826 3493127443
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (U4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (g4 const-decl "[T4 -> U4]" infinite_to_infinite_trivial nil)
    (equivT const-decl "bool" infinite_to_infinite_trivial nil)
    (equivU const-decl "bool" infinite_to_infinite_trivial nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   286 200 nil nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3492947826 3493127443
   ("" (assuming-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (U4 type-eq-decl nil infinite_to_infinite_trivial nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (e4 const-decl "[U4 -> T4]" infinite_to_infinite_trivial nil)
    (equivU const-decl "bool" infinite_to_infinite_trivial nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (equivT const-decl "bool" infinite_to_infinite_trivial nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   345 320 nil nil)))
(finite_to_infinite
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3488787670 3493127449
   ("" (subtype-tcc) nil nil) unchecked
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool" finite_to_infinite nil))
   129 80 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3488787670 3493127454
   ("" (expand "equivU")
    (("" (expand "equivalence?")
      (("" (split)
        (("1" (expand "reflexive?") (("1" (propax) nil nil)) nil)
         ("2" (expand "symmetric?")
          (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)
         ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   unchecked
   ((equivU const-decl "bool" finite_to_infinite nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   260 200 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3488787670 3493127459
   ("" (assuming-tcc) nil nil) unchecked
   ((ref6 const-decl "predicate[[T6, U6]]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T6 type-eq-decl nil finite_to_infinite nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (g6 const-decl "[T6 -> U6]" finite_to_infinite nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   194 150 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3488787670 3493127464
   ("" (assuming-tcc) nil nil) unchecked
   ((ref6 const-decl "predicate[[T6, U6]]" finite_to_infinite nil)
    (e6 const-decl "[U6 -> T6]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil))
   34 20 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3488787670 3493133292 ("" (grind) nil nil)
   unchecked
   ((g6 const-decl "[T6 -> U6]" finite_to_infinite nil)
    (e6 const-decl "[U6 -> T6]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (equivT const-decl "bool" finite_to_infinite nil))
   27814 30 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3488787670 3493133379
   ("" (skolem-typepred)
    (("" (expand "equivU")
      (("" (expand "g6")
        (("" (expand "e6")
          (("" (expand "even?") (("" (smash) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((equivU const-decl "bool" finite_to_infinite nil)
    (e6 const-decl "[U6 -> T6]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (g6 const-decl "[T6 -> U6]" finite_to_infinite nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   13486 40 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3488787670 3493127478
   ("" (assuming-tcc) nil nil) unchecked
   ((equivU const-decl "bool" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (equivT const-decl "bool" finite_to_infinite nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   90 50 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3488787670 3493127484
   ("" (assuming-tcc) nil nil) unchecked
   ((equivT const-decl "bool" finite_to_infinite nil)
    (equivU const-decl "bool" finite_to_infinite nil)
    (e6 const-decl "[U6 -> T6]" finite_to_infinite nil)
    (even? const-decl "bool" integers nil)
    (U6 type-eq-decl nil finite_to_infinite nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   125 60 t nil)))
(infinite_to_finite_finite_equival_finite_equival_classes)
(infinite_to_finite_infinite_equival_finite_equival_classes
 (IMP_refinement_TCC1 0
  (IMP_refinement_TCC1-1 nil 3493717741 3493730858
   ("" (expand "equivalence?")
    (("" (prop)
      (("1" (expand "reflexive?")
        (("1" (expand "equivT") (("1" (propax) nil nil)) nil)) nil)
       ("2" (expand "symmetric?")
        (("2" (skolem-typepred)
          (("2" (flatten)
            (("2" (expand "equivT")
              (("2" (expand "odd?")
                (("2" (expand "even?")
                  (("2" (prop)
                    (("1" (iff) (("1" (prop) nil nil)) nil)
                     ("2" (iff) (("2" (prop) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "transitive?")
        (("3" (skolem-typepred)
          (("3" (flatten)
            (("3" (expand "equivT")
              (("3" (expand "odd?")
                (("3" (expand "even?")
                  (("3" (prop)
                    (("1" (iff) (("1" (prop) nil nil)) nil)
                     ("2" (iff) (("2" (prop) nil nil)) nil)
                     ("3" (iff) (("3" (prop) nil nil)) nil)
                     ("4" (iff) (("4" (prop) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (even? const-decl "bool" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (equivT const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil))
   44738 380 t nil))
 (IMP_refinement_TCC2 0
  (IMP_refinement_TCC2-1 nil 3493717741 3493730864
   ("" (subtype-tcc) nil nil) proved
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (equivU const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil))
   337 260 t nil))
 (IMP_refinement_TCC3 0
  (IMP_refinement_TCC3-1 nil 3493717741 3493730869
   ("" (assuming-tcc)
    (("" (expand "ref7")
      (("" (smash)
        (("1" (expand "g7") (("1" (smash) nil nil)) nil)
         ("2" (expand "g7") (("2" (smash) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((even? const-decl "bool" integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (g7 const-decl "[T7 -> U7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (ref7 const-decl "predicate[[T7, U7]]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil))
   191 110 t nil))
 (IMP_refinement_TCC4 0
  (IMP_refinement_TCC4-1 nil 3493717741 3493730874
   ("" (assuming-tcc)
    (("" (expand "ref7") (("" (smash) (("" (grind) nil nil)) nil))
      nil))
    nil)
   proved
   ((even? const-decl "bool" integers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e7 const-decl "[U7 -> T7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (ref7 const-decl "predicate[[T7, U7]]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil))
   661 530 t nil))
 (IMP_refinement_TCC5 0
  (IMP_refinement_TCC5-1 nil 3493717741 3493730936
   ("" (skolem-typepred)
    (("" (expand "equivT")
      (("" (expand "odd?")
        (("" (expand "e7")
          (("" (prop)
            (("" (expand "even?")
              (("" (smash)
                (("1" (expand "g7")
                  (("1" (smash)
                    (("1" (expand "even?") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil)
                 ("3" (inst 1 "0") (("3" (grind) nil nil)) nil)
                 ("4" (expand "g7")
                  (("4" (smash)
                    (("1" (inst + "0") (("1" (grind) nil nil)) nil)
                     ("2" (expand "even?") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (g7 const-decl "[T7 -> U7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even? const-decl "bool" integers nil)
    (e7 const-decl "[U7 -> T7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (equivT const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   56978 920 t nil))
 (IMP_refinement_TCC6 0
  (IMP_refinement_TCC6-1 nil 3493717741 3493730943
   ("" (skolem-typepred)
    (("" (expand "equivU")
      (("" (expand "odd?")
        (("" (iff)
          (("" (prop)
            (("1" (expand "e7")
              (("1" (expand "g7")
                (("1" (smash)
                  (("1" (expand "even?") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "g7")
              (("2" (expand "e7")
                (("2" (smash)
                  (("2" (expand "even?")
                    (("2" (skolem!)
                      (("2" (inst + "0") (("2" (smash) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (g7 const-decl "[T7 -> U7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e7 const-decl "[U7 -> T7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equivU const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   371 230 t nil))
 (IMP_refinement_TCC7 0
  (IMP_refinement_TCC7-1 nil 3493717741 3493730949
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "g7")
        (("" (expand "equivT")
          (("" (expand "equivU")
            (("" (expand "odd?")
              (("" (expand "even?")
                (("" (iff)
                  (("" (prop)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (g7 const-decl "[T7 -> U7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (equivU const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (even? const-decl "bool" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd? const-decl "bool" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (equivT const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   580 470 t nil))
 (IMP_refinement_TCC8 0
  (IMP_refinement_TCC8-1 nil 3493717741 3493730958
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "e7")
        (("" (expand "equivU")
          (("" (expand "equivT")
            (("" (iff)
              (("" (prop)
                (("1" (expand "even?")
                  (("1" (smash) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (smash)
                  (("2" (expand "even?")
                    (("2" (expand "odd?") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (U7 type-eq-decl nil
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (e7 const-decl "[U7 -> T7]"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (equivT const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (even? const-decl "bool" integers nil)
    (equivU const-decl "bool"
     infinite_to_finite_infinite_equival_finite_equival_classes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   3788 380 t nil)))
(simplest_examples)

