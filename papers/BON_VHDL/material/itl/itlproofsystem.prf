(itlproofsystem
 (ChopAssoc 0
  (ChopAssoc-2 nil 3391249809 nil
   ("" (skolem!)
    (("" (sem)
      (("" (skosimp*)
        (("" (split)
          (("1" (flatten)
            (("1" (split)
              (("1" (skosimp)
                (("1" (split)
                  (("1" (skosimp)
                    (("1" (inst 1 "m!2")
                      (("1" (split)
                        (("1" (expand "sub") (("1" (propax) nil nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst 1 "m!1-m!2")
                            (("1" (split 1)
                              (("1"
                                (case "infinite(sigma!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sub")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "suf")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "sub")
                                  (("2"
                                    (expand "suf")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "infinite(sigma!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "suf" -4)
                                    (("1"
                                      (expand "suf" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "(LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + m!1)) = (LAMBDA (x_75:
                          {i: nat |
                                   IF infinite(sigma!1)
                                     THEN TRUE
                                   ELSE FALSE
                                   ENDIF
                                    OR
                                    i
                                    <=
                                    IF infinite(sigma!1)
                                    THEN len(sigma!1)
                                    ELSE len(sigma!1) - m!2
                                    ENDIF}):
                  seq(sigma!1)(x_75 + m!1))")
                                          (("1"
                                            (replace -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "suf")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "infinite(sigma!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "suf" 1)
                                  (("1"
                                    (typepred "m!1")
                                    (("1"
                                      (typepred "m!2")
                                      (("1"
                                        (expand "sub" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "suf" 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "m!1")
                                    (("2"
                                      (typepred "m!2")
                                      (("2"
                                        (expand "sub" -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "m!2")
                        (("2" (typepred "m!1")
                          (("2" (expand "sub" -2)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "sub" -1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split -2)
                  (("1" (skosimp)
                    (("1" (inst 1 "m!1")
                      (("1" (split 1)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (expand "suf" 2 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split)
              (("1" (skosimp)
                (("1" (expand "sub" 1 4)
                  (("1" (split)
                    (("1" (skosimp)
                      (("1" (inst 1 "m!1+m!2")
                        (("1" (split 1)
                          (("1" (inst 1 "m!1")
                            (("1" (case "infinite(sigma!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "sub")
                                  (("1"
                                    (expand "suf")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "sub")
                                  (("2"
                                    (expand "suf")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sub" 1)
                              (("2" (propax) nil nil)) nil))
                            nil)
                           ("2" (case "infinite(sigma!1)")
                            (("1" (assert)
                              (("1"
                                (expand "suf")
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (hide -2 -4)
                                    (("1"
                                      (case
                                       "(LAMBDA (x_120:
                          {i: nat |
                                   IF infinite(sigma!1)
                                     THEN TRUE
                                   ELSE FALSE
                                   ENDIF
                                    OR
                                    i
                                    <=
                                    IF infinite(sigma!1)
                                    THEN len(sigma!1)
                                    ELSE len(sigma!1) - m!1
                                    ENDIF}):
                  seq(sigma!1)(x_120 + m!1 + m!2)) = (LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + m!1 + m!2))")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality
                                         1
                                         :hide?
                                         t)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "suf")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "m!1")
                          (("2" (assert)
                            (("2" (typepred "m!2")
                              (("2"
                                (expand "suf" -1)
                                (("2"
                                  (case "infinite(sigma!1)")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "suf" -1)
                        (("2" (case "infinite(sigma!1)")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst 2 "m!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((suf const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (== const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (^ const-decl "form" itlsyntax nil))
   nil nil nil nil)
  (ChopAssoc-1 nil 3391230323 3391230471
   ("" (skolem!)
    (("" (sem)
      (("" (skosimp*)
        (("" (split)
          (("1" (flatten)
            (("1" (split)
              (("1" (skosimp)
                (("1" (split)
                  (("1" (skosimp)
                    (("1" (inst 1 "m!2")
                      (("1" (split)
                        (("1" (expand "sub") (("1" (propax) nil nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst 1 "m!1-m!2")
                            (("1" (split 1)
                              (("1"
                                (case "infinite(sigma!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sub")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "suf")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "sub")
                                  (("2"
                                    (expand "suf")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "infinite(sigma!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "suf" -4)
                                    (("1"
                                      (expand "suf" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "(LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + m!1)) = (LAMBDA (x_75:
                          {i: nat |
                                   IF infinite(sigma!1)
                                     THEN TRUE
                                   ELSE FALSE
                                   ENDIF
                                    OR
                                    i
                                    <=
                                    IF infinite(sigma!1)
                                    THEN len(sigma!1)
                                    ELSE len(sigma!1) - m!2
                                    ENDIF}):
                  seq(sigma!1)(x_75 + m!1))")
                                          (("1"
                                            (replace -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "suf")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "infinite(sigma!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "suf" 1)
                                  (("1"
                                    (typepred "m!1")
                                    (("1"
                                      (typepred "m!2")
                                      (("1"
                                        (expand "sub" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "suf" 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "m!1")
                                    (("2"
                                      (typepred "m!2")
                                      (("2"
                                        (expand "sub" -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "m!2")
                        (("2" (typepred "m!1")
                          (("2" (expand "sub" -2)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "sub" -1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split -2)
                  (("1" (skosimp)
                    (("1" (inst 1 "m!1")
                      (("1" (split 1)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (expand "suf" 2 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split)
              (("1" (skosimp)
                (("1" (expand "sub" 1 4)
                  (("1" (split)
                    (("1" (skosimp)
                      (("1" (inst 1 "m!1+m!2")
                        (("1" (split 1)
                          (("1" (inst 1 "m!1")
                            (("1" (case "infinite(sigma!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "sub")
                                  (("1"
                                    (expand "suf")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "sub")
                                  (("2"
                                    (expand "suf")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sub" 1)
                              (("2" (propax) nil nil)) nil))
                            nil)
                           ("2" (case "infinite(sigma!1)")
                            (("1" (assert)
                              (("1"
                                (expand "suf")
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (hide -2 -4)
                                    (("1"
                                      (case
                                       "(LAMBDA (x_120:
                          {i: nat |
                                   IF infinite(sigma!1)
                                     THEN TRUE
                                   ELSE FALSE
                                   ENDIF
                                    OR
                                    i
                                    <=
                                    IF infinite(sigma!1)
                                    THEN len(sigma!1)
                                    ELSE len(sigma!1) - m!1
                                    ENDIF}):
                  seq(sigma!1)(x_120 + m!1 + m!2)) = (LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + m!1 + m!2))")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality
                                         1
                                         :hide?
                                         t)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "suf")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "m!1")
                          (("2" (assert)
                            (("2" (typepred "m!2")
                              (("2"
                                (expand "suf" -1)
                                (("2"
                                  (case "infinite(sigma!1)")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "suf" -1)
                        (("2" (case "infinite(sigma!1)")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst 2 "m!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((^ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil) (index2 type-eq-decl nil sequ nil)
    (index type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (suf const-decl "sequ" sequ nil))
   2280 1810 nil nil))
 (OrChopImp 0
  (OrChopImp-2 nil 3391249809 nil
   ("" (sem)
    (("" (skosimp*)
      (("" (split)
        (("1" (skosimp)
          (("1" (inst 3 "m!1")
            (("1" (inst 1 "m!1") (("1" (prop) nil nil)) nil)) nil))
          nil)
         ("2" (prop) nil nil))
        nil))
      nil))
    nil)
   proved-complete
   ((\\/ const-decl "form" itlsyntax nil)
    (^ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   nil nil nil nil)
  (OrChopImp-1 nil 3391230323 3391230471
   ("" (sem)
    (("" (skosimp*)
      (("" (split)
        (("1" (skosimp)
          (("1" (inst 3 "m!1")
            (("1" (inst 1 "m!1") (("1" (prop) nil nil)) nil)) nil))
          nil)
         ("2" (prop) nil nil))
        nil))
      nil))
    nil)
   proved
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (=> const-decl "form" itlsyntax nil)
    (^ const-decl "form" itlsyntax nil)
    (\\/ const-decl "form" itlsyntax nil))
   134 90 nil nil))
 (ChopOrImp 0
  (ChopOrImp-2 nil 3391249809 nil
   ("" (sem)
    (("" (skosimp*)
      (("" (split -1)
        (("1" (skosimp)
          (("1" (inst?) (("1" (inst?) (("1" (prop) nil nil)) nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   proved-complete
   ((\\/ const-decl "form" itlsyntax nil)
    (^ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   nil nil nil nil)
  (ChopOrImp-1 nil 3391230323 3391230471
   ("" (sem)
    (("" (skosimp*)
      (("" (split -1)
        (("1" (skosimp)
          (("1" (inst?) (("1" (inst?) (("1" (prop) nil nil)) nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   proved
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (=> const-decl "form" itlsyntax nil)
    (^ const-decl "form" itlsyntax nil)
    (\\/ const-decl "form" itlsyntax nil))
   128 70 nil nil))
 (EmptyChop 0
  (EmptyChop-2 nil 3391249809 3391251044
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp*)
        (("" (split)
          (("1" (flatten)
            (("1" (split)
              (("1" (skosimp)
                (("1" (inst 1 "1")
                  (("1" (expand "sub")
                    (("1" (case "m!1=0")
                      (("1" (replace -1)
                        (("1" (rewrite "l_suf") nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert) (("2" (inst 1 "1") nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (inst 1 "0")
              (("1" (split)
                (("1" (assert)
                  (("1" (split)
                    (("1" (skosimp)
                      (("1" (typepred "m!1")
                        (("1" (expand "sub") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (skosimp)
                        (("2" (typepred "m!2")
                          (("2" (expand "sub") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp) nil nil))
                    nil))
                  nil)
                 ("2" (rewrite "l_suf") nil nil))
                nil)
               ("2" (assert)
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((sub const-decl "sequ" sequ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (index2 type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (l_suf formula-decl nil sequ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (== const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (empty const-decl "form" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (more const-decl "form" itlsynextra nil)
    (O const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   1062263 800 t nil)
  (EmptyChop-1 nil 3391230323 3391230472
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp*)
        (("" (split)
          (("1" (flatten)
            (("1" (split)
              (("1" (skosimp)
                (("1" (expand "sub")
                  (("1" (case "m!1=0")
                    (("1" (replace -1)
                      (("1" (rewrite "l_suf") nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) nil nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (inst 1 "0")
              (("1" (split)
                (("1" (expand "sub") (("1" (propax) nil nil)) nil)
                 ("2" (expand "sub") (("2" (assert) nil nil)) nil)
                 ("3" (rewrite "l_suf") nil nil))
                nil)
               ("2" (assert)
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 357 270 nil nil))
 (ChopEmpty 0
  (ChopEmpty-2 nil 3391249809 3391251186
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp*)
        (("" (prop)
          (("1" (skosimp)
            (("1" (case "infinite(sigma!1)")
              (("1" (assert)
                (("1" (expand "suf")
                  (("1" (inst 1 "1")
                    (("1" (expand "suf") (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "suf")
                  (("2" (case "m!1=len(sigma!1)")
                    (("1"
                      (case "sigma!1 =(# infinite := FALSE,
                              len := m!1,
                              seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(sigma!1)(x))
                              #)")
                      (("1" (replace -1 4) (("1" (propax) nil nil))
                        nil)
                       ("2" (apply-extensionality 1 :hide? t)
                        (("2" (apply-extensionality 1 :hide? t)
                          (("2" (skolem-typepred)
                            (("2" (assert)
                              (("2"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skolem-typepred) (("3" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "m!1")
                        (("2" (prop)
                          (("1" (assert)
                            (("1" (inst 3 "1")
                              (("1"
                                (expand "suf")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst 4 "1")
                              (("2"
                                (expand "suf")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (inst 2 "len(sigma!1)")
              (("2" (assert)
                (("2" (prop)
                  (("1" (lemma "l_suf[State]")
                    (("1" (expand "suf")
                      (("1" (inst -1 "sigma!1")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (typepred "m!1")
                      (("2" (expand "suf") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (O const-decl "form" itlsynextra nil)
    (more const-decl "form" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (empty const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (l_suf formula-decl nil sequ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (index type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    nil nil (suf const-decl "sequ" sequ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sub const-decl "sequ" sequ nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   113764 630 t nil)
  (ChopEmpty-1 nil 3391230323 3391230472
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp*)
        (("" (prop)
          (("1" (skosimp)
            (("1" (case "infinite(sigma!1)")
              (("1" (assert)
                (("1" (expand "suf") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (expand "suf")
                  (("2" (case "m!1=len(sigma!1)")
                    (("1"
                      (case "sigma!1 =(# infinite := FALSE,
                              len := m!1,
                              seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(sigma!1)(x))
                              #)")
                      (("1" (replace -1 4) (("1" (propax) nil nil))
                        nil)
                       ("2" (apply-extensionality 1 :hide? t)
                        (("2" (apply-extensionality 1 :hide? t)
                          (("2" (skolem-typepred)
                            (("2" (assert)
                              (("2"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skolem-typepred) (("3" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "m!1")
                        (("2" (prop)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (inst 2 "len(sigma!1)")
              (("2" (assert)
                (("2" (prop)
                  (("1" (lemma "l_suf[State]")
                    (("1" (expand "suf")
                      (("1" (inst -1 "sigma!1")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "suf") (("2" (propax) nil nil)) nil)
                   ("3" (assert)
                    (("3" (expand "suf") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 622 450 nil nil))
 (BiBoxChopImpChop 0
  (BiBoxChopImpChop-2 nil 3391249809 nil
   ("" (sem)
    (("" (skosimp*)
      (("" (split -1)
        (("1" (skosimp)
          (("1" (inst 1 "m!1")
            (("1" (inst 2 "m!1")
              (("1" (inst 4 "m!1")
                (("1" (assert)
                  (("1" (expand "sub" 2) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((=> const-decl "form" itlsyntax nil)
    (- const-decl "form" itlsyntax nil)
    (= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (Di const-decl "form" itlsynextra nil)
    (Bi const-decl "form" itlsynextra nil)
    (F const-decl "pform" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (<> const-decl "form" itlsynextra nil)
    ([] const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (BiBoxChopImpChop-1 nil 3391230323 3391230472
   ("" (sem)
    (("" (skosimp*)
      (("" (split -1)
        (("1" (skosimp)
          (("1" (inst 1 "m!1")
            (("1" (inst 2 "m!1")
              (("1" (inst 4 "m!1")
                (("1" (assert)
                  (("1" (expand "sub" 2) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil) (index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (/\\ const-decl "form" itlsyntax nil)
    ([] const-decl "form" itlsynextra nil)
    (<> const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (F const-decl "pform" itlsynextra nil)
    (Bi const-decl "form" itlsynextra nil)
    (Di const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil)
    (- const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil))
   278 200 nil nil))
 (StateImpBi 0
  (StateImpBi-2 nil 3391249809 nil
   ("" (sem)
    (("" (skosimp*)
      (("" (split -2)
        (("1" (skosimp)
          (("1" (lemma "l_pform_M")
            (("1" (inst-cp -1 "env!1" "p!1" "sub(sigma!1, 0, m!1)")
              (("1" (replace -2)
                (("1" (expand "sub" 1)
                  (("1" (inst-cp -1 "env!1" "p!1" "sigma!1")
                    (("1" (replace -2)
                      (("1" (expand "sub" -4) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten) nil nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((- const-decl "form" itlsyntax nil)
    (= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (Di const-decl "form" itlsynextra nil)
    (Bi const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (l_pform_M formula-decl nil itlhelplemma nil)
    (sub const-decl "sequ" sequ nil) (index2 type-eq-decl nil sequ nil)
    (index type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (pform type-eq-decl nil itlsemanticstype nil)
    (ee2 adt-accessor-decl "[(etwo?) -> exp]" form_adt nil)
    (ee1 adt-accessor-decl "[(etwo?) -> exp]" form_adt nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (otype type-decl nil exptype nil) (exp type-decl nil exp_adt nil)
    (etwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (tchop adt-constructor-decl "(tchop?)" formtypes nil)
    (tchop? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (ftt adt-accessor-decl "[(ftwo?) -> fttype]" form_adt nil)
    (fttype type-decl nil formtypes nil)
    (ftwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (tnot adt-constructor-decl "(tnot?)" formtypes nil)
    (tnot? adt-recognizer-decl "[fotype -> boolean]" formtypes nil)
    (fot adt-accessor-decl "[(fone?) -> fotype]" form_adt nil)
    (fotype type-decl nil formtypes nil)
    (fone? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (skip adt-constructor-decl "(skip?)" form_adt nil)
    (skip? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (subterm adt-def-decl "boolean" form_adt nil)
    (form type-decl nil form_adt nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil))
   nil nil nil nil)
  (StateImpBi-1 nil 3391230323 3391230473
   ("" (sem)
    (("" (skosimp*)
      (("" (split -2)
        (("1" (skosimp)
          (("1" (lemma "l_pform_M")
            (("1" (inst-cp -1 "env!1" "p!1" "sub(sigma!1, 0, m!1)")
              (("1" (replace -2)
                (("1" (expand "sub" 1)
                  (("1" (inst-cp -1 "env!1" "p!1" "sigma!1")
                    (("1" (replace -2)
                      (("1" (expand "sub" -4) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten) nil nil))
        nil))
      nil))
    nil)
   proved
   ((SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (form type-decl nil form_adt nil)
    (subterm adt-def-decl "boolean" form_adt nil)
    (skip? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (skip adt-constructor-decl "(skip?)" form_adt nil)
    (fone? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (fotype type-decl nil formtypes nil)
    (fot adt-accessor-decl "[(fone?) -> fotype]" form_adt nil)
    (tnot? adt-recognizer-decl "[fotype -> boolean]" formtypes nil)
    (tnot adt-constructor-decl "(tnot?)" formtypes nil)
    (ftwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (fttype type-decl nil formtypes nil)
    (ftt adt-accessor-decl "[(ftwo?) -> fttype]" form_adt nil)
    (tchop? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (tchop adt-constructor-decl "(tchop?)" formtypes nil)
    (etwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (exp type-decl nil exp_adt nil) (otype type-decl nil exptype nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (ee1 adt-accessor-decl "[(etwo?) -> exp]" form_adt nil)
    (ee2 adt-accessor-decl "[(etwo?) -> exp]" form_adt nil)
    (pform type-eq-decl nil itlsemanticstype nil)
    (Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil)
    (l_pform_M formula-decl nil itlhelplemma nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (=> const-decl "form" itlsyntax nil)
    (Bi const-decl "form" itlsynextra nil)
    (Di const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil)
    (- const-decl "form" itlsyntax nil))
   212 150 nil nil))
 (NextImpNotNextNot 0
  (NextImpNotNextNot-2 nil 3391249809 3391251277
   ("" (sem)
    (("" (skosimp*)
      (("" (expand "sub")
        (("" (prop)
          (("" (skosimp)
            (("" (skosimp)
              (("" (replace -1)
                (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((^ const-decl "form" itlsyntax nil)
    (O const-decl "form" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sub const-decl "sequ" sequ nil))
   69555 140 t nil)
  (NextImpNotNextNot-1 nil 3391230323 3391230473
   ("" (sem)
    (("" (skosimp*) (("" (expand "sub") (("" (prop) nil nil)) nil))
      nil))
    nil)
   unfinished nil 161 120 nil nil))
 (KeepnowImpNotKeepnowNot 0
  (KeepnowImpNotKeepnowNot-2 nil 3391249809 3391251330
   ("" (sem)
    (("" (skosimp*)
      (("" (expand "sub" -1 (1 2))
        (("" (expand "sub" -2 (1 2))
          (("" (prop)
            (("" (skosimp) (("" (skosimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((/\\ const-decl "form" itlsyntax nil)
    (= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (Di const-decl "form" itlsynextra nil)
    (keepn const-decl "form" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sub const-decl "sequ" sequ nil))
   15730 150 t nil)
  (KeepnowImpNotKeepnowNot-1 nil 3391230323 3391230473
   ("" (sem)
    (("" (skosimp*)
      (("" (expand "sub" -1 (1 2))
        (("" (expand "sub" -2 (1 2)) (("" (prop) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished nil 173 120 nil nil))
 (BoxInduct 0
  (BoxInduct-2 nil 3391249809 nil
   ("" (auto-rewrite-theory "itlsemanticstype")
    (("" (skolem!)
      (("" (expand "|-")
        (("" (expand "=>")
          (("" (expand "/\\")
            (("" (expand "M")
              (("" (expand "semftwo")
                (("" (assert)
                  (("" (expand "M" 1 1)
                    (("" (expand "semftwo")
                      (("" (assert)
                        (("" (skosimp*)
                          (("" (rewrite "l_always")
                            (("" (rewrite "l_always")
                              ((""
                                (induct "i" 1)
                                (("1"
                                  (typepred "i!1")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2" (rewrite "l_suf") nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (inst -4 "j!1")
                                    (("1"
                                      (expand "M" -4)
                                      (("1"
                                        (expand "semftwo")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "l_wnext")
                                            (("1"
                                              (case
                                               "infinite(sigma!1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (typepred "j!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (typepred "j!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (/\\ const-decl "form" itlsyntax nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (l_always formula-decl nil itlhelplemma nil)
    (SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (form type-decl nil form_adt nil)
    (fttype type-decl nil formtypes nil)
    (ftwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (ftwo adt-constructor-decl "[[form, form, fttype] -> (ftwo?)]"
     form_adt nil)
    (wO const-decl "form" itlsynextra nil)
    (timpl? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (timpl adt-constructor-decl "(timpl?)" formtypes nil)
    (Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (suf const-decl "sequ" sequ nil) (index type-eq-decl nil sequ nil)
    (sequ type-eq-decl nil sequ nil) (l_suf formula-decl nil sequ nil)
    (l_wnext formula-decl nil itlhelplemma nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (=> const-decl "form" itlsyntax nil))
   nil nil nil nil)
  (BoxInduct-1 nil 3391230323 3391230473
   ("" (auto-rewrite-theory "itlsemanticstype")
    (("" (skolem!)
      (("" (expand "|-")
        (("" (expand "=>")
          (("" (expand "/\\")
            (("" (expand "M")
              (("" (expand "semftwo")
                (("" (assert)
                  (("" (expand "M" 1 1)
                    (("" (expand "semftwo")
                      (("" (assert)
                        (("" (skosimp*)
                          (("" (rewrite "l_always")
                            (("" (rewrite "l_always")
                              ((""
                                (induct "i" 1)
                                (("1"
                                  (typepred "i!1")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2" (rewrite "l_suf") nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3"
                                    (inst -4 "j!1")
                                    (("1"
                                      (expand "M" -4)
                                      (("1"
                                        (expand "semftwo")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "l_wnext")
                                            (("1"
                                              (case
                                               "infinite(sigma!1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (typepred "j!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (typepred "j!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((=> const-decl "form" itlsyntax nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (l_wnext formula-decl nil itlhelplemma nil)
    (l_suf formula-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (index type-eq-decl nil sequ nil) (suf const-decl "sequ" sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (timpl adt-constructor-decl "(timpl?)" formtypes nil)
    (timpl? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (wO const-decl "form" itlsynextra nil)
    (ftwo adt-constructor-decl "[[form, form, fttype] -> (ftwo?)]"
     form_adt nil)
    (ftwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (fttype type-decl nil formtypes nil)
    (form type-decl nil form_adt nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (l_always formula-decl nil itlhelplemma nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (/\\ const-decl "form" itlsyntax nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil))
   318 190 nil nil))
 (InfChop 0
  (InfChop-2 nil 3391249809 nil
   ("" (sem)
    (("" (skosimp*)
      (("" (prop)
        (("1" (expand "sub" -1 2) (("1" (propax) nil nil)) nil)
         ("2" (expand "sub" -1 2) (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (InfChop-1 nil 3391230323 3391230474
   ("" (sem)
    (("" (skosimp*)
      (("" (prop)
        (("1" (expand "sub" -1 2) (("1" (propax) nil nil)) nil)
         ("2" (expand "sub" -1 2) (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (== const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   184 140 nil nil))
 (ChopStarEqv 0
  (ChopStarEqv-2 nil 3391249809 3391251806
   ("" (sem)
    (("" (stop-rewrite-theory "itlformsemanticsnew")
      (("" (skosimp*)
        (("" (prop)
          (("1" (skosimp)
            (("1" (expand "sub" -1)
              (("1" (skosimp)
                (("1" (expand "Ts" -2)
                  (("1" (prop)
                    (("1" (expand "semempty")
                      (("1" (typepred "m!1") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (expand "semmore")
                      (("2" (assert)
                        (("2" (inst 4 "len(sigma!1)")
                          (("2" (rewrite "l_sub")
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (expand "sub" 1)
                                  (("1"
                                    (inst 1 "1")
                                    (("1"
                                      (expand "sub")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst 1 "0")
                                    (("2"
                                      (expand "Ts")
                                      (("2"
                                        (expand "semempty")
                                        (("2"
                                          (expand "suf" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "^^" -1)
                      (("3" (assert)
                        (("3" (skosimp)
                          (("3" (expand "semfmore")
                            (("3" (expand "sub" -2)
                              (("3"
                                (inst 5 "m!2")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "sub" 5)
                                    (("3"
                                      (expand "sub" 4)
                                      (("3"
                                        (split)
                                        (("1"
                                          (inst 1 "1")
                                          (("1"
                                            (expand "sub")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (expand "sub" -1)
              (("2" (skosimp)
                (("2" (expand "Ts" -2)
                  (("2" (prop)
                    (("1" (expand "semempty")
                      (("1" (flatten)
                        (("1" (typepred "m!1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "^^" -1)
                      (("2" (split -1)
                        (("1" (skosimp)
                          (("1" (expand "semfmore")
                            (("1" (expand "sub" -2)
                              (("1"
                                (inst 5 "m!2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sub" 4)
                                    (("1"
                                      (expand "sub" 4)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst 1 "1")
                                          (("1"
                                            (expand "sub")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst 1 "n!1-1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (expand "sub" -1)
              (("3" (expand "sub" 2)
                (("3" (expand "nu")
                  (("3" (expand "gfp")
                    (("3" (expand "lub")
                      (("3" (expand "member")
                        (("3" (skosimp)
                          (("3" (expand "<=")
                            (("3" (inst-cp -3 "(env!1,sigma!1)")
                              (("3"
                                (assert)
                                (("3"
                                  (expand "^^" -4)
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (inst 3 "m!2")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "sub" 3)
                                          (("3"
                                            (split)
                                            (("1"
                                              (expand "sub")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (expand "suf" 1 1)
                                                  (("2"
                                                    (inst 1 "p!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "sub" 3)
            (("4" (inst 4 "0")
              (("4" (expand "Ts")
                (("4" (expand "semempty")
                  (("4" (assert)
                    (("4" (assert) (("4" (inst 3 "1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (expand "sub" 3)
            (("5" (inst 4 "0")
              (("5" (expand "Ts")
                (("5" (expand "semempty")
                  (("5" (assert)
                    (("5" (assert) (("5" (inst 3 "1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (expand "sub" 3)
            (("6" (inst 4 "0")
              (("6" (expand "Ts")
                (("6" (expand "semempty")
                  (("6" (assert) (("6" (inst 3 "1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (inst 4 "0")
            (("7" (expand "Ts")
              (("7" (expand "semempty")
                (("7" (inst 3 "1")
                  (("1" (expand "sub") (("1" (propax) nil nil)) nil)
                   ("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("8" (expand "sub")
            (("8" (inst 3 "0")
              (("8" (expand "Ts")
                (("8" (expand "semempty")
                  (("8" (assert) (("8" (inst 2 "1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("9" (skosimp)
            (("9" (expand "sub" -2)
              (("9" (expand "sub")
                (("9" (split)
                  (("1" (skosimp)
                    (("1" (inst 2 "n!1+1")
                      (("1" (expand "Ts" 2)
                        (("1" (case "n!1=0")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (expand "Ts")
                                (("1"
                                  (expand "semempty")
                                  (("1"
                                    (expand "suf")
                                    (("1"
                                      (case "infinite(sigma!1)")
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case "m!1=len(sigma!1)")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "semmore")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "(# infinite := FALSE,
           len := len(sigma!1),
           seq := LAMBDA (x: {i: nat | i <= m!1}): seq(sigma!1)(x) #) = sigma!1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "m!2")
                                                            (("1"
                                                              (expand
                                                               "sub")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (skosimp)
                                                          (("3"
                                                            (typepred
                                                             "m!2")
                                                            (("3"
                                                              (expand
                                                               "sub")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (skosimp)
                                                          (("4"
                                                            (typepred
                                                             "m!2")
                                                            (("4"
                                                              (expand
                                                               "sub")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "^^" 3)
                              (("2"
                                (inst 3 "m!1")
                                (("2"
                                  (expand "semfmore")
                                  (("2"
                                    (expand "sub")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (typepred "m!2")
                                        (("2"
                                          (expand "sub")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "suf" -1)
                      (("2" (case "infinite(sigma!1)")
                        (("1" (propax) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("10" (expand "nu")
            (("10" (expand "gfp")
              (("10" (expand "lub")
                (("10" (expand "member")
                  (("10" (skosimp)
                    (("10" (split -3)
                      (("1" (skosimp)
                        (("1" (inst 2 "n!1+1")
                          (("1" (expand "Ts" 2)
                            (("1" (case "n!1=0")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "sub" -4)
                                    (("1"
                                      (expand "Ts")
                                      (("1"
                                        (expand "semempty")
                                        (("1"
                                          (expand "suf" -2)
                                          (("1"
                                            (case "infinite(sigma!1)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "m!1=len(sigma!1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (rewrite "l_sub")
                                                    (("1"
                                                      (expand
                                                       "semmore")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (typepred
                                                             "m!2")
                                                            (("1"
                                                              (expand
                                                               "sub")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "^^" 3)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst 3 "m!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "semfmore")
                                          (("2"
                                            (expand "sub")
                                            (("2"
                                              (typepred "m!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "m!2")
                                                    (("2"
                                                      (expand "sub")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "suf" -1)
                        (("2" (case "infinite(sigma!1)")
                          (("1" (assert)
                            (("1" (skosimp)
                              (("1"
                                (inst
                                 1
                                 "((LAMBDA (u:sta): semfmore(u) AND M(f0!1)(u)) ^^ p!1)")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (expand "<=")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (expand "^^" 1)
                                        (("1"
                                          (expand "semfmore")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "sub" 1 1)
                                                (("1"
                                                  (expand "sub" 1 1)
                                                  (("1"
                                                    (expand "sub" 1 2)
                                                    (("1"
                                                      (expand
                                                       "sub"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "suf"
                                                         1
                                                         5)
                                                        (("1"
                                                          (expand
                                                           "^^"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "sub"
                                                               -1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "sub"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "m!2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "(s!1`1,suf(s!1`2,m!2))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "^^"
                                                                                 -5)
                                                                                (("1"
                                                                                  (split
                                                                                   -5)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sub"
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sub"
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "^^" 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst 1 "m!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "semfmore")
                                            (("2"
                                              (expand "sub" 1)
                                              (("2"
                                                (expand "suf")
                                                (("2"
                                                  (expand "sub" -5)
                                                  (("2"
                                                    (inst 3 "1")
                                                    (("2"
                                                      (expand "Ts")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "semmore")
                                                          (("2"
                                                            (expand
                                                             "sub")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (typepred
                                                                 "m!2")
                                                                (("2"
                                                                  (expand
                                                                   "sub")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("11" (skosimp)
            (("11" (expand "sub")
              (("11" (inst 2 "1")
                (("11" (expand "Ts")
                  (("11" (expand "semmore") (("11" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((chopstar const-decl "form" itlsyntax nil)
    (= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (O const-decl "form" itlsynextra nil)
    (more const-decl "form" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (empty const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (\\/ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (Csf const-decl "Iform" itlformsemanticsnew nil)
    (seminfinite const-decl "Iform" itlformsemanticsnew nil)
    (semfmore const-decl "Iform" itlformsemanticsnew nil)
    (Csinu const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (form type-decl nil form_adt nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (FALSE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (gfp const-decl "pred[T]" mucalculus nil)
    (member const-decl "bool" sets nil)
    (<= const-decl "bool" mucalculus nil)
    (pred type-eq-decl nil defined_types nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (lub const-decl "pred[T]" mucalculus nil)
    (nu const-decl "pred[T]" mucalculus nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil)
    (semempty const-decl "Iform" itlformsemanticsnew nil)
    (sequ type-eq-decl nil sequ nil) (l_sub formula-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (suf const-decl "sequ" sequ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semmore const-decl "Iform" itlformsemanticsnew nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Ts def-decl "Iform" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   439698 2850 t nil)
  (ChopStarEqv-1 nil 3391230323 3391230476
   ("" (sem)
    (("" (stop-rewrite-theory "itlformsemanticsnew")
      (("" (skosimp*)
        (("" (prop)
          (("1" (skosimp)
            (("1" (expand "sub" -1)
              (("1" (skosimp)
                (("1" (expand "Ts" -2)
                  (("1" (prop)
                    (("1" (expand "semempty")
                      (("1" (typepred "m!1") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (expand "semmore")
                      (("2" (assert)
                        (("2" (inst 4 "len(sigma!1)")
                          (("2" (rewrite "l_sub")
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (expand "sub" 1)
                                  (("1"
                                    (expand "sub" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst 1 "0")
                                    (("2"
                                      (expand "Ts")
                                      (("2"
                                        (expand "semempty")
                                        (("2"
                                          (expand "suf" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "^^" -1)
                      (("3" (assert)
                        (("3" (skosimp)
                          (("3" (expand "semfmore")
                            (("3" (expand "sub" -2)
                              (("3"
                                (inst 5 "m!2")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "sub" 5)
                                    (("3"
                                      (expand "sub" 5)
                                      (("3"
                                        (expand "sub" 4)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (inst 4 "n!1-1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (expand "sub" -1)
              (("2" (skosimp)
                (("2" (expand "Ts" -2)
                  (("2" (prop)
                    (("1" (expand "semempty")
                      (("1" (flatten)
                        (("1" (typepred "m!1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "^^" -1)
                      (("2" (split -1)
                        (("1" (skosimp)
                          (("1" (expand "semfmore")
                            (("1" (expand "sub" -2)
                              (("1"
                                (inst 5 "m!2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sub" 4)
                                    (("1"
                                      (expand "sub" 4)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "sub" 1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst 1 "n!1-1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (expand "sub" -1)
              (("3" (expand "sub" 2)
                (("3" (expand "nu")
                  (("3" (expand "gfp")
                    (("3" (expand "lub")
                      (("3" (expand "member")
                        (("3" (skosimp)
                          (("3" (expand "<=")
                            (("3" (inst-cp -3 "(env!1,sigma!1)")
                              (("3"
                                (assert)
                                (("3"
                                  (expand "^^" -4)
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (inst 3 "m!2")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "sub" 3)
                                          (("3"
                                            (split)
                                            (("1"
                                              (expand "sub")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (expand "suf" 1 1)
                                                  (("2"
                                                    (inst 1 "p!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "sub" 3)
            (("4" (inst 4 "0")
              (("4" (expand "Ts")
                (("4" (expand "semempty")
                  (("4" (assert) (("4" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("5" (expand "sub" 3)
            (("5" (inst 4 "0")
              (("5" (expand "Ts")
                (("5" (expand "semempty")
                  (("5" (assert) (("5" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("6" (expand "sub" 3)
            (("6" (inst 4 "0")
              (("6" (expand "Ts")
                (("6" (expand "semempty") (("6" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (inst 4 "0")
            (("7" (expand "Ts")
              (("7" (expand "semempty")
                (("7" (inst 3 "1")
                  (("1" (expand "sub") (("1" (propax) nil nil)) nil)
                   ("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("8" (expand "sub")
            (("8" (inst 3 "0")
              (("8" (expand "Ts")
                (("8" (expand "semempty") (("8" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("9" (skosimp)
            (("9" (expand "sub" -2)
              (("9" (expand "sub")
                (("9" (split)
                  (("1" (skosimp)
                    (("1" (inst 2 "n!1+1")
                      (("1" (expand "Ts" 2)
                        (("1" (case "n!1=0")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (expand "Ts")
                                (("1"
                                  (expand "semempty")
                                  (("1"
                                    (expand "suf")
                                    (("1"
                                      (case "infinite(sigma!1)")
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case "m!1=len(sigma!1)")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "semmore")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "(# infinite := FALSE,
           len := len(sigma!1),
           seq := LAMBDA (x: {i: nat | i <= m!1}): seq(sigma!1)(x) #) = sigma!1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "^^" 3)
                              (("2"
                                (inst 3 "m!1")
                                (("2"
                                  (expand "semfmore")
                                  (("2"
                                    (expand "sub")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "suf" -1)
                      (("2" (case "infinite(sigma!1)")
                        (("1" (propax) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("10" (expand "nu")
            (("10" (expand "gfp")
              (("10" (expand "lub")
                (("10" (expand "member")
                  (("10" (skosimp)
                    (("10" (split -3)
                      (("1" (skosimp)
                        (("1" (inst 2 "n!1+1")
                          (("1" (expand "Ts" 2)
                            (("1" (case "n!1=0")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "sub" -4)
                                    (("1"
                                      (expand "Ts")
                                      (("1"
                                        (expand "semempty")
                                        (("1"
                                          (expand "suf" -2)
                                          (("1"
                                            (case "infinite(sigma!1)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "m!1=len(sigma!1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (rewrite "l_sub")
                                                    (("1"
                                                      (expand
                                                       "semmore")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "^^" 3)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst 3 "m!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "semfmore")
                                          (("2"
                                            (expand "sub")
                                            (("2"
                                              (typepred "m!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "sub" -4)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "suf" -1)
                        (("2" (case "infinite(sigma!1)")
                          (("1" (assert)
                            (("1" (skosimp)
                              (("1"
                                (inst
                                 1
                                 "((LAMBDA (u:sta): semfmore(u) AND M(f0!1)(u)) ^^ p!1)")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (expand "<=")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (expand "^^" 1)
                                        (("1"
                                          (expand "semfmore")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "sub" 1 1)
                                                (("1"
                                                  (expand "sub" 1 1)
                                                  (("1"
                                                    (expand "sub" 1 2)
                                                    (("1"
                                                      (expand
                                                       "sub"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "suf"
                                                         1
                                                         5)
                                                        (("1"
                                                          (expand
                                                           "^^"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "sub"
                                                               -1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "sub"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "m!2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "(s!1`1,suf(s!1`2,m!2))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "^^"
                                                                                 -5)
                                                                                (("1"
                                                                                  (split
                                                                                   -5)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sub"
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sub"
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "^^" 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst 1 "m!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "semfmore")
                                            (("2"
                                              (expand "sub" 1)
                                              (("2"
                                                (expand "suf")
                                                (("2"
                                                  (expand "sub" -5)
                                                  (("2"
                                                    (inst 3 "1")
                                                    (("2"
                                                      (expand "Ts")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "semmore")
                                                          (("2"
                                                            (expand
                                                             "sub")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("11" (skosimp)
            (("11" (expand "sub")
              (("11" (inst 2 "1")
                (("11" (expand "Ts")
                  (("11" (expand "semmore") (("11" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 2748 1870 nil nil))
 (ChopstarInduct 0
  (ChopstarInduct-2 nil 3391249809 3391332749
   ("" (expand "|-")
    (("" (skosimp*)
      (("" (auto-rewrite-theory "itlsemanticstype")
        (("" (expand "=>")
          (("" (expand "M")
            (("" (expand "semftwo")
              (("" (flatten)
                (("" (expand "/\\" -1 1)
                  (("" (expand "M" -1)
                    (("" (expand "semftwo")
                      (("" (flatten)
                        (("" (expand "/\\" -2 1)
                          (("" (expand "M" -2)
                            (("" (expand "semftwo")
                              ((""
                                (flatten)
                                ((""
                                  (rewrite "l_inf")
                                  ((""
                                    (rewrite "l_always")
                                    ((""
                                      (expand "chopstar")
                                      ((""
                                        (expand "M" 1)
                                        ((""
                                          (expand "semfone")
                                          ((""
                                            (lemma "l_old_new_1")
                                            ((""
                                              (inst?)
                                              ((""
                                                (case
                                                 "(semcsold(M(f1!1))(env!1,sigma!1)) = (Csf(M(f1!1))(env!1, sigma!1) or Csinu(M(f1!1))(env!1, sigma!1))")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (hide -1 -2)
                                                    (("1"
                                                      (expand
                                                       "semcsold")
                                                      (("1"
                                                        (expand
                                                         "csinner")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             2
                                                             "(# infinite:=infinite(sigma!1),len:=len(sigma!1),seq:=(lambda (i:index[State](sigma!1)): Cpoint(M(f1!1),M(f0!1),env!1,sigma!1,i))#)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "Cpoint"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (expand
                                                                     "Cpoint"
                                                                     2
                                                                     4)
                                                                    (("1"
                                                                      (expand
                                                                       "Cpoint"
                                                                       2
                                                                       2)
                                                                      (("1"
                                                                        (lemma
                                                                         "epsilon_ax"
                                                                         ("p"
                                                                          "LAMBDA (x: nat): (EXISTS (m: nat):M(f1!1)(env!1, sub(sigma!1,                                                  Cpoint(M(f1!1),                                                         M(f0!1),                                                         env!1,                                                         sigma!1, i!1),                                                  m                                                      +                                                    Cpoint(M(f1!1),                                                           M(f0!1),                                                           env!1,                                                           sigma!1, i!1)))                                          AND m > 0                                            AND                                          M(f0!1)(env!1,                                                  suf(sigma!1,                                                      m                                                          +                                                        Cpoint(M(f1!1),                                                               M(f0!1),                                                               env!1,                                                              sigma!1, i!1)))                                              AND x                                                = m                                                  +                                                Cpoint(M(f1!1), M(f0!1),                                                       env!1, sigma!1,                                                       i!1))"))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "M"
                                                                                   -3
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "semftwo")
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -3
                                                                                       "Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i!1)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "/\\"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "M"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "semftwo")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^^"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "M"
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "semftwo")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "m!1 +Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i!1)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "m!1")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "l_fmore")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "suf")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "sub")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "(LAMBDA (x_150:
                                             {i: nat |
                                                      IF infinite(sigma!1)
                                                        THEN TRUE
                                                      ELSE FALSE
                                                      ENDIF
                                                       OR
                                                       i
                                                       <=
                                                       IF infinite(sigma!1)
                                                       THEN len(sigma!1)
                                                       ELSE len(sigma!1)
                                                            -
                                                            Cpoint
                                                            (M(f1!1),
                                                             M(f0!1),
                                                             env!1,
                                                             sigma!1,
                                                             i!1)
                                                       ENDIF}):
                                     seq(sigma!1)
                                         (x_150 +
                                           Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i!1)
                                           + m!1)) = (LAMBDA (x:
                                             {i: nat |
                                                      infinite(sigma!1) OR
                                                       i <= len(sigma!1)}):
                                     seq(sigma!1)
                                         (x + Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i!1) +
                                           m!1))")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (apply-extensionality
                                                                                                                                   1
                                                                                                                                   :hide?
                                                                                                                                   t)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "M"
                                                                                                             -2
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "semftwo")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "l_fmore")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "nat_induction")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "lambda (i:nat) : M(f0!1)(env!1,                     suf(sigma!1, Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i)))")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "i!1")
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "Cpoint"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "l_suf")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (skosimp)
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     3)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "Cpoint"
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "epsilon_ax"
                                                                                                         ("p"
                                                                                                          "LAMBDA (x: nat):                                      (EXISTS (m: nat):                                         M(f1!1)(env!1,                                                 sub(sigma!1,                                                     Cpoint(M(f1!1), M(f0!1),                                                            env!1,                                                            sigma!1, j!1),                                                  m                                                        +                                                       Cpoint(M(f1!1), M(f0!1),                                                              env!1,                                                             sigma!1, j!1)))                                             AND m > 0                                               AND                                            M(f0!1)(env!1,                                                     suf(sigma!1,                                                         m                                                             +                                                           Cpoint(M(f1!1),                                                                  M(f0!1),                                                                  env!1,                                                                  sigma!1, j!1)))                                                 AND x                                                   = m                                                     +                                                   Cpoint(M(f1!1), M(f0!1),                                                          env!1, sigma!1, j!1))"))
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -4
                                                                                                                 "Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, j!1)")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "^")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "M"
                                                                                                                       -4
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "semftwo")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "^^"
                                                                                                                             -4)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (skosimp)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "m!1+Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, j!1)")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "m!1")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "/\\")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "M"
                                                                                                                                         -1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "semftwo")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "l_fmore")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "suf")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sub")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "(LAMBDA (x_191:
                                                 {i: nat |
                                                          IF infinite(sigma!1)
                                                            THEN TRUE
                                                          ELSE FALSE
                                                          ENDIF
                                                           OR
                                                           i
                                                           <=
                                                           IF infinite(sigma!1)
                                                           THEN len(sigma!1)
                                                           ELSE len(sigma!1)
                                                                -
                                                                Cpoint
                                                                (M(f1!1),
                                                                 M(f0!1),
                                                                 env!1,
                                                                 sigma!1,
                                                                 j!1)
                                                           ENDIF}):
                                         seq(sigma!1)
                                             (x_191 +
                                               Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, j!1)
                                               + m!1)) = (LAMBDA (x:
                                                 {i: nat |
                                                          infinite(sigma!1) OR
                                                           i <= len(sigma!1)}):
                                         seq(sigma!1)
                                             (x + Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, j!1) +
                                               m!1))")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply-extensionality
                                                                                                                                                             1
                                                                                                                                                             :hide?
                                                                                                                                                             t)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "/\\"
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "M"
                                                                                                                                     -2
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "semftwo")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "l_fmore")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((=> const-decl "form" itlsyntax nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (/\\ const-decl "form" itlsyntax nil)
    (l_inf formula-decl nil itlhelplemma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (chopstar const-decl "form" itlsyntax nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (l_fmore formula-decl nil itlhelplemma nil)
    (l_suf formula-decl nil sequ nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suf const-decl "sequ" sequ nil) (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sub const-decl "sequ" sequ nil) (index2 type-eq-decl nil sequ nil)
    (sequ type-eq-decl nil sequ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (Infinterval type-eq-decl nil itlformsemanticsfixpoints nil)
    (Cpoint def-decl "nat" itlformsemanticsfixpoints nil)
    (index type-eq-decl nil sequ nil)
    (sigma!1 skolem-const-decl "Interval" itlproofsystem nil)
    (csinner const-decl "bool" itlformsemanticsfixpoints nil)
    (Csinu const-decl "Iform" itlformsemanticsnew nil)
    (Csf const-decl "Iform" itlformsemanticsnew nil)
    (semcsold const-decl "bool" itlformsemanticsfixpoints nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (l_old_new_1 formula-decl nil itlformsemanticsfixpoints nil)
    (timpl adt-constructor-decl "(timpl?)" formtypes nil)
    (timpl? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (fmore const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (ftwo adt-constructor-decl "[[form, form, fttype] -> (ftwo?)]"
     form_adt nil)
    (ftwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (fttype type-decl nil formtypes nil)
    (form type-decl nil form_adt nil)
    (l_always formula-decl nil itlhelplemma nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil))
   3271187 3150 t nil)
  (ChopstarInduct-1 nil 3391230323 3391230477
   ("" (expand "|-")
    (("" (skosimp*)
      (("" (auto-rewrite-theory "itlsemanticstype")
        (("" (expand "=>" 1 1)
          (("" (expand "M")
            (("" (expand "semftwo")
              (("" (flatten)
                (("" (expand "/\\" -1 1)
                  (("" (expand "M" -1)
                    (("" (expand "semftwo")
                      (("" (flatten)
                        (("" (expand "/\\" -2 1)
                          (("" (expand "M" -2)
                            (("" (expand "semftwo")
                              ((""
                                (flatten)
                                ((""
                                  (rewrite "l_inf")
                                  ((""
                                    (rewrite "l_always")
                                    ((""
                                      (expand "chopstar")
                                      ((""
                                        (expand "M" 1)
                                        ((""
                                          (expand "semfone")
                                          ((""
                                            (lemma "l_old_new_1")
                                            ((""
                                              (inst?)
                                              ((""
                                                (case
                                                 "(semcsold(M(f1!1))(env!1,sigma!1)) = (Csf(M(f1!1))(env!1, sigma!1) or Csinu(M(f1!1))(env!1, sigma!1))")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (hide -1 -2)
                                                    (("1"
                                                      (expand
                                                       "semcsold")
                                                      (("1"
                                                        (expand
                                                         "csinner")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             2
                                                             "(# infinite:=infinite(sigma!1),len:=len(sigma!1),seq:=(lambda (i:index[State](sigma!1)): Cpoint(M(f1!1),M(f0!1),env!1,sigma!1,i))#)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "Cpoint"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (expand
                                                                     "Cpoint"
                                                                     2
                                                                     4)
                                                                    (("1"
                                                                      (expand
                                                                       "Cpoint"
                                                                       2
                                                                       2)
                                                                      (("1"
                                                                        (lemma
                                                                         "epsilon_ax"
                                                                         ("p"
                                                                          "LAMBDA (x: nat): (EXISTS (m: nat):M(f1!1)(env!1, sub(sigma!1,                                                  Cpoint(M(f1!1),                                                         M(f0!1),                                                         env!1,                                                         sigma!1, i!1),                                                  m                                                      +                                                    Cpoint(M(f1!1),                                                           M(f0!1),                                                           env!1,                                                           sigma!1, i!1)))                                          AND m > 0                                            AND                                          M(f0!1)(env!1,                                                  suf(sigma!1,                                                      m                                                          +                                                        Cpoint(M(f1!1),                                                               M(f0!1),                                                               env!1,                                                              sigma!1, i!1)))                                              AND x                                                = m                                                  +                                                Cpoint(M(f1!1), M(f0!1),                                                       env!1, sigma!1,                                                       i!1))"))
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             3)
                                                                            (("2"
                                                                              (inst-cp
                                                                               -3
                                                                               "Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i!1)")
                                                                              (("2"
                                                                                (expand
                                                                                 "=>"
                                                                                 -4)
                                                                                (("2"
                                                                                  (expand
                                                                                   "M"
                                                                                   -4
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "semftwo")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -4)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "/\\"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "M"
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "semftwo")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "^^"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "M"
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "semftwo")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "m!1 +Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i!1)")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "m!1")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "l_fmore")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "suf")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sub")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "(LAMBDA (x_150:
                          {i: nat |
                                   IF infinite(sigma!1)
                                     THEN TRUE
                                   ELSE FALSE
                                   ENDIF
                                    OR
                                    i
                                    <=
                                    IF infinite(sigma!1)
                                    THEN len(sigma!1)
                                    ELSE len(sigma!1)
                                         -
                                         Cpoint
                                         (M(f1!1),
                                          M(f0!1),
                                          env!1,
                                          sigma!1,
                                          i!1)
                                    ENDIF}):
                  seq(sigma!1)
                      (x_150 +
                        Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i!1)
                        + m!1)) = (LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)
                      (x + Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i!1) +
                        m!1))")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (apply-extensionality
                                                                                                                                 1
                                                                                                                                 :hide?
                                                                                                                                 t)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "suf"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "M"
                                                                                                           -2
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "semftwo")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "l_fmore")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "nat_induction")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "lambda (i:nat) : M(f0!1)(env!1,                     suf(sigma!1, Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, i)))")
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "i!1")
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "Cpoint"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "l_suf")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp)
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "Cpoint"
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (lemma
                                                                                                       "epsilon_ax"
                                                                                                       ("p"
                                                                                                        "LAMBDA (x: nat):                                      (EXISTS (m: nat):                                         M(f1!1)(env!1,                                                 sub(sigma!1,                                                     Cpoint(M(f1!1), M(f0!1),                                                            env!1,                                                            sigma!1, j!1),                                                  m                                                        +                                                       Cpoint(M(f1!1), M(f0!1),                                                              env!1,                                                             sigma!1, j!1)))                                             AND m > 0                                               AND                                            M(f0!1)(env!1,                                                     suf(sigma!1,                                                         m                                                             +                                                           Cpoint(M(f1!1),                                                                  M(f0!1),                                                                  env!1,                                                                  sigma!1, j!1)))                                                 AND x                                                   = m                                                     +                                                   Cpoint(M(f1!1), M(f0!1),                                                          env!1, sigma!1, j!1))"))
                                                                                                      (("3"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -4
                                                                                                             "Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, j!1)")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "=>"
                                                                                                               -4)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "M"
                                                                                                                 -4
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "semftwo")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "^")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "M"
                                                                                                                         -4
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "semftwo")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "^^"
                                                                                                                               -4)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (skosimp)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "m!1+Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, j!1)")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "m!1")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "/\\")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "M"
                                                                                                                                           -1
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "semftwo")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "l_fmore")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "suf")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "sub")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "(LAMBDA (x_191:
                          {i: nat |
                                   IF infinite(sigma!1)
                                     THEN TRUE
                                   ELSE FALSE
                                   ENDIF
                                    OR
                                    i
                                    <=
                                    IF infinite(sigma!1)
                                    THEN len(sigma!1)
                                    ELSE len(sigma!1)
                                         -
                                         Cpoint
                                         (M(f1!1),
                                          M(f0!1),
                                          env!1,
                                          sigma!1,
                                          j!1)
                                    ENDIF}):
                  seq(sigma!1)
                      (x_191 +
                        Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, j!1)
                        + m!1)) = (LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)
                      (x + Cpoint(M(f1!1), M(f0!1), env!1, sigma!1, j!1) +
                        m!1))")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (apply-extensionality
                                                                                                                                                               1
                                                                                                                                                               :hide?
                                                                                                                                                               t)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "suf"
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "/\\"
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "M"
                                                                                                                                       -2
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "semftwo")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "l_fmore")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (skosimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 432 310 nil nil))
 (MP 0
  (MP-2 nil 3391249809 nil
   ("" (sem)
    (("" (skosimp*)
      (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved-complete
   ((=> const-decl "form" itlsyntax nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil))
   nil nil nil nil)
  (MP-1 nil 3391230323 3391230477
   ("" (sem)
    (("" (skosimp*)
      (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (=> const-decl "form" itlsyntax nil))
   100 50 nil nil))
 (BoxGen 0
  (BoxGen-2 nil 3391249809 nil
   ("" (sem)
    (("" (assert)
      (("" (skosimp*)
        (("" (prop)
          (("" (skolem!) (("" (flatten) (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (- const-decl "form" itlsyntax nil)
    (= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (<> const-decl "form" itlsynextra nil)
    ([] const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (suf const-decl "sequ" sequ nil) (index type-eq-decl nil sequ nil)
    (sequ type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil))
   nil nil nil nil)
  (BoxGen-1 nil 3391230323 3391230477
   ("" (sem)
    (("" (assert)
      (("" (skosimp*)
        (("" (prop)
          (("" (skolem!) (("" (flatten) (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (suf const-decl "sequ" sequ nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    ([] const-decl "form" itlsynextra nil)
    (<> const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil)
    (- const-decl "form" itlsyntax nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil))
   107 80 nil nil))
 (BiGen 0
  (BiGen-2 nil 3391249809 nil
   ("" (sem)
    (("" (skosimp*)
      (("" (prop)
        (("1" (skosimp*)
          (("1" (inst?) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (inst?) nil nil))
        nil))
      nil))
    nil)
   proved-complete
   ((\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (- const-decl "form" itlsyntax nil)
    (= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (Di const-decl "form" itlsynextra nil)
    (Bi const-decl "form" itlsynextra nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (sub const-decl "sequ" sequ nil) (index2 type-eq-decl nil sequ nil)
    (index type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil))
   nil nil nil nil)
  (BiGen-1 nil 3391230323 3391230477
   ("" (sem)
    (("" (skosimp*)
      (("" (prop)
        (("1" (skosimp*)
          (("1" (inst?) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (inst?) nil nil))
        nil))
      nil))
    nil)
   proved
   ((Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil)
    (SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (Bi const-decl "form" itlsynextra nil)
    (Di const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil)
    (- const-decl "form" itlsyntax nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil))
   125 70 nil nil))
 (SkipFinite 0
  (SkipFinite-2 nil 3391249809 nil
   ("" (sem) (("" (skosimp*) nil nil)) nil) proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil))
   nil nil nil nil)
  (SkipFinite-1 nil 3391230323 3391230477
   ("" (sem) (("" (skosimp*) nil nil)) nil) proved
   ((\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (=> const-decl "form" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   74 50 nil nil))
 (FiniteChopTrue 0
  (FiniteChopTrue-2 nil 3391249809 nil
   ("" (sem)
    (("" (assert)
      (("" (expand "sub")
        (("" (skosimp*)
          (("" (inst 1 "0")
            (("" (flatten) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   nil nil nil nil)
  (FiniteChopTrue-1 nil 3391230323 3391230477
   ("" (sem)
    (("" (assert)
      (("" (expand "sub")
        (("" (skosimp*)
          (("" (inst 1 "0")
            (("" (flatten) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (sub const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   163 120 nil nil))
 (InfEqvSkipChopInf 0
  (InfEqvSkipChopInf-2 nil 3391249809 3391252039
   ("" (sem)
    (("" (expand "suf")
      (("" (expand "sub")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) (("1" (inst 1 "1") nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (index type-eq-decl nil sequ nil) (suf const-decl "sequ" sequ nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   12777 240 t nil)
  (InfEqvSkipChopInf-1 nil 3391230323 3391230478
   ("" (sem)
    (("" (expand "suf")
      (("" (expand "sub")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 247 180 nil nil))
 (FiniteChopFiniteEqvFinite 0
  (FiniteChopFiniteEqvFinite-2 nil 3391249809 nil
   ("" (sem)
    (("" (expand "sub")
      (("" (expand "suf")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (inst 2 "0") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (suf const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (FiniteChopFiniteEqvFinite-1 nil 3391230323 3391230478
   ("" (sem)
    (("" (expand "sub")
      (("" (expand "suf")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (inst 2 "0") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil) (index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (suf const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (== const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   283 210 nil nil))
 (FiniteAndMoreEqvFiniteChopSkip 0
  (FiniteAndMoreEqvFiniteChopSkip-2 nil 3391249809 3391252093
   ("" (sem)
    (("" (expand "suf")
      (("" (expand "sub")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (prop)
                (("1" (inst 1 "len(sigma!1)-1")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (skosimp)
                      (("2" (typepred "m!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (typepred "m!1")
                    (("2" (assert) (("2" (inst 1 "1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (O const-decl "form" itlsynextra nil)
    (more const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil sequ nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suf const-decl "sequ" sequ nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   37578 360 t nil)
  (FiniteAndMoreEqvFiniteChopSkip-1 nil 3391230323 3391230478
   ("" (sem)
    (("" (expand "suf")
      (("" (expand "sub")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (prop)
                (("1" (inst 1 "len(sigma!1)-1")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                 ("2" (skosimp)
                  (("2" (typepred "m!1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 371 300 nil nil))
 (FiniteAndMoreEqvSkipChopFinite 0
  (FiniteAndMoreEqvSkipChopFinite-2 nil 3391249809 nil
   ("" (sem)
    (("" (expand "sub")
      (("" (expand "suf")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) nil nil)
             ("2" (assert) (("2" (prop) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (O const-decl "form" itlsynextra nil)
    (more const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (suf const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (FiniteAndMoreEqvSkipChopFinite-1 nil 3391230323 3391230479
   ("" (sem)
    (("" (expand "sub")
      (("" (expand "suf")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) nil nil)
             ("2" (assert) (("2" (prop) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (suf const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (== const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (more const-decl "form" itlsynextra nil)
    (O const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   325 270 nil nil))
 (SkipChopFiniteImpFinite 0
  (SkipChopFiniteImpFinite-2 nil 3391249809 nil
   ("" (sem)
    (("" (expand "sub")
      (("" (expand "suf") (("" (skosimp*) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (suf const-decl "sequ" sequ nil) (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (SkipChopFiniteImpFinite-1 nil 3391230323 3391230479
   ("" (sem)
    (("" (expand "sub")
      (("" (expand "suf") (("" (skosimp*) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil) (suf const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (=> const-decl "form" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   201 140 nil nil))
 (FiniteChopSkipImpFinite 0
  (FiniteChopSkipImpFinite-2 nil 3391249809 nil
   ("" (sem)
    (("" (expand "suf")
      (("" (expand "sub") (("" (skosimp*) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil) (suf const-decl "sequ" sequ nil))
   nil nil nil nil)
  (FiniteChopSkipImpFinite-1 nil 3391230323 3391230479
   ("" (sem)
    (("" (expand "suf")
      (("" (expand "sub") (("" (skosimp*) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((suf const-decl "sequ" sequ nil) (sub const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (=> const-decl "form" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   205 160 nil nil))
 (FiniteChopInfEqvInfinite 0
  (FiniteChopInfEqvInfinite-2 nil 3391249809 nil
   ("" (sem)
    (("" (expand "sub")
      (("" (expand "suf")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) (("1" (inst 1 "0") nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (suf const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (FiniteChopInfEqvInfinite-1 nil 3391230323 3391230479
   ("" (sem)
    (("" (expand "sub")
      (("" (expand "suf")
        (("" (skosimp*)
          (("" (case "infinite(sigma!1)")
            (("1" (assert) (("1" (inst 1 "0") nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil) (index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (suf const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (== const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   275 200 nil nil))
 (EmptyFinite 0
  (EmptyFinite-2 nil 3391249809 3391252125
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp*) (("" (inst 1 "1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (O const-decl "form" itlsynextra nil)
    (more const-decl "form" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (empty const-decl "form" itlsynextra nil)
    (F const-decl "pform" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil) nil
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub const-decl "sequ" sequ nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   12367 130 t nil)
  (EmptyFinite-1 nil 3391230323 3391230479
   ("" (sem) (("" (expand "sub") (("" (skosimp*) nil nil)) nil)) nil)
   unfinished nil 131 110 nil nil))
 (InfChopFiniteEqvInf 0
  (InfChopFiniteEqvInf-2 nil 3391249809 nil
   ("" (sem)
    (("" (expand "sub") (("" (skosimp*) (("" (prop) nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (InfChopFiniteEqvInf-1 nil 3391230323 3391230480
   ("" (sem)
    (("" (expand "sub") (("" (skosimp*) (("" (prop) nil nil)) nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (== const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   192 130 nil nil))
 (InfChopInfEqvInf 0
  (InfChopInfEqvInf-2 nil 3391249809 nil
   ("" (sem)
    (("" (expand "sub") (("" (skosimp*) (("" (prop) nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (== const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (InfChopInfEqvInf-1 nil 3391230323 3391230480
   ("" (sem)
    (("" (expand "sub") (("" (skosimp*) (("" (prop) nil nil)) nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (== const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (=> const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   187 150 nil nil)))

