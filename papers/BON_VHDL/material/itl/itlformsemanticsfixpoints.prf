(itlformsemanticsfixpoints
 (csinner_TCC1 0
  (csinner_TCC1-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil nil nil nil)
  (csinner_TCC1-1 nil 3391230323 3391230331 ("" (subtype-tcc) nil nil)
   proved nil 14 20 nil nil))
 (csinner_TCC2 0
  (csinner_TCC2-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete nil nil nil nil nil)
  (csinner_TCC2-1 nil 3391230323 3391230331 ("" (subtype-tcc) nil nil)
   proved nil 5 0 nil nil))
 (csinner_TCC3 0
  (csinner_TCC3-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete nil nil nil nil nil)
  (csinner_TCC3-1 nil 3391230323 3391230331 ("" (subtype-tcc) nil nil)
   proved nil 5 10 nil nil))
 (csinner_TCC4 0
  (csinner_TCC4-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil nil nil nil)
  (csinner_TCC4-1 nil 3391230323 3391230331 ("" (subtype-tcc) nil nil)
   proved nil 59 30 nil nil))
 (csinner_TCC5 0
  (csinner_TCC5-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil nil nil nil)
  (csinner_TCC5-1 nil 3391230323 3391230331 ("" (subtype-tcc) nil nil)
   proved nil 210 150 nil nil))
 (csinner_TCC6 0
  (csinner_TCC6-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil nil nil nil)
  (csinner_TCC6-1 nil 3391230323 3391230331 ("" (subtype-tcc) nil nil)
   proved nil 177 110 nil nil))
 (csinner_TCC7 0
  (csinner_TCC7-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil nil nil nil)
  (csinner_TCC7-1 nil 3391230323 3391230331 ("" (subtype-tcc) nil nil)
   proved nil 220 150 nil nil))
 (csinner_TCC8 0
  (csinner_TCC8-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (suf const-decl "sequ" sequ nil))
   nil nil nil nil)
  (csinner_TCC8-1 nil 3391230323 3391230331 ("" (subtype-tcc) nil nil)
   proved
   ((State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (suf const-decl "sequ" sequ nil))
   220 180 nil nil))
 (csinner_TCC9 0
  (csinner_TCC9-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((suf const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil))
   nil nil nil nil)
  (csinner_TCC9-1 nil 3391230323 3391230332 ("" (subtype-tcc) nil nil)
   proved
   ((suf const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil))
   281 200 nil nil))
 (Cpoint_TCC1 0
  (Cpoint_TCC1-2 nil 3391321878 nil
   ("" (skosimp) (("" (assert) nil nil)) nil) proved-complete
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil nil nil nil)
  (Cpoint_TCC1-1 nil 3391230323 3391230332
   ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 10 10 nil
   nil))
 (Cpoint_TCC2 0
  (Cpoint_TCC2-2 nil 3391321878 nil
   ("" (skolem!) (("" (flatten) (("" (assert) nil nil)) nil)) nil)
   proved-complete
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil nil nil nil)
  (Cpoint_TCC2-1 nil 3391230323 3391230332
   ("" (skolem!) (("" (flatten) (("" (assert) nil nil)) nil)) nil)
   proved nil 9 10 nil nil))
 (Cpoint_TCC3 0
  (Cpoint_TCC3-2 nil 3391321878 nil
   ("" (skosimp) (("" (assert) nil nil)) nil) proved-complete nil nil
   nil nil nil)
  (Cpoint_TCC3-1 nil 3391230323 3391230332
   ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 45 10 nil
   nil))
 (Cpoint_TCC4 0
  (Cpoint_TCC4-2 nil 3391321878 nil
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   proved-complete
   ((Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil))
   nil nil nil nil)
  (Cpoint_TCC4-1 nil 3391230323 3391230332
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil) proved
   ((Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil))
   100 60 nil nil))
 (Cpoint_TCC5 0
  (Cpoint_TCC5-2 nil 3391321878 nil
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved-complete
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil nil nil nil)
  (Cpoint_TCC5-1 nil 3391230323 3391230332
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 71 50 nil
   nil))
 (l_help_TCC1 0
  (l_help_TCC1-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil nil nil nil)
  (l_help_TCC1-1 nil 3391230323 3391230332 ("" (subtype-tcc) nil nil)
   proved nil 24 20 nil nil))
 (l_help_TCC2 0
  (l_help_TCC2-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil nil nil nil)
  (l_help_TCC2-1 nil 3391230323 3391230332 ("" (subtype-tcc) nil nil)
   proved nil 74 40 nil nil))
 (l_help_TCC3 0
  (l_help_TCC3-2 nil 3391321878 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil nil nil nil)
  (l_help_TCC3-1 nil 3391230323 3391230332 ("" (subtype-tcc) nil nil)
   proved nil 66 50 nil nil))
 (l_help 0
  (l_help-2 nil 3391321878 nil
   ("" (skosimp)
    (("" (induct "i")
      (("1" (assert) nil nil)
       ("2" (skosimp)
        (("2" (assert)
          (("2" (case "j!1=0")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (inst -5 "1") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (split -1)
                (("1" (inst -4 "1+j!1") (("1" (assert) nil nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert) nil nil) ("4" (skosimp) nil nil)
       ("5" (assert) (("5" (skosimp) (("5" (assert) nil nil)) nil))
        nil)
       ("6" (skosimp) nil nil) ("7" (skosimp) nil nil)
       ("8" (skosimp) nil nil)
       ("9" (skosimp) (("9" (assert) nil nil)) nil)
       ("10" (skosimp) nil nil))
      nil))
    nil)
   proved-complete ((ninterval type-eq-decl nil itlsemanticstype nil))
   nil nil nil nil)
  (l_help-1 nil 3391230323 3391230508
   ("" (skosimp)
    (("" (induct "i")
      (("1" (assert) nil nil)
       ("2" (skosimp)
        (("2" (assert)
          (("2" (case "j!1=0")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (inst -5 "1") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (split -1)
                (("1" (inst -4 "1+j!1") (("1" (assert) nil nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert) nil nil) ("4" (skosimp) nil nil)
       ("5" (assert) (("5" (skosimp) (("5" (assert) nil nil)) nil))
        nil)
       ("6" (skosimp) nil nil) ("7" (skosimp) nil nil)
       ("8" (skosimp) nil nil)
       ("9" (skosimp) (("9" (assert) nil nil)) nil)
       ("10" (skosimp) nil nil))
      nil))
    nil)
   proved ((ninterval type-eq-decl nil itlsemanticstype nil)) 415 300
   nil nil))
 (l_test_1 0
  (l_test_1-2 nil 3391321878 nil
   ("" (induct "m")
    (("1" (skosimp)
      (("1" (expand "Ts")
        (("1" (expand "semempty")
          (("1" (iff) (("1" (prop) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (case "infinite(sigma!1)")
        (("1" (expand "csinner")
          (("1" (assert)
            (("1" (iff)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "Ts" -1)
                    (("1" (case "j!1=0")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1"
                              (inst 1
                               "(# infinite:=false,len:=0,seq:=(lambda (i:{j:nat|j=0}):0)#)")
                              (("1"
                                (assert)
                                (("1" (rewrite "l_suf") nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (typepred "x!1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "^^" -1)
                          (("2" (split -1)
                            (("1" (skosimp)
                              (("1"
                                (inst
                                 -5
                                 "F1!1"
                                 "env!1"
                                 "suf(sigma!1, m!1)")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (hide -5)
                                    (("1"
                                      (expand "suf" -3 1)
                                      (("1"
                                        (expand "suf" -3 3)
                                        (("1"
                                          (expand "suf" -3 3)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 3
                                                 "(# infinite:=false,len:=j!1,seq:=(lambda (i:{j:nat|j<=j!1}):if i>0 then m!1+seq(l!1)(i-1) else 0 endif)#)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split 3)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         "suf"
                                                         (1 -5))
                                                        (("1"
                                                          (case
                                                           "(# infinite := TRUE,
                                    len := len(sigma!1),
                                    seq
                                      := LAMBDA (x_4420:
                                                   {i: nat |
                                                            IF infinite(sigma!1)
                                                              THEN TRUE
                                                            ELSE FALSE
                                                            ENDIF
                                                             OR
                                                             i <=
                                                              IF infinite(sigma!1)
                                                              THEN len(sigma!1)
                                                              ELSE len(sigma!1) - m!1
                                                              ENDIF}):
                                           seq(sigma!1)(x_4420 + seq(l!1)(j!1 - 1) + m!1) #) = (# infinite := TRUE,
                                    len := len(sigma!1),
                                    seq
                                      := LAMBDA (x:
                                                   {i: nat |
                                                            infinite(sigma!1) OR i <= len(sigma!1)}):
                                           seq(sigma!1)(x + seq(l!1)(j!1 - 1) + m!1) #)")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case "i!1=0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "semfmore")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "sub"
                                                                 -4)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -7
                                                             "i!1-1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "suf"
                                                                     -8)
                                                                    (("2"
                                                                      (expand
                                                                       "sub"
                                                                       (2
                                                                        -8))
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "semfmore")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skosimp)
                    (("2" (assert)
                      (("2" (expand "Ts" 2)
                        (("2" (case "j!1=0")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (rewrite "l_suf")
                                    (("1"
                                      (expand "semmore")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "^^")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst 3 "seq(l!1)(1)")
                                  (("2"
                                    (split 3)
                                    (("1"
                                      (inst -4 "0")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst -4 "0")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "semfmore")
                                            (("2"
                                              (expand "sub" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst
                                       -6
                                       "F1!1"
                                       "env!1"
                                       "suf(sigma!1, seq(l!1)(1))")
                                      (("3"
                                        (replace -6)
                                        (("3"
                                          (hide -6)
                                          (("3"
                                            (expand "suf" 1 1)
                                            (("3"
                                              (expand "suf" 1 3)
                                              (("3"
                                                (expand "suf" 1 3)
                                                (("3"
                                                  (inst
                                                   1
                                                   "(# infinite:=false,len:=j!1-1,seq:=(lambda (i:{j:nat|j<=j!1-1}): seq(l!1)(i+1)-seq(l!1)(1))#)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "suf"
                                                           (1 -3))
                                                          (("1"
                                                            (case
                                                             "(# infinite := TRUE,
                                    len := len(sigma!1),
                                    seq
                                      := LAMBDA (x:
                                                   {i: nat |
                                                            infinite(sigma!1) OR i <= len(sigma!1)}):
                                           seq(sigma!1)(x + seq(l!1)(j!1)) #) = (# infinite := TRUE,
                                    len := len(sigma!1),
                                    seq
                                      := LAMBDA (x_4443:
                                                   {i: nat |
                                                            IF infinite(sigma!1)
                                                              THEN TRUE
                                                            ELSE FALSE
                                                            ENDIF
                                                             OR
                                                             i <=
                                                              IF infinite(sigma!1)
                                                              THEN len(sigma!1)
                                                              ELSE len(sigma!1) - seq(l!1)(1)
                                                              ENDIF}):
                                           seq(sigma!1)(x_4443 + seq(l!1)(j!1)) #)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           -5
                                                           "i!1+1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "suf"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "sub"
                                                                     (1
                                                                      -6))
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "l_help")
                                                    (("2"
                                                      (inst -1 "l!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "i!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "i!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (iff)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (expand "Ts" -1)
                  (("1" (case "j!1=0")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1"
                            (inst 1
                             "(# infinite:=false,len:=0,seq:=(lambda (i:{j:nat|j=0}):0)#)")
                            (("1" (assert)
                              (("1"
                                (expand "semmore")
                                (("1"
                                  (expand "csinner")
                                  (("1"
                                    (rewrite "l_suf")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (typepred "x!1")
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "^^" -1)
                        (("2" (assert)
                          (("2" (skosimp)
                            (("2"
                              (inst -4 "F1!1" "env!1"
                               "suf(sigma!1, m!1)")
                              (("2"
                                (replace -4)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (expand "semfmore")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "sub" -2)
                                        (("2"
                                          (expand "sub" 2)
                                          (("2"
                                            (expand "csinner")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "suf" -3 1)
                                                (("2"
                                                  (expand "suf" -3 1)
                                                  (("2"
                                                    (expand "suf" -3 3)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand
                                                         "suf"
                                                         -7
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "suf"
                                                           -7
                                                           1)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (inst
                                                               3
                                                               "(# infinite:=false,len:=j!1,seq:=(lambda (i:{j:nat|j<=j!1}):   if i>0 then m!1+seq(l!1)(i-1) else 0 endif)#)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   3)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "suf"
                                                                       (1
                                                                        -6))
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (case
                                                                       "i!1=0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -8
                                                                           "i!1-1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "suf"
                                                                                   -10)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sub"
                                                                                     (-10
                                                                                      2))
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "Ts" 1)
                  (("2" (case "j!1=0")
                    (("1" (assert)
                      (("1" (expand "csinner")
                        (("1" (skosimp)
                          (("1" (hide 2)
                            (("1" (expand "semmore")
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (rewrite "l_suf")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "^^")
                        (("2" (expand "csinner")
                          (("2" (skosimp)
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (inst 3 "seq(l!1)(1)")
                                  (("1"
                                    (inst -5 "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split 3)
                                            (("1"
                                              (expand "semfmore")
                                              (("1"
                                                (expand "sub" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -8
                                               "F1!1"
                                               "env!1"
                                               "suf(sigma!1, seq(l!1)(1))")
                                              (("2"
                                                (replace -8)
                                                (("2"
                                                  (hide -8)
                                                  (("2"
                                                    (inst
                                                     1
                                                     "(# infinite:=false,len:=j!1-1,seq:=(lambda (i:{j:nat|j<=j!1-1}): seq(l!1)(i+1)-seq(l!1)(1))#)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "suf"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "suf"
                                                           1
                                                           1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "suf"
                                                                 (1
                                                                  -4))
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "suf"
                                                               1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "suf"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (reveal
                                                                     -3)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "1+i!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "suf"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "sub"
                                                                                 (-11
                                                                                  1))
                                                                                (("2"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sub"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma "l_help")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -4)
                                                              (("2"
                                                                (skolem!)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "i!1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst -5 "0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((semmore const-decl "Iform" itlformsemanticsnew nil)
    (sequ type-eq-decl nil sequ nil) (l_suf formula-decl nil sequ nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil)
    (semfmore const-decl "Iform" itlformsemanticsnew nil)
    (index type-eq-decl nil sequ nil) (suf const-decl "sequ" sequ nil)
    (semempty const-decl "Iform" itlformsemanticsnew nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (Ts def-decl "Iform" itlformsemanticsnew nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil))
   nil nil nil nil)
  (l_test_1-1 nil 3391230323 3391230512
   ("" (induct "m")
    (("1" (skosimp)
      (("1" (expand "Ts")
        (("1" (expand "semempty")
          (("1" (iff) (("1" (prop) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (case "infinite(sigma!1)")
        (("1" (expand "csinner")
          (("1" (assert)
            (("1" (iff)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "Ts" -1)
                    (("1" (case "j!1=0")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1"
                              (inst 1
                               "(# infinite:=false,len:=0,seq:=(lambda (i:{j:nat|j=0}):0)#)")
                              (("1"
                                (assert)
                                (("1" (rewrite "l_suf") nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (typepred "x!1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "^^" -1)
                          (("2" (split -1)
                            (("1" (skosimp)
                              (("1"
                                (inst
                                 -5
                                 "F1!1"
                                 "env!1"
                                 "suf(sigma!1, m!1)")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (hide -5)
                                    (("1"
                                      (expand "suf" -3 1)
                                      (("1"
                                        (expand "suf" -3 3)
                                        (("1"
                                          (expand "suf" -3 3)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 3
                                                 "(# infinite:=false,len:=j!1,seq:=(lambda (i:{j:nat|j<=j!1}):if i>0 then m!1+seq(l!1)(i-1) else 0 endif)#)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split 3)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         "suf"
                                                         (1 -5))
                                                        (("1"
                                                          (case
                                                           "(# infinite := TRUE,
                                    len := len(sigma!1),
                                    seq
                                      := LAMBDA (x_4420:
                                                   {i: nat |
                                                            IF infinite(sigma!1)
                                                              THEN TRUE
                                                            ELSE FALSE
                                                            ENDIF
                                                             OR
                                                             i <=
                                                              IF infinite(sigma!1)
                                                              THEN len(sigma!1)
                                                              ELSE len(sigma!1) - m!1
                                                              ENDIF}):
                                           seq(sigma!1)(x_4420 + seq(l!1)(j!1 - 1) + m!1) #) = (# infinite := TRUE,
                                    len := len(sigma!1),
                                    seq
                                      := LAMBDA (x:
                                                   {i: nat |
                                                            infinite(sigma!1) OR i <= len(sigma!1)}):
                                           seq(sigma!1)(x + seq(l!1)(j!1 - 1) + m!1) #)")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case "i!1=0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "semfmore")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "sub"
                                                                 -4)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -7
                                                             "i!1-1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "suf"
                                                                     -8)
                                                                    (("2"
                                                                      (expand
                                                                       "sub"
                                                                       (2
                                                                        -8))
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "semfmore")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skosimp)
                    (("2" (assert)
                      (("2" (expand "Ts" 2)
                        (("2" (case "j!1=0")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (rewrite "l_suf")
                                    (("1"
                                      (expand "semmore")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "^^")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst 3 "seq(l!1)(1)")
                                  (("2"
                                    (split 3)
                                    (("1"
                                      (inst -4 "0")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst -4 "0")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "semfmore")
                                            (("2"
                                              (expand "sub" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst
                                       -6
                                       "F1!1"
                                       "env!1"
                                       "suf(sigma!1, seq(l!1)(1))")
                                      (("3"
                                        (replace -6)
                                        (("3"
                                          (hide -6)
                                          (("3"
                                            (expand "suf" 1 1)
                                            (("3"
                                              (expand "suf" 1 3)
                                              (("3"
                                                (expand "suf" 1 3)
                                                (("3"
                                                  (inst
                                                   1
                                                   "(# infinite:=false,len:=j!1-1,seq:=(lambda (i:{j:nat|j<=j!1-1}): seq(l!1)(i+1)-seq(l!1)(1))#)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "suf"
                                                           (1 -3))
                                                          (("1"
                                                            (case
                                                             "(# infinite := TRUE,
                                    len := len(sigma!1),
                                    seq
                                      := LAMBDA (x:
                                                   {i: nat |
                                                            infinite(sigma!1) OR i <= len(sigma!1)}):
                                           seq(sigma!1)(x + seq(l!1)(j!1)) #) = (# infinite := TRUE,
                                    len := len(sigma!1),
                                    seq
                                      := LAMBDA (x_4443:
                                                   {i: nat |
                                                            IF infinite(sigma!1)
                                                              THEN TRUE
                                                            ELSE FALSE
                                                            ENDIF
                                                             OR
                                                             i <=
                                                              IF infinite(sigma!1)
                                                              THEN len(sigma!1)
                                                              ELSE len(sigma!1) - seq(l!1)(1)
                                                              ENDIF}):
                                           seq(sigma!1)(x_4443 + seq(l!1)(j!1)) #)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           -5
                                                           "i!1+1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "suf"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "sub"
                                                                     (1
                                                                      -6))
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "l_help")
                                                    (("2"
                                                      (inst -1 "l!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "i!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "i!2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (iff)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (expand "Ts" -1)
                  (("1" (case "j!1=0")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1"
                            (inst 1
                             "(# infinite:=false,len:=0,seq:=(lambda (i:{j:nat|j=0}):0)#)")
                            (("1" (assert)
                              (("1"
                                (expand "semmore")
                                (("1"
                                  (expand "csinner")
                                  (("1"
                                    (rewrite "l_suf")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (typepred "x!1")
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "^^" -1)
                        (("2" (assert)
                          (("2" (skosimp)
                            (("2"
                              (inst -4 "F1!1" "env!1"
                               "suf(sigma!1, m!1)")
                              (("2"
                                (replace -4)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (expand "semfmore")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "sub" -2)
                                        (("2"
                                          (expand "sub" 2)
                                          (("2"
                                            (expand "csinner")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "suf" -3 1)
                                                (("2"
                                                  (expand "suf" -3 1)
                                                  (("2"
                                                    (expand "suf" -3 3)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand
                                                         "suf"
                                                         -7
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "suf"
                                                           -7
                                                           1)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (inst
                                                               3
                                                               "(# infinite:=false,len:=j!1,seq:=(lambda (i:{j:nat|j<=j!1}):   if i>0 then m!1+seq(l!1)(i-1) else 0 endif)#)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   3)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "suf"
                                                                       (1
                                                                        -6))
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (case
                                                                       "i!1=0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -8
                                                                           "i!1-1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "suf"
                                                                                   -10)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sub"
                                                                                     (-10
                                                                                      2))
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "Ts" 1)
                  (("2" (case "j!1=0")
                    (("1" (assert)
                      (("1" (expand "csinner")
                        (("1" (skosimp)
                          (("1" (hide 2)
                            (("1" (expand "semmore")
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (rewrite "l_suf")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "^^")
                        (("2" (expand "csinner")
                          (("2" (skosimp)
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (inst 3 "seq(l!1)(1)")
                                  (("1"
                                    (inst -5 "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split 3)
                                            (("1"
                                              (expand "semfmore")
                                              (("1"
                                                (expand "sub" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -8
                                               "F1!1"
                                               "env!1"
                                               "suf(sigma!1, seq(l!1)(1))")
                                              (("2"
                                                (replace -8)
                                                (("2"
                                                  (hide -8)
                                                  (("2"
                                                    (inst
                                                     1
                                                     "(# infinite:=false,len:=j!1-1,seq:=(lambda (i:{j:nat|j<=j!1-1}): seq(l!1)(i+1)-seq(l!1)(1))#)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "suf"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "suf"
                                                           1
                                                           1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "suf"
                                                                 (1
                                                                  -4))
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "suf"
                                                               1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "suf"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (reveal
                                                                     -3)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "1+i!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "suf"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "sub"
                                                                                 (-11
                                                                                  1))
                                                                                (("2"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sub"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma "l_help")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -4)
                                                              (("2"
                                                                (skolem!)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "i!1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst -5 "0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((semmore const-decl "Iform" itlformsemanticsnew nil)
    (sequ type-eq-decl nil sequ nil) (l_suf formula-decl nil sequ nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (sub const-decl "sequ" sequ nil)
    (semfmore const-decl "Iform" itlformsemanticsnew nil)
    (index type-eq-decl nil sequ nil) (suf const-decl "sequ" sequ nil)
    (semempty const-decl "Iform" itlformsemanticsnew nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (Ts def-decl "Iform" itlformsemanticsnew nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil))
   4000 3020 nil nil))
 (l_ismono 0
  (l_ismono-2 nil 3391321878 nil
   ("" (skosimp)
    (("" (expand "ismono")
      (("" (skosimp)
        (("" (expand "<=")
          (("" (skosimp)
            (("" (expand "^^")
              (("" (split -2)
                (("1" (skosimp)
                  (("1" (inst 1 "m!1")
                    (("1" (assert)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((^^ const-decl "Iform" itlformsemanticsnew nil)
    (sequ type-eq-decl nil sequ nil) (suf const-decl "sequ" sequ nil)
    (index type-eq-decl nil sequ nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil))
   nil nil nil nil)
  (l_ismono-1 nil 3391230323 3391230512
   ("" (skosimp)
    (("" (expand "ismono")
      (("" (skosimp)
        (("" (expand "<=")
          (("" (skosimp)
            (("" (expand "^^")
              (("" (split -2)
                (("1" (skosimp)
                  (("1" (inst 1 "m!1")
                    (("1" (assert)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((^^ const-decl "Iform" itlformsemanticsnew nil)
    (sequ type-eq-decl nil sequ nil) (suf const-decl "sequ" sequ nil)
    (index type-eq-decl nil sequ nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil))
   111 60 nil nil))
 (l_test_4 0
  (l_test_4-2 nil 3391321878 3391325161
   ("" (skosimp)
    (("" (expand "Csinu")
      (("" (expand "seminfinite")
        (("" (assert)
          (("" (expand "nu")
            (("" (expand "gfp")
              (("" (expand "lub")
                (("" (expand "member")
                  (("" (iff)
                    (("" (prop)
                      (("1" (skosimp)
                        (("1" (expand "<=")
                          (("1"
                            (inst 1
                             "(# infinite:=true,len:=len(sigma!1),seq:=(lambda (i:{j:nat|true::bool}): Cpoint(F1!1,p!1,env!1,sigma!1,i))#)")
                            (("1" (expand "csinner")
                              (("1"
                                (expand "Cpoint" 1 1)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "Cpoint" 1 4)
                                      (("1"
                                        (expand "Cpoint" 1 2)
                                        (("1"
                                          (lemma
                                           "epsilon_ax"
                                           ("p"
                                            "LAMBDA (x: nat):
                          EXISTS (m: nat):
                            F1!1(env!1,
                                 sub(sigma!1,
                                     Cpoint
                                     (F1!1, p!1, env!1, sigma!1, i!1),
                                     m
                                     +
                                     Cpoint
                                     (F1!1, p!1, env!1, sigma!1, i!1)))
                             AND
                             m > 0 AND
                              p!1(env!1,
                                  suf(sigma!1,
                                      m
                                      +
                                      Cpoint
                                      (F1!1, p!1, env!1, sigma!1, i!1)))
                               AND
                               x =
                                m +
                                 Cpoint(F1!1, p!1, env!1, sigma!1, i!1)"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "(env!1,suf(sigma!1,Cpoint(F1!1, p!1, env!1, sigma!1, i!1)))")
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (expand "^^" -1)
                                                      (("1"
                                                        (expand
                                                         "semfmore"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "sub"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "sub"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "suf"
                                                               -1
                                                               5)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "m!1 + Cpoint(F1!1, p!1, env!1, sigma!1, i!1)")
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "m!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "suf")
                                                                        (("1"
                                                                          (expand
                                                                           "sub")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "(# infinite := TRUE,
             len := len(sigma!1),
             seq
               := LAMBDA (x_1:
                            {i: nat |
                                     IF infinite(sigma!1)
                                     THEN TRUE
                                     ELSE FALSE
                                     ENDIF
                                     OR
                                     i
                                     <=
                                     IF infinite(sigma!1)
                                     THEN len(sigma!1)
                                     ELSE len(sigma!1)
                                          -
                                          Cpoint
                                          (F1!1, p!1, env!1, sigma!1, i!1)
                                     ENDIF}):
                    seq(sigma!1)
                        (x_1 + Cpoint(F1!1, p!1, env!1, sigma!1, i!1) +
                          m!1) #) = (# infinite := TRUE,
                          len := len(sigma!1),
                          seq
                            := LAMBDA (x:
                                         {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                                 seq(sigma!1)
                                     (x + Cpoint(F1!1, p!1, env!1, sigma!1, i!1) + m!1) #)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply-extensionality
                                                                                 1
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   1
                                                                                   :hide?
                                                                                   t)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "nat_induction")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "lambda (i:nat): p!1(env!1, suf(sigma!1, Cpoint(F1!1, p!1, env!1, sigma!1, i)))")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "i!1")
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "Cpoint"
                                                             1)
                                                            (("2"
                                                              (rewrite
                                                               "l_suf")
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            (("3"
                                                              (hide 3)
                                                              (("3"
                                                                (expand
                                                                 "Cpoint"
                                                                 1)
                                                                (("3"
                                                                  (lemma
                                                                   "epsilon_ax"
                                                                   ("p"
                                                                    "LAMBDA (x: nat):
                                               (EXISTS (m: nat):
                                                  F1!1(env!1,
                                                       sub(sigma!1,
                                                           Cpoint(F1!1, p!1,
                                                                  env!1, sigma!1, j!1),
                                                           m
                                                               +
                                                             Cpoint(F1!1, p!1,
                                                                    env!1, sigma!1, j!1)))
                                                      AND m > 0
                                                        AND
                                                      p!1(env!1,
                                                          suf(sigma!1,
                                                              m
                                                                  +
                                                                Cpoint(F1!1, p!1,
                                                                       env!1,
                                                                       sigma!1, j!1)))
                                                          AND x
                                                            = m
                                                              +
                                                            Cpoint(F1!1, p!1,
                                                                   env!1, sigma!1, j!1))"))
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "(env!1, suf(sigma!1, Cpoint(F1!1, p!1, env!1, sigma!1, j!1)))")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "^^")
                                                                              (("2"
                                                                                (expand
                                                                                 "semfmore")
                                                                                (("2"
                                                                                  (expand
                                                                                   "sub"
                                                                                   -2
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sub"
                                                                                     -2
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "suf"
                                                                                       -2
                                                                                       5)
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "m!1 + Cpoint(F1!1, p!1, env!1, sigma!1, j!1)")
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "m!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "suf")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "sub")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "(# infinite := TRUE,
                              len := len(sigma!1),
                              seq
                                := LAMBDA (x_199:
                                             {i: nat |
                                                      IF infinite(sigma!1)
                                                        THEN TRUE
                                                      ELSE FALSE
                                                      ENDIF
                                                       OR
                                                       i <=
                                                        IF infinite(sigma!1)
                                                          THEN len(sigma!1)
                                                        ELSE len(sigma!1)
                                                             -
                                                             Cpoint
                                                             (F1!1, p!1, env!1, sigma!1, j!1)
                                                        ENDIF}):
                                     seq(sigma!1)
                                         (x_199 + Cpoint(F1!1, p!1, env!1, sigma!1, j!1) +
                                           m!1) #) = (# infinite := TRUE,
                              len := len(sigma!1),
                              seq
                                := LAMBDA (x:
                                             {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                                     seq(sigma!1)
                                         (x + Cpoint(F1!1, p!1, env!1, sigma!1, j!1) + m!1) #)")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (apply-extensionality
                                                                                                         1
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("2"
                                                                                                          (apply-extensionality
                                                                                                           1
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (inst 1
                         "(lambda (env,sigma) : infinite(sigma) and (EXISTS (l: ninterval): infinite(l) AND csinner(env, sigma, l, F1!1)))")
                        (("2" (expand "<=")
                          (("2" (assert)
                            (("2" (split 1)
                              (("1"
                                (skosimp)
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (expand "^^")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "semfmore")
                                        (("1"
                                          (expand "sub" 1 1)
                                          (("1"
                                            (expand "sub" 1 1)
                                            (("1"
                                              (expand "csinner")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "seq(l!1)(1)")
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (inst -5 "0")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst -5 "0")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "suf"
                                                         1)
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (inst
                                                         1
                                                         "(# infinite:=true,len:=len(l!1),seq:=(lambda (i:{j:nat|true::bool}): seq(l!1)(i+1)-seq(l!1)(1))#)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "suf"
                                                             1
                                                             1)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "1+i!1")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "suf")
                                                                        (("1"
                                                                          (expand
                                                                           "sub")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "l_help")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "l!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "i!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (hide
                                                                     -4)
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "i!1")
                                                                      (("2"
                                                                        (flatten)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Csinu const-decl "Iform" itlformsemanticsnew nil)
    (gfp const-decl "pred[T]" mucalculus nil)
    (member const-decl "bool" sets nil)
    (<= const-decl "bool" mucalculus nil)
    (csinner const-decl "bool" itlformsemanticsfixpoints nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (suf const-decl "sequ" sequ nil) (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sub const-decl "sequ" sequ nil) (index2 type-eq-decl nil sequ nil)
    (index type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (l_suf formula-decl nil sequ nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semfmore const-decl "Iform" itlformsemanticsnew nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (Cpoint def-decl "nat" itlformsemanticsfixpoints nil)
    (Infinterval type-eq-decl nil itlformsemanticsfixpoints nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (SState type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (TRUE const-decl "bool" booleans nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (l_help formula-decl nil itlformsemanticsfixpoints nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (l!1 skolem-const-decl "ninterval" itlformsemanticsfixpoints nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (lub const-decl "pred[T]" mucalculus nil)
    (nu const-decl "pred[T]" mucalculus nil)
    (seminfinite const-decl "Iform" itlformsemanticsnew nil))
   2895615 2610 t nil)
  (l_test_4-1 nil 3391230323 3391230516
   ("" (skosimp)
    (("" (expand "Csinu")
      (("" (expand "seminfinite")
        (("" (assert)
          (("" (expand "nu")
            (("" (expand "gfp")
              (("" (expand "lub")
                (("" (expand "member")
                  (("" (iff)
                    (("" (prop)
                      (("1" (skosimp)
                        (("1" (expand "<=")
                          (("1"
                            (inst 1
                             "(# infinite:=true,len:=len(sigma!1),seq:=(lambda (i:{j:nat|true::bool}): Cpoint(F1!1,p!1,env!1,sigma!1,i))#)")
                            (("1" (expand "csinner")
                              (("1"
                                (expand "Cpoint" 1 1)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (expand "Cpoint" 1 4)
                                    (("1"
                                      (expand "Cpoint" 1 2)
                                      (("1"
                                        (lemma
                                         "epsilon_ax"
                                         ("p"
                                          "LAMBDA (x: nat):
                                  (EXISTS (m: nat):
                                     F1!1(env!1,
                                          sub(sigma!1,
                                              Cpoint(F1!1, p!1,
                                                     env!1,
                                                     sigma!1, i!1),
                                              m
                                                  +
                                                Cpoint(F1!1, p!1,
                                                       env!1,
                                                       sigma!1, i!1)))
                                         AND m > 0
                                           AND
                                         p!1(env!1,
                                             suf(sigma!1,
                                                 m
                                                     +
                                                   Cpoint(F1!1, p!1,
                                                          env!1,
                                                          sigma!1, i!1)))
                                             AND x
                                               = m
                                                 +
                                               Cpoint(F1!1, p!1,
                                                      env!1, sigma!1,
                                                      i!1))"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (replace -4)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (inst-cp
                                               -
                                               "(env!1,suf(sigma!1,Cpoint(F1!1, p!1, env!1, sigma!1, i!1)))")
                                              (("2"
                                                (split -2)
                                                (("1"
                                                  (expand "^^" -1)
                                                  (("1"
                                                    (expand
                                                     "semfmore"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "sub"
                                                       -1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "sub"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "suf"
                                                           -1
                                                           5)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "m!1 + Cpoint(F1!1, p!1, env!1, sigma!1, i!1)")
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "m!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "suf")
                                                                    (("1"
                                                                      (expand
                                                                       "sub")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "(# infinite := TRUE,
             len := len(sigma!1),
             seq
               := LAMBDA (x_178:
                            {i: nat |
                                     IF infinite(sigma!1)
                                       THEN TRUE
                                     ELSE FALSE
                                     ENDIF
                                      OR
                                      i <=
                                       IF infinite(sigma!1)
                                         THEN len(sigma!1)
                                       ELSE len(sigma!1)
                                            -
                                            Cpoint
                                            (F1!1, p!1, env!1, sigma!1, i!1)
                                       ENDIF}):
                    seq(sigma!1)
                        (x_178 + Cpoint(F1!1, p!1, env!1, sigma!1, i!1) +
                          m!1) #) = (# infinite := TRUE,
             len := len(sigma!1),
             seq
               := LAMBDA (x:
                            {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                    seq(sigma!1)
                        (x + Cpoint(F1!1, p!1, env!1, sigma!1, i!1) + m!1) #)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply-extensionality
                                                                             1
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (apply-extensionality
                                                                               1
                                                                               :hide?
                                                                               t)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "nat_induction")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "lambda (i:nat): p!1(env!1, suf(sigma!1, Cpoint(F1!1, p!1, env!1, sigma!1, i)))")
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (inst -1 "i!1")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "Cpoint"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "l_suf")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp)
                                                        (("3"
                                                          (hide 3)
                                                          (("3"
                                                            (expand
                                                             "Cpoint"
                                                             1)
                                                            (("3"
                                                              (lemma
                                                               "epsilon_ax"
                                                               ("p"
                                                                "LAMBDA (x: nat):
                                    (EXISTS (m: nat):
                                       F1!1(env!1,
                                            sub(sigma!1,
                                                Cpoint(F1!1, p!1,
                                                       env!1, sigma!1, j!1),
                                                m
                                                    +
                                                  Cpoint(F1!1, p!1,
                                                         env!1, sigma!1, j!1)))
                                           AND m > 0
                                             AND
                                           p!1(env!1,
                                               suf(sigma!1,
                                                   m
                                                       +
                                                     Cpoint(F1!1, p!1,
                                                            env!1,
                                                            sigma!1, j!1)))
                                               AND x
                                                 = m
                                                   +
                                                 Cpoint(F1!1, p!1,
                                                        env!1, sigma!1, j!1))"))
                                                              (("3"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "(env!1, suf(sigma!1, Cpoint(F1!1, p!1, env!1, sigma!1, j!1)))")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "^^")
                                                                        (("2"
                                                                          (expand
                                                                           "semfmore")
                                                                          (("2"
                                                                            (expand
                                                                             "sub"
                                                                             -2
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "sub"
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "suf"
                                                                                 -2
                                                                                 5)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "m!1 + Cpoint(F1!1, p!1, env!1, sigma!1, j!1)")
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "m!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "suf")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sub")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "(# infinite := TRUE,
             len := len(sigma!1),
             seq
               := LAMBDA (x_199:
                            {i: nat |
                                     IF infinite(sigma!1)
                                       THEN TRUE
                                     ELSE FALSE
                                     ENDIF
                                      OR
                                      i <=
                                       IF infinite(sigma!1)
                                         THEN len(sigma!1)
                                       ELSE len(sigma!1)
                                            -
                                            Cpoint
                                            (F1!1, p!1, env!1, sigma!1, j!1)
                                       ENDIF}):
                    seq(sigma!1)
                        (x_199 + Cpoint(F1!1, p!1, env!1, sigma!1, j!1) +
                          m!1) #) = (# infinite := TRUE,
             len := len(sigma!1),
             seq
               := LAMBDA (x:
                            {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                    seq(sigma!1)
                        (x + Cpoint(F1!1, p!1, env!1, sigma!1, j!1) + m!1) #)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply-extensionality
                                                                                                   1
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("2"
                                                                                                    (apply-extensionality
                                                                                                     1
                                                                                                     :hide?
                                                                                                     t)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (inst 1
                         "(lambda (env,sigma) : infinite(sigma) and (EXISTS (l: ninterval): infinite(l) AND csinner(env, sigma, l, F1!1)))")
                        (("2" (expand "<=")
                          (("2" (assert)
                            (("2" (split 1)
                              (("1"
                                (skosimp)
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (expand "^^")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "semfmore")
                                        (("1"
                                          (expand "sub" 1 1)
                                          (("1"
                                            (expand "sub" 1 1)
                                            (("1"
                                              (expand "csinner")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "seq(l!1)(1)")
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (inst -5 "0")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst -5 "0")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "suf"
                                                         1)
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (inst
                                                         1
                                                         "(# infinite:=true,len:=len(l!1),seq:=(lambda (i:{j:nat|true::bool}): seq(l!1)(i+1)-seq(l!1)(1))#)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "suf"
                                                             1
                                                             1)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "1+i!1")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "suf")
                                                                        (("1"
                                                                          (expand
                                                                           "sub")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "l_help")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "l!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "i!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (hide
                                                                     -4)
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "i!1")
                                                                      (("2"
                                                                        (flatten)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 3870 1880 nil nil))
 (l_old_new_1 0
  (l_old_new_1-2 nil 3391321878 nil
   ("" (skosimp)
    (("" (expand "semcsold")
      (("" (expand "Csf")
        (("" (iff)
          (("" (prop)
            (("1" (inst 2 "0")
              (("1" (expand "Ts")
                (("1" (expand "semempty") (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (case "infinite(l!1)")
                (("1" (assert)
                  (("1" (hide 1)
                    (("1" (lemma "l_test_4")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (inst 2 "l!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "csinner")
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 3)
                    (("2" (lemma "l_test_1")
                      (("2" (inst 2 "len(l!1)+1")
                        (("2" (inst?)
                          (("2" (replace -1)
                            (("2" (hide -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst 3 "l!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (lemma "l_test_1")
                (("3" (inst?)
                  (("3" (replace -1)
                    (("3" (hide -1)
                      (("3" (assert)
                        (("3" (skosimp) (("3" (inst 3 "l!1") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skosimp)
              (("4" (use "l_test_1")
                (("4" (replace -1)
                  (("4" (assert)
                    (("4" (skosimp) (("4" (inst 2 "l!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (lemma "l_test_4")
              (("5" (inst?)
                (("5" (assert)
                  (("5" (split -1)
                    (("1" (skosimp) (("1" (inst?) nil nil)) nil)
                     ("2" (expand "Csinu")
                      (("2" (flatten)
                        (("2" (expand "seminfinite")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (lemma "l_test_4")
              (("6" (inst?)
                (("6" (assert)
                  (("6" (skosimp) (("6" (inst 1 "l!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((Csinu const-decl "Iform" itlformsemanticsnew nil)
    (seminfinite const-decl "Iform" itlformsemanticsnew nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (semempty const-decl "Iform" itlformsemanticsnew nil)
    (Ts def-decl "Iform" itlformsemanticsnew nil)
    (Csf const-decl "Iform" itlformsemanticsnew nil))
   nil nil nil nil)
  (l_old_new_1-1 nil 3391230323 3391230516
   ("" (skosimp)
    (("" (expand "semcsold")
      (("" (expand "Csf")
        (("" (iff)
          (("" (prop)
            (("1" (inst 2 "0")
              (("1" (expand "Ts")
                (("1" (expand "semempty") (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (case "infinite(l!1)")
                (("1" (assert)
                  (("1" (hide 1)
                    (("1" (lemma "l_test_4")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (inst 2 "l!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "csinner")
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 3)
                    (("2" (lemma "l_test_1")
                      (("2" (inst 2 "len(l!1)+1")
                        (("2" (inst?)
                          (("2" (replace -1)
                            (("2" (hide -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst 3 "l!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (lemma "l_test_1")
                (("3" (inst?)
                  (("3" (replace -1)
                    (("3" (hide -1)
                      (("3" (assert)
                        (("3" (skosimp) (("3" (inst 3 "l!1") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skosimp)
              (("4" (use "l_test_1")
                (("4" (replace -1)
                  (("4" (assert)
                    (("4" (skosimp) (("4" (inst 2 "l!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (lemma "l_test_4")
              (("5" (inst?)
                (("5" (assert)
                  (("5" (split -1)
                    (("1" (skosimp) (("1" (inst?) nil nil)) nil)
                     ("2" (expand "Csinu")
                      (("2" (flatten)
                        (("2" (expand "seminfinite")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (lemma "l_test_4")
              (("6" (inst?)
                (("6" (assert)
                  (("6" (skosimp) (("6" (inst 1 "l!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Csinu const-decl "Iform" itlformsemanticsnew nil)
    (seminfinite const-decl "Iform" itlformsemanticsnew nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (semempty const-decl "Iform" itlformsemanticsnew nil)
    (Ts def-decl "Iform" itlformsemanticsnew nil)
    (Csf const-decl "Iform" itlformsemanticsnew nil))
   290 140 nil nil))
 (l_iterate_1 0
  (l_iterate_1-2 nil 3391321878 3391327532
   ("" (induct "m" :name "NAT_induction")
    (("1" (assert) nil nil)
     ("2" (skosimp*)
      (("2" (iff)
        (("2" (prop)
          (("1" (expand "iterate" -1)
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "^^" -1 1)
                  (("1" (split -1)
                    (("1" (skosimp)
                      (("1" (inst -4 "j!1-1")
                        (("1" (assert)
                          (("1"
                            (inst -4 "F1!1" "env2!1"
                             "suf(sigma2!1,m!1)")
                            (("1" (assert)
                              (("1"
                                (case "j!1=1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "iterate")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (skolem!)
                                    (("2"
                                      (inst 2 "i!1+1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "Ts" 2)
                                          (("2"
                                            (case "i!1=0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand "Ts" -5)
                                                  (("1"
                                                    (expand "semempty")
                                                    (("1"
                                                      (expand "suf" -5)
                                                      (("1"
                                                        (case
                                                         "infinite(sigma2!1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "m!1=len(sigma2!1)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (rewrite
                                                                 "l_sub")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "semmore")
                                                                    (("1"
                                                                      (expand
                                                                       "semfmore")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "^^" 3)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst 3 "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "semfmore")
                        (("2" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "semempty" -1)
                  (("2" (flatten)
                    (("2" (inst 2 "0")
                      (("2" (assert)
                        (("2" (expand "Ts")
                          (("2" (expand "semempty")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (flatten)
                  (("3" (inst 1 "1")
                    (("3" (assert)
                      (("3" (expand "Ts" 1) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -2 "j!1-1")
            (("1" (assert)
              (("1" (case "j!1=1")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (skosimp)
                      (("1" (expand "iterate")
                        (("1" (expand "iterate")
                          (("1" (expand "^^")
                            (("1" (flatten)
                              (("1"
                                (case "i!1=0")
                                (("1"
                                  (expand "Ts")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "Ts")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skosimp)
                    (("2" (case "i!1=j!1")
                      (("1" (replace -1)
                        (("1" (expand "Ts" -3)
                          (("1" (assert)
                            (("1" (expand "^^" -3)
                              (("1"
                                (split)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst
                                     -6
                                     "F1!1"
                                     "env2!1"
                                     "suf(sigma2!1, m!1)")
                                    (("1"
                                      (expand "iterate" 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "^^" 2 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst 2 "m!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -6)
                                                  (("1"
                                                    (inst 2 "j!1-1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "semfmore")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "iterate" 3)
                          (("2" (flatten)
                            (("2" (expand "^^" 3 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "Ts" -2)
                                  (("2"
                                    (case "i!1=0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "i!1=1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "^^" -2)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst 5 "m!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (inst
                                                           5
                                                           "i!1-1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (l_sub formula-decl nil sequ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (suf const-decl "sequ" sequ nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j!1 skolem-const-decl "nat" itlformsemanticsfixpoints nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (Ts def-decl "Iform" itlformsemanticsnew nil)
    (FALSE const-decl "bool" booleans nil)
    (semmore const-decl "Iform" itlformsemanticsnew nil)
    (semempty const-decl "Iform" itlformsemanticsnew nil)
    (semfmore const-decl "Iform" itlformsemanticsnew nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   929071 1190 t nil)
  (l_iterate_1-1 nil 3391230323 3391230517
   ("" (induct "m" :name "NAT_induction")
    (("" (skosimp*)
      (("" (iff)
        (("" (prop)
          (("1" (expand "iterate" -1)
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "^^" -1 1)
                  (("1" (split -1)
                    (("1" (skosimp)
                      (("1" (inst -4 "j!1-1")
                        (("1" (assert)
                          (("1"
                            (inst -4 "F1!1" "env2!1"
                             "suf(sigma2!1,m!1)")
                            (("1" (assert)
                              (("1"
                                (case "j!1=1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "iterate")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (skolem!)
                                    (("2"
                                      (inst 2 "i!1+1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "Ts" 2)
                                          (("2"
                                            (case "i!1=0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand "Ts" -5)
                                                  (("1"
                                                    (expand "semempty")
                                                    (("1"
                                                      (expand "suf" -5)
                                                      (("1"
                                                        (case
                                                         "infinite(sigma2!1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "m!1=len(sigma2!1)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (rewrite
                                                                 "l_sub")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "semmore")
                                                                    (("1"
                                                                      (expand
                                                                       "semfmore")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "^^" 3)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst 3 "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "semfmore")
                        (("2" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "semempty" -1)
                  (("2" (flatten)
                    (("2" (inst 2 "0")
                      (("2" (assert)
                        (("2" (expand "Ts")
                          (("2" (expand "semempty")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (flatten)
                  (("3" (inst 1 "1")
                    (("3" (assert)
                      (("3" (expand "Ts" 1) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -2 "j!1-1")
            (("1" (assert)
              (("1" (case "j!1=1")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (skosimp)
                      (("1" (expand "iterate")
                        (("1" (expand "iterate")
                          (("1" (expand "^^")
                            (("1" (flatten)
                              (("1"
                                (case "i!1=0")
                                (("1"
                                  (expand "Ts")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "Ts")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skosimp)
                    (("2" (case "i!1=j!1")
                      (("1" (replace -1)
                        (("1" (expand "Ts" -3)
                          (("1" (assert)
                            (("1" (expand "^^" -3)
                              (("1"
                                (split)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst
                                     -6
                                     "F1!1"
                                     "env2!1"
                                     "suf(sigma2!1, m!1)")
                                    (("1"
                                      (expand "iterate" 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "^^" 2 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst 2 "m!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -6)
                                                  (("1"
                                                    (inst 2 "j!1-1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "semfmore")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "iterate" 3)
                          (("2" (flatten)
                            (("2" (expand "^^" 3 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "Ts" -2)
                                  (("2"
                                    (case "i!1=0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "i!1=1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "^^" -2)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst 5 "m!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (inst
                                                           5
                                                           "i!1-1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 210 130 nil nil))
 (l_Csf_CsfMu1 0
  (l_Csf_CsfMu1-2 nil 3391321878 nil
   ("" (skosimp)
    (("" (expand "CsfMu")
      (("" (expand "Csf")
        (("" (expand "Mu")
          (("" (expand "lub")
            (("" (expand "member")
              (("" (apply-extensionality 1 :hide? t)
                (("" (iff)
                  (("" (prop)
                    (("1" (skosimp*)
                      (("1" (replace -1)
                        (("1" (case "j!1=0")
                          (("1" (replace -1)
                            (("1" (expand "iterate")
                              (("1"
                                (expand "emptyset")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "l_iterate_1")
                            (("2" (hide -2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "emptyset")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (skosimp)
                                      (("2" (inst 2 "i!1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2"
                        (inst 1
                         "lambda (env,sigma): F1!1(env,sigma) or semempty(env,sigma)")
                        (("2" (split 1)
                          (("1" (inst 1 "1")
                            (("1" (expand "iterate")
                              (("1"
                                (expand "iterate")
                                (("1"
                                  (expand "emptyset")
                                  (("1"
                                    (expand "^^")
                                    (("1"
                                      (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (iff)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "semempty")
                                              (("1"
                                                (expand "semmore")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "semempty")
                                              (("2"
                                                (expand "semmore")
                                                (("2"
                                                  (expand "semfmore")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (reveal 1)
                              (("2"
                                (inst
                                 1
                                 "lambda (env,sigma): (EXISTS (i: nat): i <= n!1 AND Ts(F1!1, i)(env,sigma))")
                                (("2"
                                  (split)
                                  (("1"
                                    (inst 1 "n!1")
                                    (("1"
                                      (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (expand "emptyset")
                                        (("1"
                                          (expand "semempty")
                                          (("1"
                                            (lemma "l_iterate_1")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (expand "semempty")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "Ts"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             "semempty")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((CsfMu const-decl "Iform" itlformsemanticsnew nil)
    (Mu const-decl "bool" itlformsemanticsnew nil)
    (SState type-eq-decl nil itlstate nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfmore const-decl "Iform" itlformsemanticsnew nil)
    (semempty const-decl "Iform" itlformsemanticsnew nil)
    (semmore const-decl "Iform" itlformsemanticsnew nil)
    (Ts def-decl "Iform" itlformsemanticsnew nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (Csf const-decl "Iform" itlformsemanticsnew nil))
   nil nil nil nil)
  (l_Csf_CsfMu1-1 nil 3391230323 3391230517
   ("" (skosimp)
    (("" (expand "CsfMu")
      (("" (expand "Csf")
        (("" (expand "Mu")
          (("" (expand "lub")
            (("" (expand "member")
              (("" (apply-extensionality 1 :hide? t)
                (("" (iff)
                  (("" (prop)
                    (("1" (skosimp*)
                      (("1" (replace -1)
                        (("1" (case "j!1=0")
                          (("1" (replace -1)
                            (("1" (expand "iterate")
                              (("1"
                                (expand "emptyset")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "l_iterate_1")
                            (("2" (hide -2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "emptyset")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (skosimp)
                                      (("2" (inst 2 "i!1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2"
                        (inst 1
                         "lambda (env,sigma): F1!1(env,sigma) or semempty(env,sigma)")
                        (("2" (split 1)
                          (("1" (inst 1 "1")
                            (("1" (expand "iterate")
                              (("1"
                                (expand "iterate")
                                (("1"
                                  (expand "emptyset")
                                  (("1"
                                    (expand "^^")
                                    (("1"
                                      (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (iff)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "semempty")
                                              (("1"
                                                (expand "semmore")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "semempty")
                                              (("2"
                                                (expand "semmore")
                                                (("2"
                                                  (expand "semfmore")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (reveal 1)
                              (("2"
                                (inst
                                 1
                                 "lambda (env,sigma): (EXISTS (i: nat): i <= n!1 AND Ts(F1!1, i)(env,sigma))")
                                (("2"
                                  (split)
                                  (("1"
                                    (inst 1 "n!1")
                                    (("1"
                                      (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (expand "emptyset")
                                        (("1"
                                          (expand "semempty")
                                          (("1"
                                            (lemma "l_iterate_1")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (expand "semempty")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case "n!1=0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "Ts"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             "semempty")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((CsfMu const-decl "Iform" itlformsemanticsnew nil)
    (Mu const-decl "bool" itlformsemanticsnew nil)
    (SState type-eq-decl nil itlstate nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfmore const-decl "Iform" itlformsemanticsnew nil)
    (semempty const-decl "Iform" itlformsemanticsnew nil)
    (semmore const-decl "Iform" itlformsemanticsnew nil)
    (Ts def-decl "Iform" itlformsemanticsnew nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (Csf const-decl "Iform" itlformsemanticsnew nil))
   687 510 nil nil)))

