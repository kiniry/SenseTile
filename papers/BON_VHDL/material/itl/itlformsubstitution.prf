(itlformsubstitution
 (suform_TCC1 0
  (suform_TCC1-2 nil 3391338633 nil
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved-complete
   ((sizeform const-decl "nat" itlsemanticstype nil)
    (reduce_nat adt-def-decl "[form -> nat]" form_adt nil))
   nil nil nil nil)
  (suform_TCC1-1 nil 3391230329 3391230339
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved
   ((reduce_nat adt-def-decl "[form -> nat]" form_adt nil)
    (sizeform const-decl "nat" itlsemanticstype nil))
   145 110 nil nil))
 (suform_TCC2 0
  (suform_TCC2-2 nil 3391338633 nil
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved-complete
   ((sizeform const-decl "nat" itlsemanticstype nil)
    (reduce_nat adt-def-decl "[form -> nat]" form_adt nil))
   nil nil nil nil)
  (suform_TCC2-1 nil 3391230329 3391230339
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved
   ((reduce_nat adt-def-decl "[form -> nat]" form_adt nil)
    (sizeform const-decl "nat" itlsemanticstype nil))
   118 100 nil nil))
 (suform_TCC3 0
  (suform_TCC3-2 nil 3391338633 nil
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved-complete
   ((sizeform const-decl "nat" itlsemanticstype nil)
    (reduce_nat adt-def-decl "[form -> nat]" form_adt nil))
   nil nil nil nil)
  (suform_TCC3-1 nil 3391230329 3391230339
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved
   ((reduce_nat adt-def-decl "[form -> nat]" form_adt nil)
    (sizeform const-decl "nat" itlsemanticstype nil))
   153 100 nil nil))
 (suform_TCC4 0
  (suform_TCC4-2 nil 3391338633 nil
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved-complete
   ((sizeform const-decl "nat" itlsemanticstype nil)
    (reduce_nat adt-def-decl "[form -> nat]" form_adt nil))
   nil nil nil nil)
  (suform_TCC4-1 nil 3391230329 3391230339
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved
   ((reduce_nat adt-def-decl "[form -> nat]" form_adt nil)
    (sizeform const-decl "nat" itlsemanticstype nil))
   130 110 nil nil))
 (l_sub_form_TCC1 0
  (l_sub_form_TCC1-2 nil 3391338633 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (otype type-decl nil exptype nil) (exp type-decl nil exp_adt nil))
   nil nil nil nil)
  (l_sub_form_TCC1-1 nil 3391230329 3391230339
   ("" (subtype-tcc) nil nil) proved
   ((exp type-decl nil exp_adt nil) (otype type-decl nil exptype nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   61 30 nil nil))
 (l_sub_form 0
  (l_sub_form-2 nil 3391338633 3391491279
   ("" (induct "f1" :name "form_induction")
    (("1" (skosimp*)
      (("1" (expand "bound" 1)
        (("1" (expand "union")
          (("1" (expand "singleton")
            (("1" (expand "member" 1 1)
              (("1" (expand "member" 1 1)
                (("1" (flatten)
                  (("1" (expand "bound" -2)
                    (("1" (expand "union")
                      (("1" (expand "member" -2 2)
                        (("1" (expand "singleton")
                          (("1" (expand "member" -2 2)
                            (("1" (case "t(x!1) = state")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "suform" 3)
                                  (("1"
                                    (expand "M" 3)
                                    (("1"
                                      (expand "semforall")
                                      (("1"
                                        (case "t(FA1_var!1) = state")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (iff)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "val!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "env!1"
                                                       "pe!1"
                                                       "(# infinite := infinite(sigma!1), len := len(sigma!1), seq :=(LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2 (seq(sigma!1)(i)))) #)"
                                                       "x!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (expand
                                                             "sub")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "(LAMBDA (i: index[State]
                                                                                        ((# infinite := infinite(sigma!1),
                                                                                            len := len(sigma!1),
                                                                                            seq :=
                                                                                            (LAMBDA (i:
                                                                                                     index[State]
                                                                                                     (sigma!1)):
                                                                                             (PROJ_1
                                                                                              (seq(sigma!1)(i))
                                                                                              WITH [(v(FA1_var!1))
                                                                                                    := seq(val!1)(i)],
                                                                                              PROJ_2
                                                                                              (seq(sigma!1)(i))))
                                                                                            #))):
                                                                                (PROJ_1(seq(sigma!1)(i))
                                                                                 WITH [(v(FA1_var!1)) := seq(val!1)(i),
                                                                                       (v(x!1)) :=
                                                                                       E(pe!1)(env!1,
                                                                                               (# infinite
                                                                                                  := FALSE,
                                                                                                  len := 0,
                                                                                                  seq :=
                                                                                                  (LAMBDA (x:
                                                                                                           {i_183: nat
                                                                                                           | i_183
                                                                                                           <= 0}):
                                                                                                   (PROJ_1
                                                                                                    (seq(sigma!1)(i
                                                                                                                  + x))
                                                                                                    WITH
                                                                                                    [(v(FA1_var!1))
                                                                                                     :=
                                                                                                     seq(val!1)(i + x)],
                                                                                                    PROJ_2
                                                                                                    (seq(sigma!1)(i
                                                                                                                  + x))))
                                                                                                  #))],
                                                                                 PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State]
                                                                                          ((# infinite :=
                                                                                                infinite(sigma!1),
                                                                                              len := len(sigma!1),
                                                                                              seq :=
                                                                                                (LAMBDA (i:
                                                                                                         index[State]
                                                                                                         (sigma!1)):
                                                                                                   (PROJ_1
                                                                                                      (seq(sigma!1)(i))
                                                                                                      WITH [(v(x!1)) :=
                                                                                                              E(pe!1)(env!1,
                                                                                                                      sub(sigma!1,
                                                                                                                          i, i))],
                                                                                                    PROJ_2
                                                                                                      (seq(sigma!1)(i))))
                                                                                              #))):
                                                                                    (PROJ_1(seq(sigma!1)(i))
                                                                                       WITH [(v(x!1)) :=
                                                                                               E(pe!1)(env!1,
                                                                                                       (# infinite
                                                                                                          := FALSE,
                                                                                                          len := 0,
                                                                                                          seq :=
                                                                                                            (LAMBDA (x:
                                                                                                                     {i_191: nat
                                                                                                                     | i_191
                                                                                                                           <= 0}):
                                                                                                               seq(sigma!1)(i
                                                                                                                                + x))
                                                                                                          #)),
                                                                                             (v(FA1_var!1)) :=
                                                                                               seq(val!1)(i)],
                                                                                     PROJ_2(seq(sigma!1)(i))))")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   2)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case
                                                                       "v(x!1) = v(FA1_var!1)")
                                                                      (("1"
                                                                        (rewrite
                                                                         "exp_vr_extensionality")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (apply-extensionality
                                                                           2
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (case
                                                                             "x!3=v(x!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "l_var_exp")
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "FA1_var!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "pe!1"
                                                                                       "env!1"
                                                                                       "(# infinite := FALSE,
                                                                                           len := 0,
                                                                                           seq :=
                                                                                             (LAMBDA (x: {i_68: nat | i_68 <= 0}):
                                                                                                seq(sigma!1)(x + x!2))
                                                                                           #)"
                                                                                       "FA1_var!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "(# infinite := FALSE,
                                                                                                    len := 0,
                                                                                                    seq :=
                                                                                                      (LAMBDA (x: {i_68: nat | i_68 <= 0}):
                                                                                                         seq(val!1)(x + x!2))
                                                                                                    #)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp
                                                                                             :preds?
                                                                                             t)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp
                                                                                         :preds?
                                                                                         t)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (tcc)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp
                                                                             :preds?
                                                                             t)
                                                                            (("2"
                                                                              (typepred
                                                                               "x!2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp
                                                                             :preds?
                                                                             t)
                                                                            (("3"
                                                                              (typepred
                                                                               "x!2")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp
                                                                       :preds?
                                                                       t)
                                                                      (("2"
                                                                        (typepred
                                                                         "x!2")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp
                                                                       :preds?
                                                                       t)
                                                                      (("3"
                                                                        (typepred
                                                                         "x!2")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (skosimp
                                                                       :preds?
                                                                       t)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("3"
                                                                    (typepred
                                                                     "x!2")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("4"
                                                                    (typepred
                                                                     "x!2")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("5"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -9
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -1 "val!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -6
                                                       "env!1"
                                                       "pe!1"
                                                       "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1 (seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2 (seq(sigma!1)(i)))) #)"
                                                       "x!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (expand
                                                             "sub")
                                                            (("1"
                                                              (case
                                                               "(LAMBDA (i: index[State]
                                                                                           ((# infinite :=
                                                                                                 infinite(sigma!1),
                                                                                               len := len(sigma!1),
                                                                                               seq :=
                                                                                                 (LAMBDA (i:
                                                                                                          index[State]
                                                                                                          (sigma!1)):
                                                                                                    (PROJ_1
                                                                                                       (seq(sigma!1)(i))
                                                                                                       WITH [(v(x!1)) :=
                                                                                                               E(pe!1)(env!1,
                                                                                                                       sub(sigma!1,
                                                                                                                           i, i))],
                                                                                                     PROJ_2
                                                                                                       (seq(sigma!1)(i))))
                                                                                               #))):
                                                                                     (PROJ_1(seq(sigma!1)(i))
                                                                                        WITH [(v(x!1)) :=
                                                                                                E(pe!1)(env!1,
                                                                                                        (# infinite
                                                                                                           := FALSE,
                                                                                                           len := 0,
                                                                                                           seq :=
                                                                                                             (LAMBDA (x:
                                                                                                                      {i_228: nat
                                                                                                                      | i_228
                                                                                                                            <= 0}):
                                                                                                                seq(sigma!1)(i
                                                                                                                                 + x))
                                                                                                           #)),
                                                                                              (v(FA1_var!1)) :=
                                                                                                seq(val!1)(i)],
                                                                                      PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State]
                                                                                         ((# infinite := infinite(sigma!1),
                                                                                             len := len(sigma!1),
                                                                                             seq :=
                                                                                             (LAMBDA (i:
                                                                                                      index[State]
                                                                                                      (sigma!1)):
                                                                                              (PROJ_1
                                                                                               (seq(sigma!1)(i))
                                                                                               WITH [(v(FA1_var!1))
                                                                                                     := seq(val!1)(i)],
                                                                                               PROJ_2
                                                                                               (seq(sigma!1)(i))))
                                                                                             #))):
                                                                                 (PROJ_1(seq(sigma!1)(i))
                                                                                  WITH [(v(FA1_var!1)) := seq(val!1)(i),
                                                                                        (v(x!1)) :=
                                                                                        E(pe!1)(env!1,
                                                                                                (# infinite
                                                                                                   := FALSE,
                                                                                                   len := 0,
                                                                                                   seq :=
                                                                                                   (LAMBDA (x:
                                                                                                            {i_220: nat
                                                                                                            | i_220
                                                                                                            <= 0}):
                                                                                                    (PROJ_1
                                                                                                     (seq(sigma!1)(i
                                                                                                                   + x))
                                                                                                     WITH
                                                                                                     [(v(FA1_var!1))
                                                                                                      :=
                                                                                                      seq(val!1)(i + x)],
                                                                                                     PROJ_2
                                                                                                     (seq(sigma!1)(i
                                                                                                                   + x))))
                                                                                                   #))],
                                                                                  PROJ_2(seq(sigma!1)(i))))")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case
                                                                     "v(x!1)=v(FA1_var!1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "exp_vr_extensionality")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         2
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (case
                                                                           "x!3=v(x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "l_var_exp")
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "pe!1"
                                                                                     "env!1"
                                                                                     "(# infinite := FALSE,
                                                                                         len := 0,
                                                                                         seq :=
                                                                                           (LAMBDA (x: {i_228: nat | i_228 <= 0}):
                                                                                              seq(sigma!1)(x + x!2))
                                                                                         #)"
                                                                                     "FA1_var!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(# infinite := FALSE,
                                                                                               len := 0,
                                                                                               seq :=
                                                                                                 (LAMBDA (x: {i_228: nat | i_228 <= 0}):
                                                                                                    seq(val!1)(x + x!2))
                                                                                               #)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp
                                                                                             :preds?
                                                                                             t)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "x!2")
                                                                                      (("2"
                                                                                        (skosimp
                                                                                         :preds?
                                                                                         t)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp
                                                                           :preds?
                                                                           t)
                                                                          (("2"
                                                                            (typepred
                                                                             "x!2")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp
                                                                           :preds?
                                                                           t)
                                                                          (("3"
                                                                            (typepred
                                                                             "x!2")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("2"
                                                                      (typepred
                                                                       "x!2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("4"
                                                                      (typepred
                                                                       "x!2")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (typepred
                                                                   "x!2")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("5"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -9
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (iff)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "x1!1")
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "(PROJ_1(env!1)
                                                                       WITH
                                                                       [(v(FA1_var!1))
                                                                        := x1!1],
                                                                     PROJ_2(env!1))"
                                                     "pe!1"
                                                     "sigma!1"
                                                     "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (case
                                                           "(LAMBDA (i: index[State] (sigma!1)):
                                                                              (PROJ_1(seq(sigma!1)(i))
                                                                                 WITH [(v(x!1)) :=
                                                                                         E(pe!1)
                                                                                           ((PROJ_1(env!1)
                                                                                               WITH
                                                                                               [(v(FA1_var!1))
                                                                                                := x1!1],
                                                                                             PROJ_2(env!1)),
                                                                                            sub(sigma!1,
                                                                                                i, i))],
                                                                               PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State] (sigma!1)):
                                                                              (PROJ_1(seq(sigma!1)(i))
                                                                                 WITH [(v(x!1)) :=
                                                                                         E(pe!1)(env!1,
                                                                                                 sub(sigma!1,
                                                                                                     i, i))],
                                                                               PROJ_2(seq(sigma!1)(i))))")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             2
                                                             -2
                                                             -1)
                                                            (("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (case
                                                                 "v(x!1)=v(FA1_var!1)")
                                                                (("1"
                                                                  (rewrite
                                                                   "exp_vr_extensionality")
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     2
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case
                                                                       "x!3=v(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "l_var_exp")
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "pe!1"
                                                                                 "env!1"
                                                                                 "sub(sigma!1, x!2, x!2)"
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x1!1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     2
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case
                                                                       "x!3=v(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "l_var_exp")
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "pe!1"
                                                                                 "env!1"
                                                                                 "sub(sigma!1, x!2, x!2)"
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x1!1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp
                                                             :preds?
                                                             t)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "z!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -1 "x1!1")
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "(PROJ_1(env!1)
                                                                       WITH
                                                                       [(v(FA1_var!1))
                                                                        := x1!1],
                                                                     PROJ_2(env!1))"
                                                     "pe!1"
                                                     "sigma!1"
                                                     "x!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -3)
                                                        (("1"
                                                          (case
                                                           "(LAMBDA (i: index[State] (sigma!1)):
                                                                              (PROJ_1(seq(sigma!1)(i))
                                                                                 WITH [(v(x!1)) :=
                                                                                         E(pe!1)(env!1,
                                                                                                 sub(sigma!1,
                                                                                                     i, i))],
                                                                               PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State] (sigma!1)):
                                                                              (PROJ_1(seq(sigma!1)(i))
                                                                                 WITH [(v(x!1)) :=
                                                                                         E(pe!1)
                                                                                           ((PROJ_1(env!1)
                                                                                               WITH
                                                                                               [(v(FA1_var!1))
                                                                                                := x1!1],
                                                                                             PROJ_2(env!1)),
                                                                                            sub(sigma!1,
                                                                                                i, i))],
                                                                               PROJ_2(seq(sigma!1)(i))))")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             2
                                                             3
                                                             -1)
                                                            (("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (case
                                                                   "x!3=v(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "l_var_exp")
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "FA1_var!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "pe!1"
                                                                             "env!1"
                                                                             "sub(sigma!1, x!2, x!2)"
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x1!1")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp
                                                             :preds?
                                                             t)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "z!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "suform" 4)
                                    (("2"
                                      (expand "M" 4)
                                      (("2"
                                        (expand "semforall")
                                        (("2"
                                          (case "t(FA1_var!1) = state")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (iff)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst -1 "val!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "env!1"
                                                         "pe!1"
                                                         "(# infinite := infinite(sigma!1),
                                                                       len := len(sigma!1),
                                                                       seq :=
                                                                         (LAMBDA (i: index[State](sigma!1)):
                                                                            (PROJ_1
                                                                               (seq(sigma!1)(i))
                                                                               WITH
                                                                               [(v(FA1_var!1))
                                                                                := seq(val!1)(i)],
                                                                             PROJ_2
                                                                               (seq(sigma!1)(i))))
                                                                       #)"
                                                         "x!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -5)
                                                            (("1"
                                                              (case
                                                               "PROJ_1(env!1)
                                                                               WITH [(v(x!1)) :=
                                                                                       E(pe!1)(env!1,
                                                                                               (# infinite :=
                                                                                                    infinite(sigma!1),
                                                                                                  len :=
                                                                                                    len(sigma!1),
                                                                                                  seq :=
                                                                                                    (LAMBDA (i: index[State](sigma!1)):
                                                                                                       (PROJ_1
                                                                                                          (seq(sigma!1)(i))
                                                                                                          WITH
                                                                                                          [(v(FA1_var!1))
                                                                                                           := seq(val!1)(i)],
                                                                                                        PROJ_2
                                                                                                          (seq(sigma!1)(i))))
                                                                                                  #))] = PROJ_1(env!1) WITH [(v(x!1)) := E(pe!1)(env!1, sigma!1)]")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case
                                                                     "x!2=v(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "l_var_exp")
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "FA1_var!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "pe!1"
                                                                               "env!1"
                                                                               "sigma!1"
                                                                               "FA1_var!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "val!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -7
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -1 "val!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -5
                                                         "env!1"
                                                         "pe!1"
                                                         "(# infinite := infinite(sigma!1),
                                                                       len := len(sigma!1),
                                                                       seq :=
                                                                         (LAMBDA (i: index[State](sigma!1)):
                                                                            (PROJ_1
                                                                               (seq(sigma!1)(i))
                                                                               WITH
                                                                               [(v(FA1_var!1))
                                                                                := seq(val!1)(i)],
                                                                             PROJ_2
                                                                               (seq(sigma!1)(i))))
                                                                       #)"
                                                         "x!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -5)
                                                            (("1"
                                                              (case
                                                               "PROJ_1(env!1) WITH [(v(x!1)) := E(pe!1)(env!1, sigma!1)] = PROJ_1(env!1)
                                                                               WITH [(v(x!1)) :=
                                                                                       E(pe!1)(env!1,
                                                                                               (# infinite :=
                                                                                                    infinite(sigma!1),
                                                                                                  len :=
                                                                                                    len(sigma!1),
                                                                                                  seq :=
                                                                                                    (LAMBDA (i: index[State](sigma!1)):
                                                                                                       (PROJ_1
                                                                                                          (seq(sigma!1)(i))
                                                                                                          WITH
                                                                                                          [(v(FA1_var!1))
                                                                                                           := seq(val!1)(i)],
                                                                                                        PROJ_2
                                                                                                          (seq(sigma!1)(i))))
                                                                                                  #))]")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3
                                                                 -1)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case
                                                                     "x!2=v(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "l_var_exp")
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "FA1_var!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "pe!1"
                                                                               "env!1"
                                                                               "sigma!1"
                                                                               "FA1_var!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "val!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -7
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (iff)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst -1 "x1!1")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "(PROJ_1(env!1)
                                                                       WITH
                                                                       [(v(FA1_var!1))
                                                                        := x1!1],
                                                                     PROJ_2(env!1))"
                                                       "pe!1"
                                                       "sigma!1"
                                                       "x!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (case
                                                             "PROJ_1(env!1)
                                                                         WITH [(v(FA1_var!1)) := x1!1,
                                                                               (v(x!1)) :=
                                                                                 E(pe!1)
                                                                                   ((PROJ_1(env!1)
                                                                                       WITH
                                                                                       [(v(FA1_var!1))
                                                                                        := x1!1],
                                                                                     PROJ_2(env!1)),
                                                                                    sigma!1)] = PROJ_1(env!1)
                                                                         WITH [(v(x!1)) :=
                                                                                 E(pe!1)(env!1,
                                                                                         sigma!1),
                                                                               (v(FA1_var!1)) := x1!1]")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (case
                                                                 "v(x!1)=v(FA1_var!1)")
                                                                (("1"
                                                                  (rewrite
                                                                   "exp_vr_extensionality")
                                                                  (("1"
                                                                    (case
                                                                     "t(x!1) = static")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -3
                                                                         2
                                                                         6)
                                                                        (("1"
                                                                          (tcc)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     2
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case
                                                                       "x!2=v(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "l_var_exp")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "pe!1"
                                                                                 "env!1"
                                                                                 "sigma!1"
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x1!1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "z!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -1 "x1!1")
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "(PROJ_1(env!1)
                                                                       WITH
                                                                       [(v(FA1_var!1))
                                                                        := x1!1],
                                                                     PROJ_2(env!1))"
                                                       "pe!1"
                                                       "sigma!1"
                                                       "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (case
                                                             "PROJ_1(env!1)
                                                                         WITH [(v(x!1)) :=
                                                                                 E(pe!1)(env!1,
                                                                                         sigma!1),
                                                                               (v(FA1_var!1)) := x1!1] =PROJ_1(env!1)
                                                                         WITH [(v(FA1_var!1)) := x1!1,
                                                                               (v(x!1)) :=
                                                                                 E(pe!1)
                                                                                   ((PROJ_1(env!1)
                                                                                       WITH
                                                                                       [(v(FA1_var!1))
                                                                                        := x1!1],
                                                                                     PROJ_2(env!1)),
                                                                                    sigma!1)]")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3
                                                               -1)
                                                              (("2"
                                                                (case
                                                                 "v(x!1)=v(FA1_var!1)")
                                                                (("1"
                                                                  (rewrite
                                                                   "exp_vr_extensionality")
                                                                  (("1"
                                                                    (case
                                                                     "t(x!1)=static")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -4
                                                                         2
                                                                         6)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (subtype-tcc)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     2
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case
                                                                       "x!2=v(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "l_var_exp")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "pe!1"
                                                                                 "env!1"
                                                                                 "sigma!1"
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x1!1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "z!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "suform")
      (("2" (expand "M") (("2" (propax) nil nil)) nil)) nil)
     ("3" (skosimp*)
      (("3" (expand "suform" 2)
        (("3" (expand "M")
          (("3" (case "t(x!1) = state")
            (("1" (assert)
              (("1" (lemma "l_sub_exp")
                (("1"
                  (inst-cp -1 "etwo1_var!1" "env!1" "pe!1" "sigma!1"
                   "x!1")
                  (("1"
                    (inst -1 "etwo2_var!1" "env!1" "pe!1" "sigma!1"
                     "x!1")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (lemma "l_sub_exp")
                  (("2"
                    (inst-cp -1 "etwo1_var!1" "env!1" "pe!1" "sigma!1"
                     "x!1")
                    (("2"
                      (inst -1 "etwo2_var!1" "env!1" "pe!1" "sigma!1"
                       "x!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "bound" (-2 1))
        (("4" (expand "suform" 2)
          (("4" (expand "M" 2)
            (("4" (expand "semfone")
              (("4" (case "t(x!1) = state")
                (("1" (assert)
                  (("1" (case "fone2_var!1 = tnot")
                    (("1" (assert)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (assert)
                      (("2" (lemma "l_old_new_1")
                        (("2" (inst? -1)
                          (("2" (replace -1 3 rl)
                            (("2" (hide -1)
                              (("2"
                                (lemma "l_old_new_1")
                                (("2"
                                  (inst
                                   -1
                                   "M(fone1_var!1)"
                                   "env!1"
                                   "(# infinite := infinite(sigma!1),
                               len := len(sigma!1),
                               seq
                                 := LAMBDA (i: index[State](sigma!1)):
                                      (PROJ_1(seq(sigma!1)(i))
                                         WITH [(v(x!1))
                                                 := E(pe!1)(env!1, sub(sigma!1, i, i))],
                                       PROJ_2(seq(sigma!1)(i))) #)")
                                  (("1"
                                    (replace -1 3 rl)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "semcsold")
                                        (("1"
                                          (expand "csinner")
                                          (("1"
                                            (iff)
                                            (("1"
                                              (split 3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 1)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst 1 "l!1")
                                                        (("2"
                                                          (case
                                                           "infinite(l!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "i!1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "sub"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "sub"
                                                                         -5)
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "env!1"
                                                                           "pe!1"
                                                                           "(# infinite := FALSE,
                                                                                         len :=
                                                                                         seq(l!1)(1 + i!1)
                                                                                         - seq(l!1)(i!1),
                                                                                         seq :=
                                                                                         (LAMBDA (x: {i: nat | i
                                                                                                  <=
                                                                                                  seq(l!1)(1 + i!1)
                                                                                                  - seq(l!1)(i!1)}):
                                                                                          seq(sigma!1)(x
                                                                                                       + seq(l!1)(i!1)))
                                                                                         #)"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -7)
                                                                              (("1"
                                                                                (expand
                                                                                 "sub")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "infinite(sigma!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "suf")
                                                                    (("1"
                                                                      (inst
                                                                       -6
                                                                       "env!1"
                                                                       "pe!1"
                                                                       "(# infinite := TRUE,
                                                                                                     len := len(sigma!1),
                                                                                                     seq :=
                                                                                                     (LAMBDA (x: {i: nat
                                                                                                              | infinite(sigma!1) or i<=len(sigma!1)}):
                                                                                                      seq(sigma!1)(x
                                                                                                                   +
                                                                                                                   seq(l!1)(len(l!1))))
                                                                                                     #)"
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -6)
                                                                          (("1"
                                                                            (expand
                                                                             "sub")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "i!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "sub"
                                                                               -6)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -8
                                                                                   "env!1"
                                                                                   "pe!1"
                                                                                   "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   i <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  seq(sigma!1)(x + seq(l!1)(i!1)) #)"
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -8)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           *
                                                                                           LR)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sub"
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "sub((# infinite := TRUE,
               len := len(sigma!1),
               seq
                 := LAMBDA (i_1: index[State](sigma!1)):
                      (PROJ_1(seq(sigma!1)(i_1))
                         WITH [(v(x!1))
                                 := E
                                    (pe!1)(env!1, sub(sigma!1, i_1, i_1))],
                       PROJ_2(seq(sigma!1)(i_1))) #),
            seq(l!1)(i!1), seq(l!1)(1 + i!1)) = (# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (i:
                          index
                              [State]((# infinite := FALSE,
                                         len
                                         := seq(l!1)(1 + i!1)
                                            -
                                            seq(l!1)(i!1),
                                         seq
                                         := LAMBDA
                                            (x:
                                             {i: nat |
                                              i
                                              <=
                                              seq(l!1)(1 + i!1)
                                              -
                                              seq(l!1)(i!1)}):
                                            seq(sigma!1)
                                            (x + seq(l!1)(i!1)) #))):
                  (PROJ_1(seq(sigma!1)(i + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_1: {i: nat | i <= 0}):
                                        seq(sigma!1)
                                        (i + x_1 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(i + seq(l!1)(i!1)))) #)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "sub"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "sub"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "suf")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           3)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "sub"
                                                                               -6)
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "env!1"
                                                                                 "pe!1"
                                                                                 "(# infinite := FALSE,
           len := len(sigma!1) - seq(l!1)(len(l!1)),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   i <=
                                    len(sigma!1) - seq(l!1)(len(l!1))}):
                  seq(sigma!1)(x + seq(l!1)(len(l!1))) #)"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -6)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sub")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -5
                                                                                   "i!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -5
                                                                                     "i!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -5
                                                                                     "i!1")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sub"
                                                                                             -7)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -9
                                                                                               "env!1"
                                                                                               "pe!1"
                                                                                               "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   i <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  seq(sigma!1)(x + seq(l!1)(i!1)) #)"
                                                                                               "x!1")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (split
                                                                                                   -9)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "sub"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sub"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sub"
                                                                                                             -7)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 1)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst 1 "l!1")
                                                        (("2"
                                                          (case
                                                           "infinite(l!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "i!1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "sub"
                                                                       -5
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "sub"
                                                                         -5
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "sub"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "env!1"
                                                                             "pe!1"
                                                                             "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   i <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  seq(sigma!1)(x + seq(l!1)(i!1)) #)"
                                                                             "x!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -7)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (i:
                          index
                              [State]((# infinite := FALSE,
                                         len
                                         := seq(l!1)(1 + i!1)
                                            -
                                            seq(l!1)(i!1),
                                         seq
                                         := LAMBDA
                                            (x:
                                             {i: nat |
                                              i
                                              <=
                                              seq(l!1)(1 + i!1)
                                              -
                                              seq(l!1)(i!1)}):
                                            seq(sigma!1)
                                            (x + seq(l!1)(i!1)) #))):
                  (PROJ_1(seq(sigma!1)(i + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  sub((# infinite := FALSE,
                                         len
                                         := seq(l!1)(1 + i!1)
                                            -
                                            seq(l!1)(i!1),
                                         seq
                                         := LAMBDA
                                            (x:
                                             {i: nat |
                                              i
                                              <=
                                              seq(l!1)(1 + i!1)
                                              -
                                              seq(l!1)(i!1)}):
                                            seq(sigma!1)
                                            (x + seq(l!1)(i!1)) #),
                                      i,
                                      i))],
                   PROJ_2(seq(sigma!1)(i + seq(l!1)(i!1)))) #) = (# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x_2:
                          {i: nat |
                                   i <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  (PROJ_1(seq(sigma!1)(x_2 + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_1: {i: nat | i <= 0}):
                                        seq(sigma!1)
                                        (x_1 + x_2 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(x_2 + seq(l!1)(i!1)))) #)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply-extensionality
                                                                                           1
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (apply-extensionality
                                                                                             1
                                                                                             :hide?
                                                                                             t)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sub")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "infinite(sigma!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "suf")
                                                                    (("1"
                                                                      (expand
                                                                       "sub"
                                                                       -3)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "env!1"
                                                                         "pe!1"
                                                                         "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + seq(l!1)(len(l!1))) #)"
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "sub")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "i!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "sub"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "sub"
                                                                                 -6
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "sub"
                                                                                   -6
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -8
                                                                                       "env!1"
                                                                                       "pe!1"
                                                                                       "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   i <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  seq(sigma!1)(x + seq(l!1)(i!1)) #)"
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -8)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sub")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     3)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "suf")
                                                                      (("2"
                                                                        (expand
                                                                         "sub")
                                                                        (("2"
                                                                          (inst
                                                                           -6
                                                                           "env!1"
                                                                           "pe!1"
                                                                           "(# infinite := FALSE,
           len := len(sigma!1) - seq(l!1)(len(l!1)),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   i <=
                                    len(sigma!1) - seq(l!1)(len(l!1))}):
                  seq(sigma!1)(x + seq(l!1)(len(l!1))) #)"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -6)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (expand
                                                                         "sub"
                                                                         1
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "sub"
                                                                           -7
                                                                           1)
                                                                          (("3"
                                                                            (inst
                                                                             -5
                                                                             "i!1")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -9
                                                                                     "env!1"
                                                                                     "pe!1"
                                                                                     "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   i <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  seq(sigma!1)(x + seq(l!1)(i!1)) #)"
                                                                                     "x!1")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (split
                                                                                         -9)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sub"
                                                                                               -7
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sub"
                                                                                                 -7
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp :preds? t) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "fone2_var!1 = tnot")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (flatten)
                        (("2" (lemma "l_old_new_1")
                          (("2" (inst?)
                            (("2" (replace -1 4 rl)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "l_old_new_1")
                                  (("2"
                                    (inst
                                     -1
                                     "M(fone1_var!1)"
                                     "(PROJ_1(env!1) WITH [(v(x!1)) := E(pe!1)(env!1, sigma!1)],
                             PROJ_2(env!1))"
                                     "sigma!1")
                                    (("2"
                                      (replace -1 4 rl)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "semcsold")
                                          (("2"
                                            (expand "csinner")
                                            (("2"
                                              (iff)
                                              (("2"
                                                (split 4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "l!1")
                                                          (("2"
                                                            (case
                                                             "infinite(l!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "i!1")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "env!1"
                                                                         "pe!1"
                                                                         "sub(sigma!1, seq(l!1)(i!1),
                                                                                      seq(l!1)(1 + i!1))"
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               "semstable")
                                                                              (("1"
                                                                                (inst
                                                                                 -8
                                                                                 "env!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -8
                                                                                   "sigma!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "0")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "l_suf")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -9)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -8
                                                                                           "sub(sigma!1,0,seq(l!1)(1 + i!1))")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "seq(l!1)(i!1)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sub")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "suf")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "sub"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "infinite(sigma!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "env!1"
                                                                       "pe!1"
                                                                       "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -5)
                                                                          (("1"
                                                                            (expand
                                                                             "semstable")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "env!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "sigma!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -7
                                                                                   "0")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "l_suf")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -8)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -7
                                                                                         "seq(l!1)(len(l!1))")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -5
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "env!1"
                                                                                 "pe!1"
                                                                                 "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "semstable")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -9
                                                                                         "env!1")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -9
                                                                                           "sigma!1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -10
                                                                                             "0")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "l_suf")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -9
                                                                                                   "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -9
                                                                                                     "seq(l!1)(i!1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sub")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "suf")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -9)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "sub"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "env!1"
                                                                           "pe!1"
                                                                           "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 "semstable")
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "env!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -7
                                                                                     "sigma!1")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -7
                                                                                       "0")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "l_suf")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -7
                                                                                             "seq(l!1)(len(l!1))")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "i!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "env!1"
                                                                                     "pe!1"
                                                                                     "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -8)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "semstable")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -10
                                                                                             "env!1")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -10
                                                                                               "sigma!1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -11
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "l_suf")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -10
                                                                                                       "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -10
                                                                                                         "seq(l!1)(i!1)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sub")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "suf")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -10)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "sub"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "l!1")
                                                          (("2"
                                                            (case
                                                             "infinite(l!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "i!1")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "env!1"
                                                                         "pe!1"
                                                                         "sub(sigma!1, seq(l!1)(i!1),
                                                                                      seq(l!1)(1 + i!1))"
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               "semstable")
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "env!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -7
                                                                                   "sigma!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -8
                                                                                     "0")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "l_suf")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -7
                                                                                           "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -7
                                                                                             "seq(l!1)(i!1)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sub")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "suf")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "sub"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "infinite(sigma!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "env!1"
                                                                       "pe!1"
                                                                       "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "semstable")
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "env!1")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "sigma!1")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -7
                                                                                 "0")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "l_suf")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -8)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -7
                                                                                       "seq(l!1)(len(l!1))")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -7)
                                                                                        (("1"
                                                                                          (split
                                                                                           -5)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -5
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "env!1"
                                                                                 "pe!1"
                                                                                 "sub(sigma!1, seq(l!1)(i!1),
                                                                                                  seq(l!1)(1 + i!1))"
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "semstable")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -8
                                                                                         "env!1")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -8
                                                                                           "sigma!1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -9
                                                                                             "0")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "l_suf")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -8
                                                                                                   "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -8
                                                                                                     "seq(l!1)(i!1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sub")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "suf")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "sub"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "env!1"
                                                                           "pe!1"
                                                                           "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 "semstable")
                                                                                (("1"
                                                                                  (inst
                                                                                   -6
                                                                                   "env!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -6
                                                                                     "sigma!1")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -6
                                                                                       "0")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "l_suf")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -6
                                                                                             "seq(l!1)(len(l!1))")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "i!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "env!1"
                                                                                     "pe!1"
                                                                                     "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -8)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "semstable")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -9
                                                                                             "env!1")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -9
                                                                                               "sigma!1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -10
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "l_suf")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -9
                                                                                                       "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -9
                                                                                                         "seq(l!1)(i!1)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sub")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "suf")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -9)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "sub"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (expand "bound" (1 -3))
        (("5" (expand "union")
          (("5" (expand "member" 1 1)
            (("5" (expand "member" -3 2)
              (("5" (flatten)
                (("5" (expand "suform" 3)
                  (("5" (expand "M" 3)
                    (("5" (expand "semftwo")
                      (("5" (case "t(x!1)=state")
                        (("1" (assert)
                          (("1" (case "ftwo3_var!1 = tchop")
                            (("1" (assert)
                              (("1"
                                (expand "^^")
                                (("1"
                                  (iff)
                                  (("1"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst 1 "m!1")
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (expand "sub" 1 1)
                                                (("1"
                                                  (expand "sub" 1 1)
                                                  (("1"
                                                    (expand "sub")
                                                    (("1"
                                                      (hide 2 -6)
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "env!1"
                                                         "pe!1"
                                                         "(# infinite := FALSE,
                                                                                     len := m!1,
                                                                                     seq :=
                                                                                       (LAMBDA (x: {i: nat | i
                                                                                                      <= m!1}):
                                                                                          seq(sigma!1)(x))
                                                                                     #)"
                                                         "x!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -5)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -7
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("2"
                                                            (typepred
                                                             "m!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2 -5)
                                                (("2"
                                                  (expand "suf")
                                                  (("2"
                                                    (expand "sub")
                                                    (("2"
                                                      (case
                                                       "infinite(sigma!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "env!1"
                                                           "pe!1"
                                                           "(# infinite := TRUE,
                                                                                           len := len(sigma!1),
                                                                                           seq :=
                                                                                             (LAMBDA (x: {i: nat
                                                                                                      | infinite(sigma!1) or i<=len(sigma!1)}):
                                                                                                seq(sigma!1)(x
                                                                                                                 + m!1))
                                                                                           #)"
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "(# infinite := TRUE,
                                                         len := len(sigma!1),
                                                         seq
                                                           := LAMBDA (i:
                                                                        index[State]((# infinite := TRUE,
                                                                                        len := len(sigma!1),
                                                                                        seq
                                                                                        := (LAMBDA
                                                                                            (x:
                                                                                             {i: nat |
                                                                                              infinite(sigma!1)
                                                                                              OR
                                                                                              i <= len(sigma!1)}):
                                                                                            seq(sigma!1)(x + m!1)) #))):
                                                                (PROJ_1(seq(sigma!1)(i + m!1))
                                                                   WITH [(v(x!1))
                                                                           := E(pe!1)
                                                                               (env!1,
                                                                                (# infinite := FALSE,
                                                                                   len := 0,
                                                                                   seq
                                                                                   := LAMBDA
                                                                                      (x_947: {i_944: nat | i_944 <= 0}):
                                                                                      seq(sigma!1)(i + x_947 + m!1) #))],
                                                                 PROJ_2(seq(sigma!1)(i + m!1))) #) = (# infinite := TRUE,
                                                         len := len(sigma!1),
                                                         seq
                                                           := LAMBDA (x:
                                                                        {i_934: nat |
                                                                                 infinite(sigma!1) OR
                                                                                  i_934 <= len(sigma!1)}):
                                                                (PROJ_1(seq(sigma!1)(x + m!1))
                                                                   WITH [(v(x!1))
                                                                           := E(pe!1)
                                                                               (env!1,
                                                                                (# infinite := FALSE,
                                                                                   len := 0,
                                                                                   seq
                                                                                   := LAMBDA
                                                                                      (x_939: {i: nat | i <= 0}):
                                                                                      seq(sigma!1)(x + x_939 + m!1) #))],
                                                                 PROJ_2(seq(sigma!1)(x + m!1))) #)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "z!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -5
                                                           "env!1"
                                                           "pe!1"
                                                           "(# infinite := FALSE,
                                                                                           len := len(sigma!1) - m!1,
                                                                                           seq :=
                                                                                             (LAMBDA (x: {i: nat | i
                                                                                                            <= len(sigma!1)
                                                                                                              - m!1}):
                                                                                                seq(sigma!1)(x
                                                                                                                 + m!1))
                                                                                           #)"
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -5)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -7
                                                                   "z!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "m!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -8 "z!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst 1 "m!1")
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (inst
                                                 -5
                                                 "env!1"
                                                 "pe!1"
                                                 "sub(sigma!1, 0, m!1)"
                                                 "x!1")
                                                (("1"
                                                  (hide -6)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -5)
                                                      (("1"
                                                        (expand
                                                         "sub"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "sub"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "sub"
                                                             1
                                                             1)
                                                            (("1"
                                                              (case
                                                               "(# infinite := FALSE,
           len := m!1,
           seq
             := LAMBDA (x: {i_1: nat | i_1 <= m!1}):
                  (PROJ_1(seq(sigma!1)(x))
                     WITH [(v(x!1)) := E(pe!1)(env!1, sub(sigma!1, x, x))],
                   PROJ_2(seq(sigma!1)(x))) #) = (# infinite := FALSE,
           len := m!1,
           seq
             := LAMBDA (i_1: index[State](sub(sigma!1, 0, m!1))):
                  (PROJ_1(seq(sub(sigma!1, 0, m!1))(i_1))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  sub(sub(sigma!1, 0, m!1), i_1, i_1))],
                   PROJ_2(seq(sub(sigma!1, 0, m!1))(i_1))) #)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (expand
                                                                     "sub"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "sub"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "sub"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "sub"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "sub"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "sub"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "sub"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "sub"
                                                                     1
                                                                     1)
                                                                    (("3"
                                                                      (expand
                                                                       "sub"
                                                                       1
                                                                       1)
                                                                      (("3"
                                                                        (skosimp
                                                                         :preds?
                                                                         t)
                                                                        (("3"
                                                                          (expand
                                                                           "sub"
                                                                           -1)
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("4"
                                                                      (assert)
                                                                      (("4"
                                                                        (typepred
                                                                         "m!1")
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("5"
                                                                      (typepred
                                                                       "m!1")
                                                                      (("5"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "sub"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "sub"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "sub"
                                                                   1
                                                                   1)
                                                                  (("3"
                                                                    (expand
                                                                     "sub"
                                                                     1
                                                                     1)
                                                                    (("3"
                                                                      (skosimp
                                                                       :preds?
                                                                       t)
                                                                      (("3"
                                                                        (expand
                                                                         "sub"
                                                                         -1)
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("4"
                                                                    (typepred
                                                                     "m!1")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("5"
                                                                    (typepred
                                                                     "m!1")
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "sub"
                                                                 1
                                                                 1)
                                                                (("3"
                                                                  (expand
                                                                   "sub"
                                                                   1
                                                                   1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "sub"
                                                                 1
                                                                 1)
                                                                (("4"
                                                                  (expand
                                                                   "sub"
                                                                   1
                                                                   1)
                                                                  (("4"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("4"
                                                                      (expand
                                                                       "sub"
                                                                       -1)
                                                                      (("4"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("5"
                                                                  (typepred
                                                                   "m!1")
                                                                  (("5"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("6"
                                                                  (typepred
                                                                   "m!1")
                                                                  (("6"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           -7
                                                           "z!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -5)
                                                (("2"
                                                  (inst
                                                   -5
                                                   "env!1"
                                                   "pe!1"
                                                   "suf(sigma!1, m!1)"
                                                   "x!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -5)
                                                      (("1"
                                                        (expand
                                                         "suf"
                                                         -2)
                                                        (("1"
                                                          (expand
                                                           "suf"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "infinite(sigma!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "sub"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "sub"
                                                                     -3)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i_1: nat |
                                   infinite(sigma!1) OR
                                    i_1 <= len(sigma!1)}):
                  (PROJ_1(seq(sigma!1)(x + m!1))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_1: {i: nat | i <= 0}):
                                        seq(sigma!1)(x + x_1 + m!1) #))],
                   PROJ_2(seq(sigma!1)(x + m!1))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (i_1: index[State](suf(sigma!1, m!1))):
                  (seq(sigma!1)(i_1 + m!1)`1
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_1: {i: nat | i <= 0}):
                                        seq(sigma!1)(i_1 + x_1 + m!1) #))],
                   seq(sigma!1)(i_1 + m!1)`2) #)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply-extensionality
                                                                           1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (apply-extensionality
                                                                             1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (expand
                                                                               "suf"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "suf"
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "suf"
                                                                           1)
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "sub"
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "sub"
                                                                     -2)
                                                                    (("2"
                                                                      (case
                                                                       "(# infinite := FALSE,
           len := len(sigma!1) - m!1,
           seq
             := LAMBDA (i_1: index[State](suf(sigma!1, m!1))):
                  (seq(sigma!1)(i_1 + m!1)`1
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_1: {i: nat | i <= 0}):
                                        seq(sigma!1)(i_1 + x_1 + m!1) #))],
                   seq(sigma!1)(i_1 + m!1)`2) #) = (# infinite := FALSE,
           len := len(sigma!1) - m!1,
           seq
             := LAMBDA (x: {i_1: nat | i_1 <= len(sigma!1) - m!1}):
                  (PROJ_1(seq(sigma!1)(x + m!1))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_1: {i: nat | i <= 0}):
                                        seq(sigma!1)(x + x_1 + m!1) #))],
                   PROJ_2(seq(sigma!1)(x + m!1))) #)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply-extensionality
                                                                         1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (expand
                                                                             "suf"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp
                                                                             :preds?
                                                                             t)
                                                                            (("2"
                                                                              (expand
                                                                               "suf"
                                                                               -1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "m!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp
                                                                             :preds?
                                                                             t)
                                                                            (("3"
                                                                              (expand
                                                                               "suf"
                                                                               -1)
                                                                              (("3"
                                                                                (typepred
                                                                                 "m!1")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "suf"
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp
                                                                           :preds?
                                                                           t)
                                                                          (("3"
                                                                            (expand
                                                                             "suf"
                                                                             -1)
                                                                            (("3"
                                                                              (typepred
                                                                               "m!1")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (skosimp
                                                                           :preds?
                                                                           t)
                                                                          (("4"
                                                                            (expand
                                                                             "suf"
                                                                             -1)
                                                                            (("4"
                                                                              (typepred
                                                                               "m!1")
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "suf"
                                                                         1)
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skosimp
                                                                         :preds?
                                                                         t)
                                                                        (("4"
                                                                          (expand
                                                                           "suf"
                                                                           -1)
                                                                          (("4"
                                                                            (typepred
                                                                             "m!1")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (skosimp
                                                                         :preds?
                                                                         t)
                                                                        (("5"
                                                                          (typepred
                                                                           "m!1")
                                                                          (("5"
                                                                            (assert)
                                                                            (("5"
                                                                              (expand
                                                                               "suf"
                                                                               -2)
                                                                              (("5"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           -7
                                                           "z!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 1)
                                              (("2"
                                                (hide -6)
                                                (("2"
                                                  (inst
                                                   -5
                                                   "env!1"
                                                   "pe!1"
                                                   "sigma!1"
                                                   "x!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst -7 "z!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst?)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -2)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (case "ftwo3_var!1 = tand")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (case
                                               "ftwo3_var!1 = tor")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case
                                                 "ftwo3_var!1 = timpl")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (inst -5 "z!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (inst -5 "z!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (case "ftwo3_var!1 = tchop")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "^^")
                                  (("1"
                                    (iff)
                                    (("1"
                                      (split 4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst 1 "m!1")
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (hide 2 -5)
                                                  (("1"
                                                    (inst
                                                     -4
                                                     "env!1"
                                                     "pe!1"
                                                     "sub(sigma!1, 0, m!1)"
                                                     "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -4)
                                                        (("1"
                                                          (expand
                                                           "semstable")
                                                          (("1"
                                                            (hide -4)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "env!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -5
                                                                 "sigma!1")
                                                                (("1"
                                                                  (inst
                                                                   -6
                                                                   "0")
                                                                  (("1"
                                                                    (rewrite
                                                                     "l_suf")
                                                                    (("1"
                                                                      (replace
                                                                       -6)
                                                                      (("1"
                                                                        (inst
                                                                         -5
                                                                         "sub(sigma!1, 0, m!1)")
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "sub")
                                                                            (("1"
                                                                              (expand
                                                                               "suf")
                                                                              (("1"
                                                                                (replace
                                                                                 -5)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "sub"
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (hide -5)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2 -4 -1)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "env!1"
                                                         "pe!1"
                                                         "suf(sigma!1, m!1)"
                                                         "x!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -2)
                                                            (("1"
                                                              (expand
                                                               "semstable")
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "env!1")
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "sigma!1")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -4
                                                                     "0")
                                                                    (("1"
                                                                      (rewrite
                                                                       "l_suf")
                                                                      (("1"
                                                                        (replace
                                                                         -5)
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "m!1")
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 1 -3 -5)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -5 "z!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst 1 "m!1")
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (hide 2 -5 -3)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "env!1"
                                                     "pe!1"
                                                     "sub(sigma!1, 0, m!1)"
                                                     "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (expand
                                                           "semstable")
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "env!1")
                                                            (("1"
                                                              (inst-cp
                                                               -4
                                                               "sigma!1")
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "0")
                                                                (("1"
                                                                  (rewrite
                                                                   "l_suf")
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "sub(sigma!1, 0, m!1)")
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "sub")
                                                                          (("1"
                                                                            (expand
                                                                             "suf")
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "sub"
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "z!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2 -3 -4)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "env!1"
                                                       "pe!1"
                                                       "suf(sigma!1, m!1)"
                                                       "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -3)
                                                          (("1"
                                                            (expand
                                                             "semstable")
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "env!1")
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "sigma!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -4
                                                                   "0")
                                                                  (("1"
                                                                    (rewrite
                                                                     "l_suf")
                                                                    (("1"
                                                                      (replace
                                                                       -5)
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "m!1")
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 1 -5 -3)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -5 "z!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (case
                                                 "ftwo3_var!1 = tand")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (case
                                                   "ftwo3_var!1 = tor")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "ftwo3_var!1 = timpl")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (inst -4 "z!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst -4 "z!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t) nil nil))
    nil)
   proved
   ((index type-eq-decl nil sequ nil)
    (freeexp def-decl "setof[(vr?)]" itlexpfree nil)
    (bound def-decl "setof[(vr?)]" itlformbound nil)
    (setof type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (t adt-accessor-decl "[(vr?) -> vrtype]" exp_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vrtype type-decl nil exptype nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (otype type-decl nil exptype nil) (exp type-decl nil exp_adt nil)
    (form type-decl nil form_adt nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (suform def-decl "form" itlformsubstitution nil)
    (E def-decl "Value" itlexpsemantics nil)
    (sequ type-eq-decl nil sequ nil) (index2 type-eq-decl nil sequ nil)
    (sub const-decl "sequ" sequ nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (semstable const-decl "bool" itlexpsemantics nil)
    (form_induction formula-decl nil form_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (static? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (static adt-constructor-decl "(static?)" exptype nil)
    (val!1 skolem-const-decl "IIValue" itlformsubstitution nil)
    (val!1 skolem-const-decl "IIValue" itlformsubstitution nil)
    (x!2 skolem-const-decl "index
    [State]((# infinite := infinite(sigma!1),
               len := len(sigma!1),
               seq
                 := (LAMBDA (i: index[State](sigma!1)):
                       (PROJ_1(seq(sigma!1)(i))
                          WITH [(v(x!1))
                                  := E(pe!1)(env!1, sub(sigma!1, i, i))],
                        PROJ_2(seq(sigma!1)(i)))) #))"
     itlformsubstitution nil)
    (pe!1 skolem-const-decl "pexp" itlformsubstitution nil)
    (env!1 skolem-const-decl "SState" itlformsubstitution nil)
    (x!1 skolem-const-decl "(vr?)" itlformsubstitution nil)
    (val!1 skolem-const-decl "IIValue" itlformsubstitution nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (FALSE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FA1_var!1 skolem-const-decl "(vr?)" itlformsubstitution nil)
    (l_var_exp formula-decl nil itlhelplemma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!2 skolem-const-decl "index
    [State]((# infinite := infinite(sigma!1),
               len := len(sigma!1),
               seq
                 := (LAMBDA (i: index[State](sigma!1)):
                       (PROJ_1(seq(sigma!1)(i))
                          WITH [(v(FA1_var!1)) := seq(val!1)(i)],
                        PROJ_2(seq(sigma!1)(i)))) #))"
     itlformsubstitution nil)
    (exp_vr_extensionality formula-decl nil exp_adt nil)
    (val!1 skolem-const-decl "IIValue" itlformsubstitution nil)
    (sigma!1 skolem-const-decl "Interval" itlformsubstitution nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (semforall const-decl "bool" itlformsemanticsnew nil)
    (union const-decl "set" sets nil)
    (l_sub_exp formula-decl nil itlexpsubstitution nil)
    (fotype type-decl nil formtypes nil)
    (tnot? adt-recognizer-decl "[fotype -> boolean]" formtypes nil)
    (tnot adt-constructor-decl "(tnot?)" formtypes nil)
    (l_old_new_1 formula-decl nil itlformsemanticsfixpoints nil)
    (semcsold const-decl "bool" itlformsemanticsfixpoints nil)
    (l!1 skolem-const-decl "ninterval" itlformsubstitution nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (suf const-decl "sequ" sequ nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (csinner const-decl "bool" itlformsemanticsfixpoints nil)
    (sigma!1 skolem-const-decl "Interval" itlformsubstitution nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (l!1 skolem-const-decl "ninterval" itlformsubstitution nil)
    (i!1 skolem-const-decl "nat" itlformsubstitution nil)
    (l_suf formula-decl nil sequ nil)
    (i!1 skolem-const-decl "nat" itlformsubstitution nil)
    (i!1 skolem-const-decl "nat" itlformsubstitution nil)
    (l!1 skolem-const-decl "ninterval" itlformsubstitution nil)
    (i!1 skolem-const-decl "nat" itlformsubstitution nil)
    (i!1 skolem-const-decl "nat" itlformsubstitution nil)
    (i!1 skolem-const-decl "nat" itlformsubstitution nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (fttype type-decl nil formtypes nil)
    (tchop? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (tchop adt-constructor-decl "(tchop?)" formtypes nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (sigma!1 skolem-const-decl "Interval" itlformsubstitution nil)
    (m!1 skolem-const-decl "index[State](sigma!1)" itlformsubstitution
     nil)
    (pe!1 skolem-const-decl "pexp" itlformsubstitution nil)
    (env!1 skolem-const-decl "SState" itlformsubstitution nil)
    (x!1 skolem-const-decl "(vr?)" itlformsubstitution nil)
    (m!1 skolem-const-decl "index
    [State]((# infinite := infinite(sigma!1),
               len := len(sigma!1),
               seq
                 := LAMBDA (i: index[State](sigma!1)):
                      (PROJ_1(seq(sigma!1)(i))
                         WITH [(v(x!1))
                                 := E(pe!1)(env!1, sub(sigma!1, i, i))],
                       PROJ_2(seq(sigma!1)(i))) #))"
     itlformsubstitution nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (tand? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (tand adt-constructor-decl "(tand?)" formtypes nil)
    (timpl? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (timpl adt-constructor-decl "(timpl?)" formtypes nil)
    (tor adt-constructor-decl "(tor?)" formtypes nil)
    (tor? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (m!1 skolem-const-decl "index[State](sigma!1)" itlformsubstitution
     nil)
    (m!1 skolem-const-decl "index[State](sigma!1)" itlformsubstitution
     nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil))
   1931643 33880 t nil)
  (l_sub_form-1 nil 3391230329 3391230557
   ("" (induct "f1" :name "form_induction")
    (("1" (skosimp*)
      (("1" (expand "bound" 1)
        (("1" (expand "union")
          (("1" (expand "singleton")
            (("1" (expand "member" 1 1)
              (("1" (expand "member" 1 1)
                (("1" (flatten)
                  (("1" (expand "bound" -2)
                    (("1" (expand "union")
                      (("1" (expand "member" -2 2)
                        (("1" (expand "singleton")
                          (("1" (expand "member" -2 2)
                            (("1" (case "t(x!1) = state")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "suform" 3)
                                  (("1"
                                    (expand "M" 3)
                                    (("1"
                                      (expand "semforall")
                                      (("1"
                                        (case "t(FA1_var!1) = state")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (iff)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "val!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "env!1"
                                                       "pe!1"
                                                       "(# infinite := infinite(sigma!1), len := len(sigma!1), seq :=(LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2 (seq(sigma!1)(i)))) #)"
                                                       "x!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (expand
                                                             "sub")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "(LAMBDA (i: index[State]
                                                  ((# infinite := infinite(sigma!1),
                                                      len := len(sigma!1),
                                                      seq :=
                                                      (LAMBDA (i:
                                                               index[State]
                                                               (sigma!1)):
                                                       (PROJ_1
                                                        (seq(sigma!1)(i))
                                                        WITH [(v(FA1_var!1))
                                                              := seq(val!1)(i)],
                                                        PROJ_2
                                                        (seq(sigma!1)(i))))
                                                      #))):
                                          (PROJ_1(seq(sigma!1)(i))
                                           WITH [(v(FA1_var!1)) := seq(val!1)(i),
                                                 (v(x!1)) :=
                                                 E(pe!1)(env!1,
                                                         (# infinite
                                                            := FALSE,
                                                            len := 0,
                                                            seq :=
                                                            (LAMBDA (x:
                                                                     {i_183: nat
                                                                     | i_183
                                                                     <= 0}):
                                                             (PROJ_1
                                                              (seq(sigma!1)(i
                                                                            + x))
                                                              WITH
                                                              [(v(FA1_var!1))
                                                               :=
                                                               seq(val!1)(i + x)],
                                                              PROJ_2
                                                              (seq(sigma!1)(i
                                                                            + x))))
                                                            #))],
                                           PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State]
                                                    ((# infinite :=
                                                          infinite(sigma!1),
                                                        len := len(sigma!1),
                                                        seq :=
                                                          (LAMBDA (i:
                                                                   index[State]
                                                                   (sigma!1)):
                                                             (PROJ_1
                                                                (seq(sigma!1)(i))
                                                                WITH [(v(x!1)) :=
                                                                        E(pe!1)(env!1,
                                                                                sub(sigma!1,
                                                                                    i, i))],
                                                              PROJ_2
                                                                (seq(sigma!1)(i))))
                                                        #))):
                                              (PROJ_1(seq(sigma!1)(i))
                                                 WITH [(v(x!1)) :=
                                                         E(pe!1)(env!1,
                                                                 (# infinite
                                                                    := FALSE,
                                                                    len := 0,
                                                                    seq :=
                                                                      (LAMBDA (x:
                                                                               {i_191: nat
                                                                               | i_191
                                                                                     <= 0}):
                                                                         seq(sigma!1)(i
                                                                                          + x))
                                                                    #)),
                                                       (v(FA1_var!1)) :=
                                                         seq(val!1)(i)],
                                               PROJ_2(seq(sigma!1)(i))))")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   2)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case
                                                                       "v(x!1) = v(FA1_var!1)")
                                                                      (("1"
                                                                        (rewrite
                                                                         "exp_vr_extensionality")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (apply-extensionality
                                                                           2
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (case
                                                                             "x!3=v(x!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "l_var_exp")
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "FA1_var!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "pe!1"
                                                                                       "env!1"
                                                                                       "(# infinite := FALSE,
                                           len := 0,
                                           seq :=
                                             (LAMBDA (x: {i_68: nat | i_68 <= 0}):
                                                seq(sigma!1)(x + x!2))
                                           #)"
                                                                                       "FA1_var!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "(# infinite := FALSE,
                                                len := 0,
                                                seq :=
                                                  (LAMBDA (x: {i_68: nat | i_68 <= 0}):
                                                     seq(val!1)(x + x!2))
                                                #)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp
                                                                                             :preds?
                                                                                             t)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp
                                                                                         :preds?
                                                                                         t)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (tcc)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp
                                                                             :preds?
                                                                             t)
                                                                            (("2"
                                                                              (typepred
                                                                               "x!2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp
                                                                             :preds?
                                                                             t)
                                                                            (("3"
                                                                              (typepred
                                                                               "x!2")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (typepred
                                                                             "x!2")
                                                                            (("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp
                                                                       :preds?
                                                                       t)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp
                                                                       :preds?
                                                                       t)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (skosimp
                                                                       :preds?
                                                                       t)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("5"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -9
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -1 "val!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -6
                                                       "env!1"
                                                       "pe!1"
                                                       "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1 (seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2 (seq(sigma!1)(i)))) #)"
                                                       "x!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (expand
                                                             "sub")
                                                            (("1"
                                                              (case
                                                               "(LAMBDA (i: index[State]
                                                     ((# infinite :=
                                                           infinite(sigma!1),
                                                         len := len(sigma!1),
                                                         seq :=
                                                           (LAMBDA (i:
                                                                    index[State]
                                                                    (sigma!1)):
                                                              (PROJ_1
                                                                 (seq(sigma!1)(i))
                                                                 WITH [(v(x!1)) :=
                                                                         E(pe!1)(env!1,
                                                                                 sub(sigma!1,
                                                                                     i, i))],
                                                               PROJ_2
                                                                 (seq(sigma!1)(i))))
                                                         #))):
                                               (PROJ_1(seq(sigma!1)(i))
                                                  WITH [(v(x!1)) :=
                                                          E(pe!1)(env!1,
                                                                  (# infinite
                                                                     := FALSE,
                                                                     len := 0,
                                                                     seq :=
                                                                       (LAMBDA (x:
                                                                                {i_228: nat
                                                                                | i_228
                                                                                      <= 0}):
                                                                          seq(sigma!1)(i
                                                                                           + x))
                                                                     #)),
                                                        (v(FA1_var!1)) :=
                                                          seq(val!1)(i)],
                                                PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State]
                                                   ((# infinite := infinite(sigma!1),
                                                       len := len(sigma!1),
                                                       seq :=
                                                       (LAMBDA (i:
                                                                index[State]
                                                                (sigma!1)):
                                                        (PROJ_1
                                                         (seq(sigma!1)(i))
                                                         WITH [(v(FA1_var!1))
                                                               := seq(val!1)(i)],
                                                         PROJ_2
                                                         (seq(sigma!1)(i))))
                                                       #))):
                                           (PROJ_1(seq(sigma!1)(i))
                                            WITH [(v(FA1_var!1)) := seq(val!1)(i),
                                                  (v(x!1)) :=
                                                  E(pe!1)(env!1,
                                                          (# infinite
                                                             := FALSE,
                                                             len := 0,
                                                             seq :=
                                                             (LAMBDA (x:
                                                                      {i_220: nat
                                                                      | i_220
                                                                      <= 0}):
                                                              (PROJ_1
                                                               (seq(sigma!1)(i
                                                                             + x))
                                                               WITH
                                                               [(v(FA1_var!1))
                                                                :=
                                                                seq(val!1)(i + x)],
                                                               PROJ_2
                                                               (seq(sigma!1)(i
                                                                             + x))))
                                                             #))],
                                            PROJ_2(seq(sigma!1)(i))))")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case
                                                                     "v(x!1)=v(FA1_var!1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "exp_vr_extensionality")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (apply-extensionality
                                                                         2
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (case
                                                                           "x!3=v(x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "l_var_exp")
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "pe!1"
                                                                                     "env!1"
                                                                                     "(# infinite := FALSE,
                                         len := 0,
                                         seq :=
                                           (LAMBDA (x: {i_228: nat | i_228 <= 0}):
                                              seq(sigma!1)(x + x!2))
                                         #)"
                                                                                     "FA1_var!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(# infinite := FALSE,
                                           len := 0,
                                           seq :=
                                             (LAMBDA (x: {i_228: nat | i_228 <= 0}):
                                                seq(val!1)(x + x!2))
                                           #)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp
                                                                                             :preds?
                                                                                             t)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "x!2")
                                                                                      (("2"
                                                                                        (skosimp
                                                                                         :preds?
                                                                                         t)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (tcc)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp
                                                                           :preds?
                                                                           t)
                                                                          (("2"
                                                                            (typepred
                                                                             "x!2")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (typepred
                                                                               "x!2")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (skosimp
                                                                           :preds?
                                                                           t)
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (typepred
                                                                               "x!2")
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("5"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -9
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (iff)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "x1!1")
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "(PROJ_1(env!1)
                                                   WITH
                                                   [(v(FA1_var!1))
                                                    := x1!1],
                                                 PROJ_2(env!1))"
                                                     "pe!1"
                                                     "sigma!1"
                                                     "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (case
                                                           "(LAMBDA (i: index[State] (sigma!1)):
                                            (PROJ_1(seq(sigma!1)(i))
                                               WITH [(v(x!1)) :=
                                                       E(pe!1)
                                                         ((PROJ_1(env!1)
                                                             WITH
                                                             [(v(FA1_var!1))
                                                              := x1!1],
                                                           PROJ_2(env!1)),
                                                          sub(sigma!1,
                                                              i, i))],
                                             PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State] (sigma!1)):
                                            (PROJ_1(seq(sigma!1)(i))
                                               WITH [(v(x!1)) :=
                                                       E(pe!1)(env!1,
                                                               sub(sigma!1,
                                                                   i, i))],
                                             PROJ_2(seq(sigma!1)(i))))")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             2
                                                             -2
                                                             -1)
                                                            (("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (case
                                                                 "v(x!1)=v(FA1_var!1)")
                                                                (("1"
                                                                  (rewrite
                                                                   "exp_vr_extensionality")
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     2
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case
                                                                       "x!3=v(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "l_var_exp")
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "pe!1"
                                                                                 "env!1"
                                                                                 "sub(sigma!1, x!2, x!2)"
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x1!1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "x!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (typepred
                                                                         "x!2")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     2
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case
                                                                       "x!3=v(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "l_var_exp")
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "pe!1"
                                                                                 "env!1"
                                                                                 "sub(sigma!1, x!2, x!2)"
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x1!1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "x!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (typepred
                                                                         "x!2")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp
                                                             :preds?
                                                             t)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "z!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -1 "x1!1")
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "(PROJ_1(env!1)
                                                   WITH
                                                   [(v(FA1_var!1))
                                                    := x1!1],
                                                 PROJ_2(env!1))"
                                                     "pe!1"
                                                     "sigma!1"
                                                     "x!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -3)
                                                        (("1"
                                                          (case
                                                           "(LAMBDA (i: index[State] (sigma!1)):
                                            (PROJ_1(seq(sigma!1)(i))
                                               WITH [(v(x!1)) :=
                                                       E(pe!1)(env!1,
                                                               sub(sigma!1,
                                                                   i, i))],
                                             PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State] (sigma!1)):
                                            (PROJ_1(seq(sigma!1)(i))
                                               WITH [(v(x!1)) :=
                                                       E(pe!1)
                                                         ((PROJ_1(env!1)
                                                             WITH
                                                             [(v(FA1_var!1))
                                                              := x1!1],
                                                           PROJ_2(env!1)),
                                                          sub(sigma!1,
                                                              i, i))],
                                             PROJ_2(seq(sigma!1)(i))))")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             2
                                                             3
                                                             -1)
                                                            (("2"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (case
                                                                   "x!3=v(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "l_var_exp")
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "FA1_var!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "pe!1"
                                                                             "env!1"
                                                                             "sub(sigma!1, x!2, x!2)"
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x1!1")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (typepred
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (typepred
                                                                     "x!2")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp
                                                             :preds?
                                                             t)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "z!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "suform" 4)
                                    (("2"
                                      (expand "M" 4)
                                      (("2"
                                        (expand "semforall")
                                        (("2"
                                          (case "t(FA1_var!1) = state")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (iff)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst -1 "val!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "env!1"
                                                         "pe!1"
                                                         "(# infinite := infinite(sigma!1),
                                                   len := len(sigma!1),
                                                   seq :=
                                                     (LAMBDA (i: index[State](sigma!1)):
                                                        (PROJ_1
                                                           (seq(sigma!1)(i))
                                                           WITH
                                                           [(v(FA1_var!1))
                                                            := seq(val!1)(i)],
                                                         PROJ_2
                                                           (seq(sigma!1)(i))))
                                                   #)"
                                                         "x!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -5)
                                                            (("1"
                                                              (case
                                                               "PROJ_1(env!1)
                                         WITH [(v(x!1)) :=
                                                 E(pe!1)(env!1,
                                                         (# infinite :=
                                                              infinite(sigma!1),
                                                            len :=
                                                              len(sigma!1),
                                                            seq :=
                                                              (LAMBDA (i: index[State](sigma!1)):
                                                                 (PROJ_1
                                                                    (seq(sigma!1)(i))
                                                                    WITH
                                                                    [(v(FA1_var!1))
                                                                     := seq(val!1)(i)],
                                                                  PROJ_2
                                                                    (seq(sigma!1)(i))))
                                                            #))] = PROJ_1(env!1) WITH [(v(x!1)) := E(pe!1)(env!1, sigma!1)]")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case
                                                                     "x!2=v(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "l_var_exp")
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "FA1_var!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "pe!1"
                                                                               "env!1"
                                                                               "sigma!1"
                                                                               "FA1_var!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "val!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -7
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -1 "val!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -5
                                                         "env!1"
                                                         "pe!1"
                                                         "(# infinite := infinite(sigma!1),
                                                   len := len(sigma!1),
                                                   seq :=
                                                     (LAMBDA (i: index[State](sigma!1)):
                                                        (PROJ_1
                                                           (seq(sigma!1)(i))
                                                           WITH
                                                           [(v(FA1_var!1))
                                                            := seq(val!1)(i)],
                                                         PROJ_2
                                                           (seq(sigma!1)(i))))
                                                   #)"
                                                         "x!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -5)
                                                            (("1"
                                                              (case
                                                               "PROJ_1(env!1) WITH [(v(x!1)) := E(pe!1)(env!1, sigma!1)] = PROJ_1(env!1)
                                         WITH [(v(x!1)) :=
                                                 E(pe!1)(env!1,
                                                         (# infinite :=
                                                              infinite(sigma!1),
                                                            len :=
                                                              len(sigma!1),
                                                            seq :=
                                                              (LAMBDA (i: index[State](sigma!1)):
                                                                 (PROJ_1
                                                                    (seq(sigma!1)(i))
                                                                    WITH
                                                                    [(v(FA1_var!1))
                                                                     := seq(val!1)(i)],
                                                                  PROJ_2
                                                                    (seq(sigma!1)(i))))
                                                            #))]")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3
                                                                 -1)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (case
                                                                     "x!2=v(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "l_var_exp")
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "FA1_var!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "pe!1"
                                                                               "env!1"
                                                                               "sigma!1"
                                                                               "FA1_var!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "val!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -7
                                                                 "z!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (iff)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst -1 "x1!1")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "(PROJ_1(env!1)
                                                   WITH
                                                   [(v(FA1_var!1))
                                                    := x1!1],
                                                 PROJ_2(env!1))"
                                                       "pe!1"
                                                       "sigma!1"
                                                       "x!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (case
                                                             "PROJ_1(env!1)
                                       WITH [(v(FA1_var!1)) := x1!1,
                                             (v(x!1)) :=
                                               E(pe!1)
                                                 ((PROJ_1(env!1)
                                                     WITH
                                                     [(v(FA1_var!1))
                                                      := x1!1],
                                                   PROJ_2(env!1)),
                                                  sigma!1)] = PROJ_1(env!1)
                                       WITH [(v(x!1)) :=
                                               E(pe!1)(env!1,
                                                       sigma!1),
                                             (v(FA1_var!1)) := x1!1]")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (case
                                                                 "v(x!1)=v(FA1_var!1)")
                                                                (("1"
                                                                  (rewrite
                                                                   "exp_vr_extensionality")
                                                                  (("1"
                                                                    (case
                                                                     "t(x!1) = static")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -3
                                                                         2
                                                                         6)
                                                                        (("1"
                                                                          (tcc)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     2
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case
                                                                       "x!2=v(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "l_var_exp")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "pe!1"
                                                                                 "env!1"
                                                                                 "sigma!1"
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x1!1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (tcc)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "z!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -1 "x1!1")
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "(PROJ_1(env!1)
                                                   WITH
                                                   [(v(FA1_var!1))
                                                    := x1!1],
                                                 PROJ_2(env!1))"
                                                       "pe!1"
                                                       "sigma!1"
                                                       "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (case
                                                             "PROJ_1(env!1)
                                       WITH [(v(x!1)) :=
                                               E(pe!1)(env!1,
                                                       sigma!1),
                                             (v(FA1_var!1)) := x1!1] =PROJ_1(env!1)
                                       WITH [(v(FA1_var!1)) := x1!1,
                                             (v(x!1)) :=
                                               E(pe!1)
                                                 ((PROJ_1(env!1)
                                                     WITH
                                                     [(v(FA1_var!1))
                                                      := x1!1],
                                                   PROJ_2(env!1)),
                                                  sigma!1)]")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3
                                                               -1)
                                                              (("2"
                                                                (case
                                                                 "v(x!1)=v(FA1_var!1)")
                                                                (("1"
                                                                  (rewrite
                                                                   "exp_vr_extensionality")
                                                                  (("1"
                                                                    (case
                                                                     "t(x!1)=static")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -4
                                                                         2
                                                                         6)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (subtype-tcc)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     2
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case
                                                                       "x!2=v(x!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "l_var_exp")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "FA1_var!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "pe!1"
                                                                                 "env!1"
                                                                                 "sigma!1"
                                                                                 "FA1_var!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x1!1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (tcc)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "z!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "suform")
      (("2" (expand "M") (("2" (propax) nil nil)) nil)) nil)
     ("3" (skosimp*)
      (("3" (expand "suform" 2)
        (("3" (expand "M")
          (("3" (case "t(x!1) = state")
            (("1" (assert)
              (("1" (lemma "l_sub_exp")
                (("1"
                  (inst-cp -1 "etwo1_var!1" "env!1" "pe!1" "sigma!1"
                   "x!1")
                  (("1"
                    (inst -1 "etwo2_var!1" "env!1" "pe!1" "sigma!1"
                     "x!1")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (lemma "l_sub_exp")
                  (("2"
                    (inst-cp -1 "etwo1_var!1" "env!1" "pe!1" "sigma!1"
                     "x!1")
                    (("2"
                      (inst -1 "etwo2_var!1" "env!1" "pe!1" "sigma!1"
                       "x!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "bound" (-2 1))
        (("4" (expand "suform" 2)
          (("4" (expand "M" 2)
            (("4" (expand "semfone")
              (("4" (case "t(x!1) = state")
                (("1" (assert)
                  (("1" (case "fone2_var!1 = tnot")
                    (("1" (assert)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (assert)
                      (("2" (lemma "l_old_new_1")
                        (("2" (inst? -1)
                          (("2" (replace -1 3 rl)
                            (("2" (hide -1)
                              (("2"
                                (lemma "l_old_new_1")
                                (("2"
                                  (inst
                                   -1
                                   "M(fone1_var!1)"
                                   "env!1"
                                   "(# infinite := infinite(sigma!1),
               len := len(sigma!1),
               seq
                 := LAMBDA (i: index[State](sigma!1)):
                      (PROJ_1(seq(sigma!1)(i))
                         WITH [(v(x!1))
                                 := E(pe!1)(env!1, sub(sigma!1, i, i))],
                       PROJ_2(seq(sigma!1)(i))) #)")
                                  (("1"
                                    (replace -1 3 rl)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "semcsold")
                                        (("1"
                                          (expand "csinner")
                                          (("1"
                                            (iff)
                                            (("1"
                                              (split 3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 1)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst 1 "l!1")
                                                        (("2"
                                                          (case
                                                           "infinite(l!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "i!1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "sub"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "sub"
                                                                         -5)
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "env!1"
                                                                           "pe!1"
                                                                           "(# infinite := FALSE,
                                                         len :=
                                                         seq(l!1)(1 + i!1)
                                                         - seq(l!1)(i!1),
                                                         seq :=
                                                         (LAMBDA (x: {i: nat | i
                                                                  <=
                                                                  seq(l!1)(1 + i!1)
                                                                  - seq(l!1)(i!1)}):
                                                          seq(sigma!1)(x
                                                                       + seq(l!1)(i!1)))
                                                         #)"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -7)
                                                                              (("1"
                                                                                (expand
                                                                                 "sub")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "infinite(sigma!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "suf")
                                                                    (("1"
                                                                      (inst
                                                                       -6
                                                                       "env!1"
                                                                       "pe!1"
                                                                       "(# infinite := TRUE,
                                                             len := len(sigma!1),
                                                             seq :=
                                                             (LAMBDA (x: {i: nat
                                                                      | infinite(sigma!1) or i<=len(sigma!1)}):
                                                              seq(sigma!1)(x
                                                                           +
                                                                           seq(l!1)(len(l!1))))
                                                             #)"
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -6)
                                                                          (("1"
                                                                            (expand
                                                                             "sub")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "i!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "sub")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -8
                                                                                   "env!1"
                                                                                   "pe!1"
                                                                                   "(# infinite := FALSE,
                                                             len :=
                                                             seq(l!1)(1 + i!1)
                                                             - seq(l!1)(i!1),
                                                             seq :=
                                                             (LAMBDA (x: {i: nat | i
                                                                      <=
                                                                      seq(l!1)(1 + i!1)
                                                                      - seq(l!1)(i!1)}):
                                                              seq(sigma!1)(x
                                                                           + seq(l!1)(i!1)))
                                                             #)"
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -8)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := FALSE,
                                          len
                                          := seq(l!1)(1 + i!1)
                                             -
                                             seq(l!1)(i!1),
                                          seq
                                          := (LAMBDA
                                              (x:
                                               {i: nat |
                                                i
                                                <=
                                                seq(l!1)(1 + i!1)
                                                -
                                                seq(l!1)(i!1)}):
                                              seq(sigma!1)
                                              (x + seq(l!1)(i!1))) #))):
                  (PROJ_1(seq(sigma!1)(i + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_586: {i_581: nat | i_581 <= 0}):
                                        seq(sigma!1)
                                        (i + x_586 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(i + seq(l!1)(i!1)))) #) = (# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x_576:
                          {i_577: nat |
                                   i_577 <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  (PROJ_1(seq(sigma!1)(x_576 + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x: {i_570: nat | i_570 <= 0}):
                                        seq(sigma!1)
                                        (x + x_576 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(x_576 + seq(l!1)(i!1)))) #)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply-extensionality
                                                                                                   1
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "suf")
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "env!1"
                                                                           "pe!1"
                                                                           "(# infinite := FALSE,
                                                             len :=
                                                             len(sigma!1)
                                                             - seq(l!1)(len(l!1)),
                                                             seq :=
                                                             (LAMBDA (x: {i: nat | i
                                                                      <= len(sigma!1)
                                                                      -
                                                                      seq(l!1)(len(l!1))}):
                                                              seq(sigma!1)(x
                                                                           +
                                                                           seq(l!1)(len(l!1))))
                                                             #)"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -6)
                                                                              (("1"
                                                                                (expand
                                                                                 "sub")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "suf")
                                                                        (("2"
                                                                          (expand
                                                                           "sub")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -5
                                                                                 "i!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -9
                                                                                         "env!1"
                                                                                         "pe!1"
                                                                                         "(# infinite := FALSE,
                                                             len :=
                                                             seq(l!1)(1 + i!1)
                                                             - seq(l!1)(i!1),
                                                             seq :=
                                                             (LAMBDA (x: {i_176: nat
                                                                      | i_176
                                                                      <=
                                                                      seq(l!1)(1 + i!1)
                                                                      - seq(l!1)(i!1)}):
                                                              seq(sigma!1)(x
                                                                           + seq(l!1)(i!1)))
                                                             #)"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -9)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := FALSE,
                                          len
                                          := seq(l!1)(1 + i!1)
                                             -
                                             seq(l!1)(i!1),
                                          seq
                                          := (LAMBDA
                                              (x:
                                               {i_176: nat |
                                                i_176
                                                <=
                                                seq(l!1)(1 + i!1)
                                                -
                                                seq(l!1)(i!1)}):
                                              seq(sigma!1)
                                              (x + seq(l!1)(i!1))) #))):
                  (PROJ_1(seq(sigma!1)(i + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_650: {i_645: nat | i_645 <= 0}):
                                        seq(sigma!1)
                                        (i + x_650 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(i + seq(l!1)(i!1)))) #) = (# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x_633:
                          {i_634: nat |
                                   i_634 <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  (PROJ_1(seq(sigma!1)(x_633 + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x: {i_627: nat | i_627 <= 0}):
                                        seq(sigma!1)
                                        (x + x_633 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(x_633 + seq(l!1)(i!1)))) #)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply-extensionality
                                                                                                       1
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 1)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst 1 "l!1")
                                                        (("2"
                                                          (case
                                                           "infinite(l!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "i!1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "sub")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "env!1"
                                                                         "pe!1"
                                                                         "(# infinite := FALSE,
                                                         len :=
                                                         seq(l!1)(1 + i!1)
                                                         - seq(l!1)(i!1),
                                                         seq :=
                                                         (LAMBDA (x: {i: nat | i
                                                                  <=
                                                                  seq(l!1)(1 + i!1)
                                                                  - seq(l!1)(i!1)}):
                                                          seq(sigma!1)(x
                                                                       + seq(l!1)(i!1)))
                                                         #)"
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -7)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x_666:
                          {i_667: nat |
                                   i_667 <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  (PROJ_1(seq(sigma!1)(x_666 + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x: {i_660: nat | i_660 <= 0}):
                                        seq(sigma!1)
                                        (x + x_666 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(x_666 + seq(l!1)(i!1)))) #) = (# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := FALSE,
                                          len
                                          := seq(l!1)(1 + i!1)
                                             -
                                             seq(l!1)(i!1),
                                          seq
                                          := (LAMBDA
                                              (x:
                                               {i: nat |
                                                i
                                                <=
                                                seq(l!1)(1 + i!1)
                                                -
                                                seq(l!1)(i!1)}):
                                              seq(sigma!1)
                                              (x + seq(l!1)(i!1))) #))):
                  (PROJ_1(seq(sigma!1)(i + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_673: {i_671: nat | i_671 <= 0}):
                                        seq(sigma!1)
                                        (i + x_673 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(i + seq(l!1)(i!1)))) #)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply-extensionality
                                                                                       1
                                                                                       :hide?
                                                                                       t)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "infinite(sigma!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "suf")
                                                                    (("1"
                                                                      (expand
                                                                       "sub")
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "env!1"
                                                                         "pe!1"
                                                                         "(# infinite := TRUE,
                                                             len := len(sigma!1),
                                                             seq :=
                                                             (LAMBDA (x: {i: nat
                                                                      | infinite(sigma!1) or i<=len(sigma!1)}):
                                                              seq(sigma!1)(x
                                                                           +
                                                                           seq(l!1)(len(l!1))))
                                                             #)"
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "i!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "sub")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -8
                                                                                   "env!1"
                                                                                   "pe!1"
                                                                                   "(# infinite := FALSE,
                                                             len :=
                                                             seq(l!1)(1 + i!1)
                                                             - seq(l!1)(i!1),
                                                             seq :=
                                                             (LAMBDA (x: {i: nat | i
                                                                      <=
                                                                      seq(l!1)(1 + i!1)
                                                                      - seq(l!1)(i!1)}):
                                                              seq(sigma!1)(x
                                                                           + seq(l!1)(i!1)))
                                                             #)"
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -8)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x_733:
                          {i_734: nat |
                                   i_734 <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  (PROJ_1(seq(sigma!1)(x_733 + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x: {i_727: nat | i_727 <= 0}):
                                        seq(sigma!1)
                                        (x + x_733 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(x_733 + seq(l!1)(i!1)))) #) = (# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := FALSE,
                                          len
                                          := seq(l!1)(1 + i!1)
                                             -
                                             seq(l!1)(i!1),
                                          seq
                                          := (LAMBDA
                                              (x:
                                               {i: nat |
                                                i
                                                <=
                                                seq(l!1)(1 + i!1)
                                                -
                                                seq(l!1)(i!1)}):
                                              seq(sigma!1)
                                              (x + seq(l!1)(i!1))) #))):
                  (PROJ_1(seq(sigma!1)(i + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_742: {i_738: nat | i_738 <= 0}):
                                        seq(sigma!1)
                                        (i + x_742 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(i + seq(l!1)(i!1)))) #)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply-extensionality
                                                                                                   1
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "suf")
                                                                        (("1"
                                                                          (expand
                                                                           "sub")
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "env!1"
                                                                             "pe!1"
                                                                             "(# infinite := FALSE,
                                                             len :=
                                                             len(sigma!1)
                                                             - seq(l!1)(len(l!1)),
                                                             seq :=
                                                             (LAMBDA (x: {i: nat | i
                                                                      <= len(sigma!1)
                                                                      -
                                                                      seq(l!1)(len(l!1))}):
                                                              seq(sigma!1)(x
                                                                           +
                                                                           seq(l!1)(len(l!1))))
                                                             #)"
                                                                             "x!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -6)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "suf")
                                                                        (("2"
                                                                          (expand
                                                                           "sub")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -9
                                                                                       "env!1"
                                                                                       "pe!1"
                                                                                       "(# infinite := FALSE,
                                                             len :=
                                                             seq(l!1)(1 + i!1)
                                                             - seq(l!1)(i!1),
                                                             seq :=
                                                             (LAMBDA (x: {i_276: nat
                                                                      | i_276
                                                                      <=
                                                                      seq(l!1)(1 + i!1)
                                                                      - seq(l!1)(i!1)}):
                                                              seq(sigma!1)(x
                                                                           + seq(l!1)(i!1)))
                                                             #)"
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -9)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (x_820:
                          {i_821: nat |
                                   i_821 <=
                                    seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):
                  (PROJ_1(seq(sigma!1)(x_820 + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x: {i_814: nat | i_814 <= 0}):
                                        seq(sigma!1)
                                        (x + x_820 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(x_820 + seq(l!1)(i!1)))) #) =(# infinite := FALSE,
           len := seq(l!1)(1 + i!1) - seq(l!1)(i!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := FALSE,
                                          len
                                          := seq(l!1)(1 + i!1)
                                             -
                                             seq(l!1)(i!1),
                                          seq
                                          := (LAMBDA
                                              (x:
                                               {i_276: nat |
                                                i_276
                                                <=
                                                seq(l!1)(1 + i!1)
                                                -
                                                seq(l!1)(i!1)}):
                                              seq(sigma!1)
                                              (x + seq(l!1)(i!1))) #))):
                  (PROJ_1(seq(sigma!1)(i + seq(l!1)(i!1)))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_829: {i_825: nat | i_825 <= 0}):
                                        seq(sigma!1)
                                        (i + x_829 + seq(l!1)(i!1)) #))],
                   PROJ_2(seq(sigma!1)(i + seq(l!1)(i!1)))) #)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (apply-extensionality
                                                                                                     1
                                                                                                     :hide?
                                                                                                     t)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "i!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "fone2_var!1 = tnot")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (flatten)
                        (("2" (lemma "l_old_new_1")
                          (("2" (inst?)
                            (("2" (replace -1 4 rl)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "l_old_new_1")
                                  (("2"
                                    (inst
                                     -1
                                     "M(fone1_var!1)"
                                     "(PROJ_1(env!1) WITH [(v(x!1)) := E(pe!1)(env!1, sigma!1)],
             PROJ_2(env!1))"
                                     "sigma!1")
                                    (("2"
                                      (replace -1 4 rl)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "semcsold")
                                          (("2"
                                            (expand "csinner")
                                            (("2"
                                              (iff)
                                              (("2"
                                                (split 4)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "l!1")
                                                          (("2"
                                                            (case
                                                             "infinite(l!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "i!1")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "env!1"
                                                                         "pe!1"
                                                                         "sub(sigma!1, seq(l!1)(i!1),
                                                          seq(l!1)(1 + i!1))"
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               "semstable")
                                                                              (("1"
                                                                                (inst
                                                                                 -8
                                                                                 "env!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -8
                                                                                   "sigma!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "0")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "l_suf")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -9)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -8
                                                                                           "sub(sigma!1,0,seq(l!1)(1 + i!1))")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "seq(l!1)(i!1)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sub")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "suf")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "sub"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "infinite(sigma!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "env!1"
                                                                       "pe!1"
                                                                       "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -5)
                                                                          (("1"
                                                                            (expand
                                                                             "semstable")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "env!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "sigma!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -7
                                                                                   "0")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "l_suf")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -8)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -7
                                                                                         "seq(l!1)(len(l!1))")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -5
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "env!1"
                                                                                 "pe!1"
                                                                                 "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "semstable")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -9
                                                                                         "env!1")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -9
                                                                                           "sigma!1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -10
                                                                                             "0")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "l_suf")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -9
                                                                                                   "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -9
                                                                                                     "seq(l!1)(i!1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sub")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "suf")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -9)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "sub"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "env!1"
                                                                           "pe!1"
                                                                           "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 "semstable")
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "env!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -7
                                                                                     "sigma!1")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -7
                                                                                       "0")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "l_suf")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -7
                                                                                             "seq(l!1)(len(l!1))")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "i!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "env!1"
                                                                                     "pe!1"
                                                                                     "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -8)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "semstable")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -10
                                                                                             "env!1")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -10
                                                                                               "sigma!1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -11
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "l_suf")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -10
                                                                                                       "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -10
                                                                                                         "seq(l!1)(i!1)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sub")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "suf")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -10)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "sub"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "l!1")
                                                          (("2"
                                                            (case
                                                             "infinite(l!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "i!1")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "env!1"
                                                                         "pe!1"
                                                                         "sub(sigma!1, seq(l!1)(i!1),
                                                          seq(l!1)(1 + i!1))"
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               "semstable")
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "env!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -7
                                                                                   "sigma!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -8
                                                                                     "0")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "l_suf")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -7
                                                                                           "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -7
                                                                                             "seq(l!1)(i!1)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sub")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "suf")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "sub"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "infinite(sigma!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "env!1"
                                                                       "pe!1"
                                                                       "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "semstable")
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "env!1")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "sigma!1")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -7
                                                                                 "0")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "l_suf")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -8)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -7
                                                                                       "seq(l!1)(len(l!1))")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -7)
                                                                                        (("1"
                                                                                          (split
                                                                                           -5)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -5
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "env!1"
                                                                                 "pe!1"
                                                                                 "sub(sigma!1, seq(l!1)(i!1),
                                                              seq(l!1)(1 + i!1))"
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "semstable")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -8
                                                                                         "env!1")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -8
                                                                                           "sigma!1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -9
                                                                                             "0")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "l_suf")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -8
                                                                                                   "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -8
                                                                                                     "seq(l!1)(i!1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sub")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "suf")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "sub"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "env!1"
                                                                           "pe!1"
                                                                           "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 "semstable")
                                                                                (("1"
                                                                                  (inst
                                                                                   -6
                                                                                   "env!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -6
                                                                                     "sigma!1")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -6
                                                                                       "0")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "l_suf")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -6
                                                                                             "seq(l!1)(len(l!1))")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "i!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "env!1"
                                                                                     "pe!1"
                                                                                     "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -8)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "semstable")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -9
                                                                                             "env!1")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -9
                                                                                               "sigma!1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -10
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "l_suf")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -9
                                                                                                       "sub(sigma!1, 0, seq(l!1)(1 + i!1))")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -9
                                                                                                         "seq(l!1)(i!1)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sub")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "suf")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -9)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "sub"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (expand "bound" (1 -3))
        (("5" (expand "union")
          (("5" (expand "member" 1 1)
            (("5" (expand "member" -3 2)
              (("5" (flatten)
                (("5" (expand "suform" 3)
                  (("5" (expand "M" 3)
                    (("5" (expand "semftwo")
                      (("5" (case "t(x!1)=state")
                        (("1" (assert)
                          (("1" (case "ftwo3_var!1 = tchop")
                            (("1" (assert)
                              (("1"
                                (expand "^^")
                                (("1"
                                  (iff)
                                  (("1"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst 1 "m!1")
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (expand "sub")
                                                (("1"
                                                  (hide 2 -6)
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "env!1"
                                                     "pe!1"
                                                     "(# infinite := FALSE,
                                                         len := m!1,
                                                         seq :=
                                                           (LAMBDA (x: {i: nat | i
                                                                          <= m!1}):
                                                              seq(sigma!1)(x))
                                                         #)"
                                                     "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -5)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "(# infinite := FALSE,
           len := m!1,
           seq
             := LAMBDA (i:
                          index[State]((# infinite := FALSE,
                                          len := m!1,
                                          seq
                                          := (LAMBDA
                                              (x: {i: nat | i <= m!1}):
                                              seq(sigma!1)(x)) #))):
                  (PROJ_1(seq(sigma!1)(i))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_913: {i_906: nat | i_906 <= 0}):
                                        seq(sigma!1)(i + x_913) #))],
                   PROJ_2(seq(sigma!1)(i))) #) = (# infinite := FALSE,
           len := m!1,
           seq
             := LAMBDA (x_896: {i_897: nat | i_897 <= m!1}):
                  (PROJ_1(seq(sigma!1)(x_896))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x: {i_890: nat | i_890 <= 0}):
                                        seq(sigma!1)(x + x_896) #))],
                   PROJ_2(seq(sigma!1)(x_896))) #)")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("3"
                                                                    (typepred
                                                                     "m!1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide
                                                                   2
                                                                   -5)
                                                                  (("4"
                                                                    (skosimp
                                                                     :preds?
                                                                     t)
                                                                    (("4"
                                                                      (typepred
                                                                       "m!1")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("5"
                                                                    (assert)
                                                                    (("5"
                                                                      (typepred
                                                                       "m!1")
                                                                      (("5"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -7
                                                             "z!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp
                                                       :preds?
                                                       t)
                                                      (("2"
                                                        (typepred
                                                         "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2 -5)
                                                (("2"
                                                  (expand "suf")
                                                  (("2"
                                                    (expand "sub")
                                                    (("2"
                                                      (case
                                                       "infinite(sigma!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "env!1"
                                                           "pe!1"
                                                           "(# infinite := TRUE,
                                                           len := len(sigma!1),
                                                           seq :=
                                                             (LAMBDA (x: {i: nat
                                                                      | infinite(sigma!1) or i<=len(sigma!1)}):
                                                                seq(sigma!1)(x
                                                                                 + m!1))
                                                           #)"
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := TRUE,
                                          len := len(sigma!1),
                                          seq
                                          := (LAMBDA
                                              (x:
                                               {i: nat |
                                                infinite(sigma!1)
                                                OR
                                                i <= len(sigma!1)}):
                                              seq(sigma!1)(x + m!1)) #))):
                  (PROJ_1(seq(sigma!1)(i + m!1))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_947: {i_944: nat | i_944 <= 0}):
                                        seq(sigma!1)(i + x_947 + m!1) #))],
                   PROJ_2(seq(sigma!1)(i + m!1))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i_934: nat |
                                   infinite(sigma!1) OR
                                    i_934 <= len(sigma!1)}):
                  (PROJ_1(seq(sigma!1)(x + m!1))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_939: {i: nat | i <= 0}):
                                        seq(sigma!1)(x + x_939 + m!1) #))],
                   PROJ_2(seq(sigma!1)(x + m!1))) #)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -8
                                                                   "z!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -5
                                                           "env!1"
                                                           "pe!1"
                                                           "(# infinite := FALSE,
                                                           len := len(sigma!1) - m!1,
                                                           seq :=
                                                             (LAMBDA (x: {i: nat | i
                                                                            <= len(sigma!1)
                                                                              - m!1}):
                                                                seq(sigma!1)(x
                                                                                 + m!1))
                                                           #)"
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -5)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -7
                                                                   "z!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "m!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -8 "z!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst 1 "m!1")
                                            (("1"
                                              (expand "sub")
                                              (("1"
                                                (expand "suf")
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (hide 2 -6 -2)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "env!1"
                                                       "pe!1"
                                                       "(# infinite := FALSE,
                                                         len := m!1,
                                                         seq :=
                                                           (LAMBDA (x: {i: nat | i
                                                                          <= m!1}):
                                                              seq(sigma!1)(x))
                                                         #)"
                                                       "x!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -4)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "(# infinite := FALSE,
           len := m!1,
           seq
             := LAMBDA (x_968: {i_969: nat | i_969 <= m!1}):
                  (PROJ_1(seq(sigma!1)(x_968))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x: {i_962: nat | i_962 <= 0}):
                                        seq(sigma!1)(x + x_968) #))],
                   PROJ_2(seq(sigma!1)(x_968))) #) = (# infinite := FALSE,
           len := m!1,
           seq
             := LAMBDA (i:
                          index[State]((# infinite := FALSE,
                                          len := m!1,
                                          seq
                                          := (LAMBDA
                                              (x: {i: nat | i <= m!1}):
                                              seq(sigma!1)(x)) #))):
                  (PROJ_1(seq(sigma!1)(i))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_1005:
                                         {i_980: nat | i_980 <= 0}):
                                        seq(sigma!1)(i + x_1005) #))],
                   PROJ_2(seq(sigma!1)(i))) #)")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("3"
                                                                    (typepred
                                                                     "m!1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("4"
                                                                    (typepred
                                                                     "m!1")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skosimp
                                                                   :preds?
                                                                   t)
                                                                  (("5"
                                                                    (typepred
                                                                     "m!1")
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "z!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (typepred
                                                           "m!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 -5 -1)
                                                    (("2"
                                                      (case
                                                       "infinite(sigma!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "env!1"
                                                           "pe!1"
                                                           "(# infinite := TRUE,
                                                           len := len(sigma!1),
                                                           seq :=
                                                             (LAMBDA (x: {i: nat
                                                                      | infinite(sigma!1) or i<=len(sigma!1)}):
                                                                seq(sigma!1)(x
                                                                                 + m!1))
                                                           #)"
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -5)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := TRUE,
                                          len := len(sigma!1),
                                          seq
                                          := (LAMBDA
                                              (x:
                                               {i: nat |
                                                infinite(sigma!1)
                                                OR
                                                i <= len(sigma!1)}):
                                              seq(sigma!1)(x + m!1)) #))):
                  (PROJ_1(seq(sigma!1)(i + m!1))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x_1015:
                                         {i_985: nat | i_985 <= 0}):
                                        seq(sigma!1)
                                        (i + x_1015 + m!1) #))],
                   PROJ_2(seq(sigma!1)(i + m!1))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x_998:
                          {i_999: nat |
                                   infinite(sigma!1) OR
                                    i_999 <= len(sigma!1)}):
                  (PROJ_1(seq(sigma!1)(x_998 + m!1))
                     WITH [(v(x!1))
                             := E(pe!1)
                                 (env!1,
                                  (# infinite := FALSE,
                                     len := 0,
                                     seq
                                     := LAMBDA
                                        (x: {i_973: nat | i_973 <= 0}):
                                        seq(sigma!1)(x + x_998 + m!1) #))],
                   PROJ_2(seq(sigma!1)(x_998 + m!1))) #)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -7
                                                                   "z!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "env!1"
                                                           "pe!1"
                                                           "(# infinite := FALSE,
                                                           len := len(sigma!1) - m!1,
                                                           seq :=
                                                             (LAMBDA (x: {i: nat | i
                                                                            <= len(sigma!1)
                                                                              - m!1}):
                                                                seq(sigma!1)(x
                                                                                 + m!1))
                                                           #)"
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -4)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -6
                                                                   "z!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "m!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1 -5)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -7 "z!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst?)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -2)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (case "ftwo3_var!1 = tand")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (case
                                               "ftwo3_var!1 = tor")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case
                                                 "ftwo3_var!1 = timpl")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (inst -5 "z!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (inst -5 "z!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (case "ftwo3_var!1 = tchop")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "^^")
                                  (("1"
                                    (iff)
                                    (("1"
                                      (split 4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst 1 "m!1")
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (hide 2 -5)
                                                  (("1"
                                                    (inst
                                                     -4
                                                     "env!1"
                                                     "pe!1"
                                                     "sub(sigma!1, 0, m!1)"
                                                     "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -4)
                                                        (("1"
                                                          (expand
                                                           "semstable")
                                                          (("1"
                                                            (hide -4)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "env!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -5
                                                                 "sigma!1")
                                                                (("1"
                                                                  (inst
                                                                   -6
                                                                   "0")
                                                                  (("1"
                                                                    (rewrite
                                                                     "l_suf")
                                                                    (("1"
                                                                      (replace
                                                                       -6)
                                                                      (("1"
                                                                        (inst
                                                                         -5
                                                                         "sub(sigma!1, 0, m!1)")
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "sub")
                                                                            (("1"
                                                                              (expand
                                                                               "suf")
                                                                              (("1"
                                                                                (replace
                                                                                 -5)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "sub"
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (hide -5)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "z!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 -4 -1)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "env!1"
                                                       "pe!1"
                                                       "suf(sigma!1, m!1)"
                                                       "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (expand
                                                             "semstable")
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "env!1")
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "sigma!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -4
                                                                   "0")
                                                                  (("1"
                                                                    (rewrite
                                                                     "l_suf")
                                                                    (("1"
                                                                      (replace
                                                                       -5)
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "m!1")
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "z!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 1 -3 -5)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -5 "z!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst 1 "m!1")
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (hide 2 -5 -3)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "env!1"
                                                     "pe!1"
                                                     "sub(sigma!1, 0, m!1)"
                                                     "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (expand
                                                           "semstable")
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "env!1")
                                                            (("1"
                                                              (inst-cp
                                                               -4
                                                               "sigma!1")
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "0")
                                                                (("1"
                                                                  (rewrite
                                                                   "l_suf")
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "sub(sigma!1, 0, m!1)")
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "sub")
                                                                          (("1"
                                                                            (expand
                                                                             "suf")
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "sub"
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "z!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 -3 -4)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "env!1"
                                                     "pe!1"
                                                     "suf(sigma!1, m!1)"
                                                     "x!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -3)
                                                        (("1"
                                                          (expand
                                                           "semstable")
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "env!1")
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "sigma!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -4
                                                                 "0")
                                                                (("1"
                                                                  (rewrite
                                                                   "l_suf")
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "m!1")
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "z!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 1 -5 -3)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -5 "z!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (case
                                                 "ftwo3_var!1 = tand")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (case
                                                   "ftwo3_var!1 = tor")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "ftwo3_var!1 = timpl")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (inst -4 "z!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst -4 "z!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t) nil nil))
    nil)
   unfinished nil 34802 26470 nil nil))
 (l_ren_TCC1 0
  (l_ren_TCC1-2 nil 3391338633 nil
   ("" (skosimp) (("" (expand "subterm" 5) (("" (propax) nil)))) nil)
   proved-complete ((subterm adt-def-decl "boolean" exp_adt nil)) nil
   nil nil nil)
  (l_ren_TCC1-1 nil 3391230329 3391230339
   ("" (skosimp) (("" (expand "subterm" 5) (("" (propax) nil)))) nil)
   proved ((subterm adt-def-decl "boolean" exp_adt nil)) 33 10 nil
   nil))
 (l_ren 0
  (l_ren-2 nil 3391338633 3391339327
   ("" (skosimp*)
    (("" (expand "M")
      (("" (lemma "l_sub_form")
        (("" (inst?)
          (("" (assert)
            (("" (expand "semforall")
              (("" (case "t(v1!1)=state")
                (("1" (assert)
                  (("1" (expand "E")
                    (("1" (expand "varsem")
                      (("1" (expand "sub")
                        (("1" (iff)
                          (("1" (prop)
                            (("1" (skosimp)
                              (("1"
                                (inst -1 "val!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "env!1"
                                     "(# infinite := infinite(sigma!1),
                                                     len := len(sigma!1),
                                                     seq :=
                                                       (LAMBDA (i: {j: nat
                                                                | infinite(sigma!1)
                                                                      OR j
                                                                        <= len(sigma!1)}):
                                                          (PROJ_1(seq(sigma!1)(i))
                                                             WITH [(v(v2!1))
                                                                   := seq(val!1)(i)],
                                                           PROJ_2(seq(sigma!1)(i))))
                                                     #)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "l_var_form")
                                            (("1"
                                              (inst
                                               -1
                                               "env!1"
                                               "f1!1"
                                               "(# infinite := infinite(sigma!1),
                                       len := len(sigma!1),
                                       seq :=
                                         (LAMBDA (i: {j: nat | infinite(sigma!1)
                                                        OR j <= len(sigma!1)}):
                                            (PROJ_1(seq(sigma!1)(i))
                                               WITH [(v(v1!1)) := seq(val!1)(i)],
                                             PROJ_2(seq(sigma!1)(i))))
                                       #)"
                                               "v2!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -1 "val!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp :preds? t)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "freeexp")
                                          (("2"
                                            (expand "singleton")
                                            (("2"
                                              (expand "member" 1 1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case "z!1=v2!1")
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (rewrite
                                                       "exp_vr_eta")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (typepred "i!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (inst -1 "val!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -5
                                     "env!1"
                                     "(# infinite := infinite(sigma!1),
                                                     len := len(sigma!1),
                                                     seq :=
                                                       (LAMBDA (i: {j: nat
                                                                | infinite(sigma!1)
                                                                      OR j
                                                                        <= len(sigma!1)}):
                                                          (PROJ_1(seq(sigma!1)(i))
                                                             WITH [(v(v2!1))
                                                                   := seq(val!1)(i)],
                                                           PROJ_2(seq(sigma!1)(i))))
                                                     #)")
                                    (("1"
                                      (split -5)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "l_var_form")
                                          (("1"
                                            (inst
                                             -1
                                             "env!1"
                                             "f1!1"
                                             "(# infinite := infinite(sigma!1),
                                       len := len(sigma!1),
                                       seq :=
                                         (LAMBDA (i: {j: nat | infinite(sigma!1)
                                                        OR j <= len(sigma!1)}):
                                            (PROJ_1(seq(sigma!1)(i))
                                               WITH [(v(v1!1)) := seq(val!1)(i)],
                                             PROJ_2(seq(sigma!1)(i))))
                                       #)"
                                             "v2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -1 "val!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp :preds? t)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "freeexp")
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (expand "member" 1 1)
                                            (("2"
                                              (expand "restrict")
                                              (("2"
                                                (rewrite "exp_vr_eta")
                                                (("2"
                                                  (skosimp :preds? t)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (skosimp :preds? t)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (iff)
                    (("2" (prop)
                      (("1" (skosimp)
                        (("1" (inst -1 "x1!1")
                          (("1"
                            (inst -2
                             "(PROJ_1(env!1) WITH [(v(v2!1)) := x1!1],
                                                   PROJ_2(env!1))"
                             "sigma!1")
                            (("1" (expand "freeexp")
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (expand "singleton")
                                  (("1"
                                    (expand "member" -2 1)
                                    (("1"
                                      (rewrite "exp_vr_eta")
                                      (("1"
                                        (lemma "l_var_form")
                                        (("1"
                                          (inst
                                           -1
                                           "(PROJ_1(env!1) WITH [(v(v1!1)) := x1!1], PROJ_2(env!1))"
                                           "f1!1"
                                           "sigma!1"
                                           "v2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "E")
                                              (("1"
                                                (expand "varsem")
                                                (("1"
                                                  (inst -1 "x1!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "semstable")
                                                      (("1"
                                                        (expand "E")
                                                        (("1"
                                                          (expand
                                                           "varsem")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (assert)
                          (("2" (inst -1 "x1!1")
                            (("2"
                              (inst -2
                               "(PROJ_1(env!1) WITH [(v(v2!1)) := x1!1],
                                                   PROJ_2(env!1))"
                               "sigma!1")
                              (("2"
                                (assert)
                                (("2"
                                  (split -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "E")
                                      (("1"
                                        (expand "varsem")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "l_var_form")
                                            (("1"
                                              (inst
                                               -1
                                               "(PROJ_1(env!1) WITH [(v(v1!1)) := x1!1], PROJ_2(env!1))"
                                               "f1!1"
                                               "sigma!1"
                                               "v2!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -1 "x1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "semstable")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "E")
                                        (("2"
                                          (expand "varsem")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "freeexp")
                                        (("3"
                                          (expand "restrict")
                                          (("3"
                                            (expand "singleton")
                                            (("3"
                                              (expand "member" -1 1)
                                              (("3"
                                                (rewrite "exp_vr_eta")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((M def-decl "bool" itlformsemanticsnew nil)
    (form type-decl nil form_adt nil) (exp type-decl nil exp_adt nil)
    (otype type-decl nil exptype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (semforall const-decl "bool" itlformsemanticsnew nil)
    (semstable const-decl "bool" itlexpsemantics nil)
    (varsem const-decl "Value" itlexpsemantics nil)
    (freeexp def-decl "setof[(vr?)]" itlexpfree nil)
    (member const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (exp_vr_eta formula-decl nil exp_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (l_var_form formula-decl nil itlhelplemma nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Value type-eq-decl nil itlstate nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (sub const-decl "sequ" sequ nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (E def-decl "Value" itlexpsemantics nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (t adt-accessor-decl "[(vr?) -> vrtype]" exp_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vrtype type-decl nil exptype nil)
    (l_sub_form formula-decl nil itlformsubstitution nil))
   688186 1340 t nil)
  (l_ren-1 nil 3391230329 3391230558
   ("" (skosimp*)
    (("" (expand "M")
      (("" (lemma "l_sub_form")
        (("" (inst?)
          (("1" (assert)
            (("1" (expand "semforall")
              (("1" (case "t(v1!1)=state")
                (("1" (assert)
                  (("1" (expand "E")
                    (("1" (expand "varsem")
                      (("1" (expand "sub")
                        (("1" (iff)
                          (("1" (prop)
                            (("1" (skosimp)
                              (("1"
                                (inst -1 "val!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "env!1"
                                     "(# infinite := infinite(sigma!1),
                                             len := len(sigma!1),
                                             seq :=
                                               (LAMBDA (i: {j: nat
                                                        | infinite(sigma!1)
                                                              OR j
                                                                <= len(sigma!1)}):
                                                  (PROJ_1(seq(sigma!1)(i))
                                                     WITH [(v(v2!1))
                                                           := seq(val!1)(i)],
                                                   PROJ_2(seq(sigma!1)(i))))
                                             #)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "l_var_form")
                                            (("1"
                                              (inst
                                               -1
                                               "env!1"
                                               "f1!1"
                                               "(# infinite := infinite(sigma!1),
                           len := len(sigma!1),
                           seq :=
                             (LAMBDA (i: {j: nat | infinite(sigma!1)
                                            OR j <= len(sigma!1)}):
                                (PROJ_1(seq(sigma!1)(i))
                                   WITH [(v(v1!1)) := seq(val!1)(i)],
                                 PROJ_2(seq(sigma!1)(i))))
                           #)"
                                               "v2!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -1 "val!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp :preds? t)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "freeexp")
                                          (("2"
                                            (expand "singleton")
                                            (("2"
                                              (expand "member" 1 1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case "z!1=v2!1")
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (rewrite
                                                       "exp_vr_eta")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (typepred "i!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (inst -1 "val!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -5
                                     "env!1"
                                     "(# infinite := infinite(sigma!1),
                                             len := len(sigma!1),
                                             seq :=
                                               (LAMBDA (i: {j: nat
                                                        | infinite(sigma!1)
                                                              OR j
                                                                <= len(sigma!1)}):
                                                  (PROJ_1(seq(sigma!1)(i))
                                                     WITH [(v(v2!1))
                                                           := seq(val!1)(i)],
                                                   PROJ_2(seq(sigma!1)(i))))
                                             #)")
                                    (("1"
                                      (split -5)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "l_var_form")
                                          (("1"
                                            (inst
                                             -1
                                             "env!1"
                                             "f1!1"
                                             "(# infinite := infinite(sigma!1),
                           len := len(sigma!1),
                           seq :=
                             (LAMBDA (i: {j: nat | infinite(sigma!1)
                                            OR j <= len(sigma!1)}):
                                (PROJ_1(seq(sigma!1)(i))
                                   WITH [(v(v1!1)) := seq(val!1)(i)],
                                 PROJ_2(seq(sigma!1)(i))))
                           #)"
                                             "v2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -1 "val!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp :preds? t)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "freeexp")
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (expand "member" 1 1)
                                            (("2"
                                              (expand "restrict")
                                              (("2"
                                                (rewrite "exp_vr_eta")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp :preds? t)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (iff)
                    (("2" (prop)
                      (("1" (skosimp)
                        (("1" (inst -1 "x1!1")
                          (("1"
                            (inst -2
                             "(PROJ_1(env!1) WITH [(v(v2!1)) := x1!1],
                                           PROJ_2(env!1))" "sigma!1")
                            (("1" (expand "freeexp")
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (expand "singleton")
                                  (("1"
                                    (expand "member" -2 1)
                                    (("1"
                                      (rewrite "exp_vr_eta")
                                      (("1"
                                        (lemma "l_var_form")
                                        (("1"
                                          (inst
                                           -1
                                           "(PROJ_1(env!1) WITH [(v(v1!1)) := x1!1], PROJ_2(env!1))"
                                           "f1!1"
                                           "sigma!1"
                                           "v2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "E")
                                              (("1"
                                                (expand "varsem")
                                                (("1"
                                                  (inst -1 "x1!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "semstable")
                                                      (("1"
                                                        (expand "E")
                                                        (("1"
                                                          (expand
                                                           "varsem")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (assert)
                          (("2" (inst -1 "x1!1")
                            (("2"
                              (inst -2
                               "(PROJ_1(env!1) WITH [(v(v2!1)) := x1!1],
                                           PROJ_2(env!1))" "sigma!1")
                              (("2"
                                (assert)
                                (("2"
                                  (split -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "E")
                                      (("1"
                                        (expand "varsem")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "l_var_form")
                                            (("1"
                                              (inst
                                               -1
                                               "(PROJ_1(env!1) WITH [(v(v1!1)) := x1!1], PROJ_2(env!1))"
                                               "f1!1"
                                               "sigma!1"
                                               "v2!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -1 "x1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "semstable")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "E")
                                        (("2"
                                          (expand "varsem")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "freeexp")
                                        (("3"
                                          (expand "restrict")
                                          (("3"
                                            (expand "singleton")
                                            (("3"
                                              (expand "member" -1 1)
                                              (("3"
                                                (rewrite "exp_vr_eta")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "subterm" 1) (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1308 840 nil nil)))

