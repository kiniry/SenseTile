(itlhelplemma
 (l_pexp_E_TCC1 0
  (l_pexp_E_TCC1-2 nil 3391249808 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil nil nil nil)
  (l_pexp_E_TCC1-1 nil 3391230323 3391230330 ("" (subtype-tcc) nil nil)
   proved nil 91 40 nil nil))
 (l_pexp_E 0
  (l_pexp_E-2 nil 3391249808 nil
   ("" (induct "pe" :name "exp_induction")
    (("1" (typepred "pe!1") (("1" (propax) nil nil)) nil)
     ("2" (expand "E") (("2" (propax) nil nil)) nil)
     ("3" (expand "E")
      (("3" (expand "varsem")
        (("3" (expand "sub") (("3" (propax) nil nil)) nil)) nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "E" 1)
        (("4" (expand "ivarsem")
          (("4" (expand "subterm" -2)
            (("4" (split -1)
              (("1" (inst?)
                (("1" (replace -1)
                  (("1" (expand "sub" 1 3) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (inst? -2)
        (("5" (expand "subterm" 1) (("5" (propax) nil nil)) nil)) nil))
      nil)
     ("6" (skosimp*)
      (("6" (expand "subterm" -3)
        (("6" (split -1)
          (("1" (split -2)
            (("1" (expand "E" 1)
              (("1" (inst?)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst? -3) (("2" (flatten) nil nil)) nil)) nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -3) (("2" (flatten) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skosimp*)
      (("7" (expand "subterm" -5)
        (("7" (split -1)
          (("1" (split -2)
            (("1" (split -3)
              (("1" (split -4)
                (("1" (expand "E" 1)
                  (("1" (inst?)
                    (("1" (inst?)
                      (("1" (inst?)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst? -5) (("2" (flatten) nil nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst? -5) (("2" (flatten) nil nil)) nil)) nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst? -5) (("2" (flatten) nil nil)) nil)) nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -5) (("2" (flatten) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("8" (skosimp*) (("8" (assert) nil nil)) nil))
    nil)
   proved-complete
   ((Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (otype type-decl nil exptype nil) (exp type-decl nil exp_adt nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (E def-decl "Value" itlexpsemantics nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil)
    (exp_induction formula-decl nil exp_adt nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (varsem const-decl "Value" itlexpsemantics nil)
    (ivarsem const-decl "Value" itlexpsemantics nil))
   nil nil nil nil)
  (l_pexp_E-1 nil 3391230323 3391230480
   ("" (induct "pe" :name "exp_induction")
    (("1" (typepred "pe!1") (("1" (propax) nil nil)) nil)
     ("2" (expand "E") (("2" (propax) nil nil)) nil)
     ("3" (expand "E")
      (("3" (expand "varsem")
        (("3" (expand "sub") (("3" (propax) nil nil)) nil)) nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "E" 1)
        (("4" (expand "ivarsem")
          (("4" (expand "subterm" -2)
            (("4" (split -1)
              (("1" (inst?)
                (("1" (replace -1)
                  (("1" (expand "sub" 1 3) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (inst? -2)
        (("5" (expand "subterm" 1) (("5" (propax) nil nil)) nil)) nil))
      nil)
     ("6" (skosimp*)
      (("6" (expand "subterm" -3)
        (("6" (split -1)
          (("1" (split -2)
            (("1" (expand "E" 1)
              (("1" (inst?)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst? -3) (("2" (flatten) nil nil)) nil)) nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -3) (("2" (flatten) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skosimp*)
      (("7" (expand "subterm" -5)
        (("7" (split -1)
          (("1" (split -2)
            (("1" (split -3)
              (("1" (split -4)
                (("1" (expand "E" 1)
                  (("1" (inst?)
                    (("1" (inst?)
                      (("1" (inst?)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst? -5) (("2" (flatten) nil nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst? -5) (("2" (flatten) nil nil)) nil)) nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst? -5) (("2" (flatten) nil nil)) nil)) nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -5) (("2" (flatten) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("8" (skosimp*) (("8" (assert) nil nil)) nil))
    nil)
   proved
   ((ivarsem const-decl "Value" itlexpsemantics nil)
    (varsem const-decl "Value" itlexpsemantics nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (exp_induction formula-decl nil exp_adt nil)
    (sub const-decl "sequ" sequ nil) (index2 type-eq-decl nil sequ nil)
    (index type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (E def-decl "Value" itlexpsemantics nil)
    (SState type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (exp type-decl nil exp_adt nil) (otype type-decl nil exptype nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil))
   576 360 nil nil))
 (l_pform_M 0
  (l_pform_M-2 nil 3391249808 3391329402
   ("" (induct "p" :name "form_induction")
    (("1" (typepred "p!1") (("1" (propax) nil nil)) nil)
     ("2" (typepred "p!1") (("2" (propax) nil nil)) nil)
     ("3" (typepred "p!1") (("3" (propax) nil nil)) nil)
     ("4" (typepred "p!1") (("4" (propax) nil nil)) nil)
     ("5" (skosimp*)
      (("5" (expand "subterm" -2)
        (("5" (expand "subterm" -3)
          (("5" (expand "subterm" -4 1)
            (("5" (expand "M" 2)
              (("5" (expand "sub" 2)
                (("5" (expand "semforall")
                  (("5" (case "t(FA1_var!1) = state")
                    (("1" (assert)
                      (("1" (iff)
                        (("1" (split 2)
                          (("1" (flatten)
                            (("1" (skosimp)
                              (("1"
                                (inst
                                 -1
                                 "(# infinite:= infinite(sigma!1), len:=len(sigma!1), seq:= (lambda (i:index[State](sigma!1)) : if i=0 then seq(val!1)(i) else seq(val!1)(0) endif) #)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (inst
                                       -1
                                       "env!1"
                                       "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := IF i = 0 THEN seq(val!1)(i) ELSE seq(val!1)(0) ENDIF], PROJ_2(seq(sigma!1)(i)))) #)")
                                      (("1"
                                        (expand "sub")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "subterm" 3)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil)
                                     ("5" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skosimp)
                              (("2"
                                (inst
                                 -1
                                 "(# infinite:=false, len:=0, seq := (lambda (i: {j: nat |  j<=0}) : seq(val!1)(i)) #)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -5)
                                    (("1"
                                      (inst
                                       -1
                                       "env!1"
                                       "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) #)")
                                      (("1"
                                        (expand "sub")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "subterm" 3)
                                        (("2"
                                          (skosimp :preds? t)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "subterm" 2)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil)
                                     ("5" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp :preds? t)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "subterm" 2)
                        (("2" (iff)
                          (("2" (split 3)
                            (("1" (flatten)
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst -1 "x1!1")
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (inst
                                       -1
                                       "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!1], PROJ_2(env!1))"
                                       "sigma!1")
                                      (("1"
                                        (expand "sub")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil)
                                     ("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst -1 "x1!1")
                                  (("2"
                                    (split -2)
                                    (("1"
                                      (inst
                                       -1
                                       "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!1], PROJ_2(env!1))"
                                       "sigma!1")
                                      (("1"
                                        (expand "sub")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil)
                                     ("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (flatten)
      (("6" (expand "subterm" 1) (("6" (propax) nil nil)) nil)) nil)
     ("7" (skosimp*)
      (("7" (expand "subterm" -3 1)
        (("7" (expand "M" 2)
          (("7" (lemma "l_pexp_E")
            (("7" (inst-cp -1 "env!1" "etwo1_var!1" "sigma!1")
              (("1" (inst -1 "env!1" "etwo2_var!1" "sigma!1")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (skosimp*)
                    (("2" (lemma "l_pexp_E")
                      (("2" (assert)
                        (("2" (inst -1 "env!1" "etwo2_var!1" "sigma!1")
                          (("1" (assert) nil nil)
                           ("2" (skosimp*)
                            (("2" (assert)
                              (("2"
                                (inst
                                 -6
                                 "etwo(etwo1_var!1, etwo2_var!1, etwo3_var!1)")
                                (("2"
                                  (inst? -6)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (assert)
                  (("2"
                    (inst -4
                     "etwo(etwo1_var!1, etwo2_var!1, etwo3_var!1)")
                    (("2" (inst? -4) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp*)
      (("8" (expand "M" 2)
        (("8" (expand "semfone")
          (("8" (case "fone2_var!1 = tnot")
            (("1" (assert)
              (("1" (split -2)
                (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                 ("2" (expand "subterm" 1) (("2" (propax) nil nil))
                  nil)
                 ("3" (expand "subterm" -2)
                  (("3" (replace -1)
                    (("3" (skosimp)
                      (("3" (inst -3 "fone?_var!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "subterm" -3) (("4" (propax) nil nil))
                  nil)
                 ("5" (expand "subterm" -4 1) (("5" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (inst -2 "fone(fone1_var!1, fone2_var!1)")
                (("2" (expand "subterm" -2) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp*)
      (("9" (expand "subterm" 1)
        (("9" (expand "subterm" -5 1)
          (("9" (expand "subterm" -4)
            (("9" (expand "subterm" -3)
              (("9" (expand "M" 2)
                (("9" (expand "semftwo")
                  (("9" (case "ftwo3_var!1 = tchop")
                    (("1" (assert)
                      (("1"
                        (inst -5
                         "ftwo(ftwo1_var!1, ftwo2_var!1, ftwo3_var!1)")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (split -2)
                        (("1" (inst?)
                          (("1" (replace -1)
                            (("1" (split -2)
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "ftwo3_var!1 =timpl")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case "ftwo3_var!1 =tor")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "ftwo3_var!1 =tand")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten) nil nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (inst? -3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp)
                                (("4"
                                  (inst? -5)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (skosimp)
                                (("5"
                                  (inst? -5)
                                  (("5" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) nil nil)
                         ("3" (skosimp)
                          (("3" (inst? -3) (("3" (assert) nil nil))
                            nil))
                          nil)
                         ("4" (skosimp)
                          (("4" (inst? -5) (("4" (assert) nil nil))
                            nil))
                          nil)
                         ("5" (skosimp)
                          (("5" (inst? -5) (("5" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp*) (("10" (assert) nil nil)) nil))
    nil)
   proved
   ((Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ee2 adt-accessor-decl "[(etwo?) -> exp]" form_adt nil)
    (ee1 adt-accessor-decl "[(etwo?) -> exp]" form_adt nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (otype type-decl nil exptype nil) (exp type-decl nil exp_adt nil)
    (etwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (tchop adt-constructor-decl "(tchop?)" formtypes nil)
    (tchop? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (ftt adt-accessor-decl "[(ftwo?) -> fttype]" form_adt nil)
    (/= const-decl "boolean" notequal nil)
    (fttype type-decl nil formtypes nil)
    (ftwo? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (tnot adt-constructor-decl "(tnot?)" formtypes nil)
    (tnot? adt-recognizer-decl "[fotype -> boolean]" formtypes nil)
    (fot adt-accessor-decl "[(fone?) -> fotype]" form_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fotype type-decl nil formtypes nil)
    (fone? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (skip adt-constructor-decl "(skip?)" form_adt nil)
    (skip? adt-recognizer-decl "[form -> boolean]" form_adt nil)
    (subterm adt-def-decl "boolean" form_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (form type-decl nil form_adt nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil)
    (form_induction formula-decl nil form_adt nil)
    (pform type-eq-decl nil itlsemanticstype nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (vrtype type-decl nil exptype nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (t adt-accessor-decl "[(vr?) -> vrtype]" exp_adt nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (val!1 skolem-const-decl "IIValue" itlhelplemma nil)
    (FALSE const-decl "bool" booleans nil)
    (sigma!1 skolem-const-decl "Interval" itlhelplemma nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (val!1 skolem-const-decl "IIValue" itlhelplemma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (semforall const-decl "bool" itlformsemanticsnew nil)
    (l_pexp_E formula-decl nil itlhelplemma nil)
    (etwo2_var!1 skolem-const-decl "exp" itlhelplemma nil)
    (etwo adt-constructor-decl "[[exp, exp, ettype] -> (etwo?)]"
     form_adt nil)
    (ettype type-decl nil formtypes nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (etwo1_var!1 skolem-const-decl "exp" itlhelplemma nil)
    (fone adt-constructor-decl "[[form, fotype] -> (fone?)]" form_adt
     nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (ftwo adt-constructor-decl "[[form, form, fttype] -> (ftwo?)]"
     form_adt nil)
    (tor? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (tor adt-constructor-decl "(tor?)" formtypes nil)
    (tand adt-constructor-decl "(tand?)" formtypes nil)
    (tand? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (timpl adt-constructor-decl "(timpl?)" formtypes nil)
    (timpl? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil))
   668990 1990 t nil)
  (l_pform_M-1 nil 3391230323 3391230482
   ("" (induct "p" :name "form_induction")
    (("1" (typepred "p!1") (("1" (propax) nil nil)) nil)
     ("2" (typepred "p!1") (("2" (propax) nil nil)) nil)
     ("3" (typepred "p!1") (("3" (propax) nil nil)) nil)
     ("4" (typepred "p!1") (("4" (propax) nil nil)) nil)
     ("5" (skosimp*)
      (("5" (expand "subterm" -2)
        (("5" (expand "subterm" -3)
          (("5" (expand "subterm" -4 1)
            (("5" (expand "M" 2)
              (("5" (expand "sub" 2)
                (("5" (expand "semforall")
                  (("5" (case "t(FA1_var!1) = state")
                    (("1" (assert)
                      (("1" (iff)
                        (("1" (split 2)
                          (("1" (flatten)
                            (("1" (skosimp)
                              (("1"
                                (inst
                                 -1
                                 "(# infinite:= infinite(sigma!1), len:=len(sigma!1), seq:= (lambda (i:index[State](sigma!1)) : if i=0 then seq(val!1)(i) else seq(val!1)(0) endif) #)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (inst
                                       -1
                                       "env!1"
                                       "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := IF i = 0 THEN seq(val!1)(i) ELSE seq(val!1)(0) ENDIF], PROJ_2(seq(sigma!1)(i)))) #)")
                                      (("1"
                                        (expand "sub")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "subterm" 3)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil)
                                     ("5" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skosimp)
                              (("2"
                                (inst
                                 -1
                                 "(# infinite:=false, len:=0, seq := (lambda (i: {j: nat |  j<=0}) : seq(val!1)(i)) #)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -5)
                                    (("1"
                                      (inst
                                       -1
                                       "env!1"
                                       "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) #)")
                                      (("1"
                                        (expand "sub")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "subterm" 3)
                                        (("2"
                                          (skosimp :preds? t)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "subterm" 2)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil)
                                     ("5" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp :preds? t)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "subterm" 2)
                        (("2" (iff)
                          (("2" (split 3)
                            (("1" (flatten)
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst -1 "x1!1")
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (inst
                                       -1
                                       "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!1], PROJ_2(env!1))"
                                       "sigma!1")
                                      (("1"
                                        (expand "sub")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil)
                                     ("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst -1 "x1!1")
                                  (("2"
                                    (split -2)
                                    (("1"
                                      (inst
                                       -1
                                       "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!1], PROJ_2(env!1))"
                                       "sigma!1")
                                      (("1"
                                        (expand "sub")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil)
                                     ("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (flatten)
      (("6" (expand "subterm" 1) (("6" (propax) nil nil)) nil)) nil)
     ("7" (skosimp*)
      (("7" (expand "subterm" -3 1)
        (("7" (expand "M" 2)
          (("7" (lemma "l_pexp_E")
            (("7" (inst-cp -1 "env!1" "etwo1_var!1" "sigma!1")
              (("1" (inst -1 "env!1" "etwo2_var!1" "sigma!1")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (skosimp*)
                    (("2" (inst? -5) (("2" (flatten) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (assert)
                  (("2" (inst? -4) (("2" (flatten) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp*)
      (("8" (expand "M" 2)
        (("8" (expand "semfone")
          (("8" (case "fone2_var!1 = tnot")
            (("1" (assert)
              (("1" (split -2)
                (("1" (inst? -1)
                  (("1" (assert)
                    (("1" (replace -1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "subterm" 1) (("2" (propax) nil nil))
                  nil)
                 ("3" (expand "subterm" -2)
                  (("3" (replace -1)
                    (("3" (skosimp)
                      (("3" (inst -3 "fone?_var!1")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "subterm" -3) (("4" (propax) nil nil))
                  nil)
                 ("5" (expand "subterm" -4 1) (("5" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (inst -2 "fone(fone1_var!1, fone2_var!1)")
                (("2" (expand "subterm" -2) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp*)
      (("9" (expand "subterm" 1)
        (("9" (expand "subterm" -5 1)
          (("9" (expand "subterm" -4)
            (("9" (expand "subterm" -3)
              (("9" (expand "M" 2)
                (("9" (expand "semftwo")
                  (("9" (case "ftwo3_var!1 = tchop")
                    (("1" (assert)
                      (("1"
                        (inst -5
                         "ftwo(ftwo1_var!1, ftwo2_var!1, ftwo3_var!1)")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (split -2)
                        (("1" (inst?)
                          (("1" (replace -1)
                            (("1" (split -2)
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "ftwo3_var!1 =timpl")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case "ftwo3_var!1 =tor")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "ftwo3_var!1 =tand")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten) nil nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (inst? -3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp)
                                (("4"
                                  (inst? -5)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (skosimp)
                                (("5"
                                  (inst? -5)
                                  (("5" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) nil nil)
                         ("3" (skosimp)
                          (("3" (inst? -3) (("3" (assert) nil nil))
                            nil))
                          nil)
                         ("4" (skosimp)
                          (("4" (inst? -5) (("4" (assert) nil nil))
                            nil))
                          nil)
                         ("5" (skosimp)
                          (("5" (inst? -5) (("5" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp*) (("10" (assert) nil nil)) nil))
    nil)
   unfinished nil 1659 1150 nil nil))
 (l_var_exp_TCC1 0
  (l_var_exp_TCC1-2 nil 3391249808 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (exp type-decl nil exp_adt nil))
   nil nil nil nil)
  (l_var_exp_TCC1-1 nil 3391230323 3391230330
   ("" (subtype-tcc) nil nil) proved
   ((exp type-decl nil exp_adt nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   109 70 nil nil))
 (l_var_exp 0
  (l_var_exp-2 nil 3391249808 nil
   ("" (induct "e1" :name "exp_induction")
    (("1" (expand "E") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "freeexp" 1)
        (("2" (expand "singleton")
          (("2" (expand "member")
            (("2" (case "t(va!1) = state")
              (("1" (assert)
                (("1" (skosimp)
                  (("1" (expand "E")
                    (("1" (expand "varsem")
                      (("1" (case "vr2_var!1 = state")
                        (("1" (assert)
                          (("1" (case "v(va!1)=vr1_var!1")
                            (("1" (case "t(va!1)=vr2_var!1")
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (rewrite "exp_vr_extensionality")
                                  nil
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (skosimp)
                  (("2" (expand "E")
                    (("2" (expand "varsem")
                      (("2" (case "vr2_var!1 = state")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (case "v(va!1)=vr1_var!1")
                            (("1" (case "t(va!1)=vr2_var!1")
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (rewrite "exp_vr_extensionality")
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "t(va!1)=static")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1" (subtype-tcc) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "freeexp" 1)
        (("3" (case "t(va!1) = state")
          (("1" (assert)
            (("1" (skosimp)
              (("1" (expand "E" 2)
                (("1" (expand "ivarsem")
                  (("1" (inst?)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (replace -2) (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skosimp)
              (("2" (expand "E" 3)
                (("2" (expand "ivarsem")
                  (("2" (inst?)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (inst?)
                          (("2" (replace -1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "freeexp" 1)
        (("4" (case "t(va!1) = state")
          (("1" (assert)
            (("1" (skosimp)
              (("1" (expand "E" 2)
                (("1" (expand "onesem")
                  (("1" (case "one2_var!1 = tnext")
                    (("1" (assert)
                      (("1" (case "infinite(sigma!1)")
                        (("1" (assert)
                          (("1" (expand "suf" 2)
                            (("1"
                              (inst -4 "env!1" "(# infinite := TRUE,
                     len := len(sigma!1),
                     seq
                       := (restrict(LAMBDA (x: {i: nat | TRUE}):
                                      seq(sigma!1)(1 + x))) #)" "va!1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -4
                                   "(# infinite:=true,len:=len(sigma!1),seq:=(lambda (x:{i:nat|true::bool}): seq(val!1)(1+x)) #)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "restrict")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "(# infinite := TRUE,
                           len := len(sigma!1),
                           seq := LAMBDA (s: {i_3632: nat | TRUE}): seq(sigma!1)(1 + s) #) =(# infinite := TRUE,
                           len := len(sigma!1),
                           seq
                             := LAMBDA (s: {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                                  seq(sigma!1)(1 + s) #)")
                                          (("1"
                                            (replace -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "1<=len(sigma!1)")
                            (("1" (assert)
                              (("1"
                                (expand "suf" 3)
                                (("1"
                                  (inst
                                   -4
                                   "env!1"
                                   "(# infinite := FALSE,
                                                 len := len(sigma!1) - 1,
                                                 seq :=
                                                   (LAMBDA (x: {i: nat | i
                                                                  <= len(sigma!1) - 1}):
                                                      seq(sigma!1)(1 + x))
                                                 #)"
                                   "va!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -4
                                       "(#infinite := FALSE, len:=len(sigma!1)-1,seq:=(lambda (x:{i:nat| i<=len(sigma!1)-1}): seq(val!1)(1 + x))#)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "infinite(sigma!1)")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (expand "suf" 4)
                            (("2"
                              (inst -2 "env!1" "(# infinite := FALSE,
                                             len := 0,
                                             seq :=
                                               (LAMBDA (x: {i: nat | i <= 0}):
                                                  seq(sigma!1)(x + len(sigma!1)))
                                             #)" "va!1")
                              (("2"
                                (assert)
                                (("2"
                                  (inst
                                   -2
                                   "(# infinite:=false, len:=0, seq:=(lambda (x:{i:nat|i<=0}): seq(val!1)(x+len(sigma!1)))#)")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skosimp)
              (("2" (expand "E" 3)
                (("2" (expand "onesem")
                  (("2" (case "one2_var!1 = tnext")
                    (("1" (assert)
                      (("1" (case "infinite(sigma!1)")
                        (("1" (assert)
                          (("1"
                            (inst -3 "env!1" "suf(sigma!1, 1)" "va!1")
                            (("1" (assert) (("1" (inst?) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "1 <= len(sigma!1)")
                            (("1" (assert)
                              (("1"
                                (inst
                                 -3
                                 "env!1"
                                 "suf(sigma!1, 1)"
                                 "va!1")
                                (("1"
                                  (assert)
                                  (("1" (inst?) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "infinite(sigma!1)")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2"
                            (inst -1 "env!1"
                             "suf(sigma!1,len(sigma!1))" "va!1")
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (expand "freeexp" 1)
        (("5" (expand "union")
          (("5" (expand "member" 1 1)
            (("5" (flatten)
              (("5" (case "t(va!1) = state")
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (expand "E" 3)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skosimp)
                    (("2" (expand "E" 4)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (inst?)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp*)
      (("6" (expand "member" 1)
        (("6" (expand "freeexp" 1)
          (("6" (expand "union")
            (("6" (expand "member" 1 (1 4))
              (("6" (flatten)
                (("6" (expand "E" 5)
                  (("6" (case "t(va!1) = state")
                    (("1" (assert)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (skosimp*)
                        (("2" (inst?)
                          (("2" (inst?)
                            (("2" (inst?)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t) (("7" (assert) nil nil)) nil))
    nil)
   proved-complete
   ((index type-eq-decl nil sequ nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (freeexp def-decl "setof[(vr?)]" itlexpfree nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (t adt-accessor-decl "[(vr?) -> vrtype]" exp_adt nil)
    (vrtype type-decl nil exptype nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (exp type-decl nil exp_adt nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (E def-decl "Value" itlexpsemantics nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (exp_induction formula-decl nil exp_adt nil)
    (static adt-constructor-decl "(static?)" exptype nil)
    (static? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (exp_vr_extensionality formula-decl nil exp_adt nil)
    (vr adt-constructor-decl "[[nat, vrtype] -> (vr?)]" exp_adt nil)
    (varsem const-decl "Value" itlexpsemantics nil)
    (ivarsem const-decl "Value" itlexpsemantics nil)
    (sequ type-eq-decl nil sequ nil) (otype type-decl nil exptype nil)
    (tnext? adt-recognizer-decl "[otype -> boolean]" exptype nil)
    (tnext adt-constructor-decl "(tnext?)" exptype nil)
    (suf const-decl "sequ" sequ nil)
    (onesem const-decl "Value" itlexpsemantics nil))
   nil nil nil nil)
  (l_var_exp-1 nil 3391230323 3391230485
   ("" (induct "e1" :name "exp_induction")
    (("1" (expand "E") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "freeexp" 1)
        (("2" (expand "singleton")
          (("2" (expand "member")
            (("2" (case "t(va!1) = state")
              (("1" (assert)
                (("1" (skosimp)
                  (("1" (expand "E")
                    (("1" (expand "varsem")
                      (("1" (case "vr2_var!1 = state")
                        (("1" (assert)
                          (("1" (case "v(va!1)=vr1_var!1")
                            (("1" (case "t(va!1)=vr2_var!1")
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (rewrite "exp_vr_extensionality")
                                  nil
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (skosimp)
                  (("2" (expand "E")
                    (("2" (expand "varsem")
                      (("2" (case "vr2_var!1 = state")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (case "v(va!1)=vr1_var!1")
                            (("1" (case "t(va!1)=vr2_var!1")
                              (("1"
                                (expand "restrict")
                                (("1"
                                  (rewrite "exp_vr_extensionality")
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "t(va!1)=static")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1" (subtype-tcc) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "freeexp" 1)
        (("3" (case "t(va!1) = state")
          (("1" (assert)
            (("1" (skosimp)
              (("1" (expand "E" 2)
                (("1" (expand "ivarsem")
                  (("1" (inst?)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (replace -2) (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skosimp)
              (("2" (expand "E" 3)
                (("2" (expand "ivarsem")
                  (("2" (inst?)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (inst?)
                          (("2" (replace -1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "freeexp" 1)
        (("4" (case "t(va!1) = state")
          (("1" (assert)
            (("1" (skosimp)
              (("1" (expand "E" 2)
                (("1" (expand "onesem")
                  (("1" (case "one2_var!1 = tnext")
                    (("1" (assert)
                      (("1" (case "infinite(sigma!1)")
                        (("1" (assert)
                          (("1" (expand "suf" 2)
                            (("1"
                              (inst -4 "env!1" "(# infinite := TRUE,
                     len := len(sigma!1),
                     seq
                       := (restrict(LAMBDA (x: {i: nat | TRUE}):
                                      seq(sigma!1)(1 + x))) #)" "va!1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -4
                                   "(# infinite:=true,len:=len(sigma!1),seq:=(lambda (x:{i:nat|true::bool}): seq(val!1)(1+x)) #)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "restrict")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "(# infinite := TRUE,
                           len := len(sigma!1),
                           seq := LAMBDA (s: {i_3632: nat | TRUE}): seq(sigma!1)(1 + s) #) =(# infinite := TRUE,
                           len := len(sigma!1),
                           seq
                             := LAMBDA (s: {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                                  seq(sigma!1)(1 + s) #)")
                                          (("1"
                                            (replace -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality
                                             1
                                             :hide?
                                             t)
                                            (("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "1<=len(sigma!1)")
                            (("1" (assert)
                              (("1"
                                (expand "suf" 3)
                                (("1"
                                  (inst
                                   -4
                                   "env!1"
                                   "(# infinite := FALSE,
                                                 len := len(sigma!1) - 1,
                                                 seq :=
                                                   (LAMBDA (x: {i: nat | i
                                                                  <= len(sigma!1) - 1}):
                                                      seq(sigma!1)(1 + x))
                                                 #)"
                                   "va!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -4
                                       "(#infinite := FALSE, len:=len(sigma!1)-1,seq:=(lambda (x:{i:nat| i<=len(sigma!1)-1}): seq(val!1)(1 + x))#)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "infinite(sigma!1)")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (expand "suf" 4)
                            (("2"
                              (inst -2 "env!1" "(# infinite := FALSE,
                                             len := 0,
                                             seq :=
                                               (LAMBDA (x: {i: nat | i <= 0}):
                                                  seq(sigma!1)(x + len(sigma!1)))
                                             #)" "va!1")
                              (("2"
                                (assert)
                                (("2"
                                  (inst
                                   -2
                                   "(# infinite:=false, len:=0, seq:=(lambda (x:{i:nat|i<=0}): seq(val!1)(x+len(sigma!1)))#)")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skosimp)
              (("2" (expand "E" 3)
                (("2" (expand "onesem")
                  (("2" (case "one2_var!1 = tnext")
                    (("1" (assert)
                      (("1" (case "infinite(sigma!1)")
                        (("1" (assert)
                          (("1"
                            (inst -3 "env!1" "suf(sigma!1, 1)" "va!1")
                            (("1" (assert) (("1" (inst?) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "1 <= len(sigma!1)")
                            (("1" (assert)
                              (("1"
                                (inst
                                 -3
                                 "env!1"
                                 "suf(sigma!1, 1)"
                                 "va!1")
                                (("1"
                                  (assert)
                                  (("1" (inst?) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "infinite(sigma!1)")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2"
                            (inst -1 "env!1"
                             "suf(sigma!1,len(sigma!1))" "va!1")
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (expand "freeexp" 1)
        (("5" (expand "union")
          (("5" (expand "member" 1 1)
            (("5" (flatten)
              (("5" (case "t(va!1) = state")
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (expand "E" 3)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skosimp)
                    (("2" (expand "E" 4)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (inst?)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp*)
      (("6" (expand "member" 1)
        (("6" (expand "freeexp" 1)
          (("6" (expand "union")
            (("6" (expand "member" 1 (1 4))
              (("6" (flatten)
                (("6" (expand "E" 5)
                  (("6" (case "t(va!1) = state")
                    (("1" (assert)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (skosimp*)
                        (("2" (inst?)
                          (("2" (inst?)
                            (("2" (inst?)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t) (("7" (assert) nil nil)) nil))
    nil)
   proved
   ((onesem const-decl "Value" itlexpsemantics nil)
    (suf const-decl "sequ" sequ nil)
    (tnext adt-constructor-decl "(tnext?)" exptype nil)
    (tnext? adt-recognizer-decl "[otype -> boolean]" exptype nil)
    (otype type-decl nil exptype nil) (sequ type-eq-decl nil sequ nil)
    (ivarsem const-decl "Value" itlexpsemantics nil)
    (varsem const-decl "Value" itlexpsemantics nil)
    (vr adt-constructor-decl "[[nat, vrtype] -> (vr?)]" exp_adt nil)
    (exp_vr_extensionality formula-decl nil exp_adt nil)
    (static? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (static adt-constructor-decl "(static?)" exptype nil)
    (exp_induction formula-decl nil exp_adt nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (E def-decl "Value" itlexpsemantics nil)
    (SState type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (exp type-decl nil exp_adt nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (vrtype type-decl nil exptype nil)
    (t adt-accessor-decl "[(vr?) -> vrtype]" exp_adt nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (freeexp def-decl "setof[(vr?)]" itlexpfree nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   3409 2510 nil nil))
 (l_var_form_TCC1 0
  (l_var_form_TCC1-2 nil 3391249808 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (exp type-decl nil exp_adt nil))
   nil nil nil nil)
  (l_var_form_TCC1-1 nil 3391230323 3391230330
   ("" (subtype-tcc) nil nil) proved
   ((exp type-decl nil exp_adt nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   129 50 nil nil))
 (l_var_form 0
  (l_var_form-2 nil 3391249808 nil
   ("" (induct "f1" :name "form_induction")
    (("1" (skosimp*)
      (("1" (expand "member" 1)
        (("1" (expand "freeform" 1)
          (("1" (expand "difference")
            (("1" (expand "singleton")
              (("1" (expand "member" 1 2)
                (("1" (case "t(va!1) = state")
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (skosimp)
                        (("1" (expand "M" 2)
                          (("1" (expand "semforall")
                            (("1" (case "t(FA1_var!1) = state")
                              (("1"
                                (assert)
                                (("1"
                                  (iff)
                                  (("1"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -1 "val!2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -6
                                               "env!1"
                                               "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!2)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "va!1 = FA1_var!1")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst -7 "val!2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -6 "val!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "(LAMBDA (i: index[State]((# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1 (seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!2)(i)], PROJ_2(seq(sigma!1)(i)))) #))): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!2)(i)] WITH [(v(va!1)) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(va!1)) := seq(val!1)(i)] WITH [(v(FA1_var!1)) := seq(val!2)(i)], PROJ_2(seq(sigma!1)(i))))")
                                                        (("1"
                                                          (apply-extensionality
                                                           1
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "v(va!1)=v(FA1_var!1)")
                                                          (("1"
                                                            (rewrite
                                                             "exp_vr_extensionality")
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp :preds? t)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp :preds? t)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst -1 "val!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -6
                                                 "env!1"
                                                 "(# infinite := infinite(sigma!1),len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!2)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                                 "va!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "va!1=FA1_var!1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "v(va!1)=v(FA1_var!1)")
                                                      (("1"
                                                        (rewrite
                                                         "exp_vr_extensionality")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -6
                                                         "val!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp :preds? t)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (iff)
                                  (("2"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -1 "x1!1")
                                          (("1"
                                            (inst
                                             -3
                                             "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!1], PROJ_2(env!1))"
                                             "sigma!1"
                                             "va!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -3 "val!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst -1 "x1!1")
                                          (("2"
                                            (inst
                                             -3
                                             "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!1], PROJ_2(env!1))"
                                             "sigma!1"
                                             "va!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -3 "val!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (skosimp)
                          (("2" (expand "M" 1)
                            (("2" (expand "semforall")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (split 2)
                      (("1" (skosimp)
                        (("1" (expand "M" 3)
                          (("1" (expand "semforall")
                            (("1" (case "t(FA1_var!1) = state")
                              (("1"
                                (assert)
                                (("1"
                                  (iff)
                                  (("1"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -1 "val!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -5
                                               "env!1"
                                               "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)):(PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -5 "x1!1")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp :preds? t)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst -1 "val!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -5
                                               "env!1"
                                               "(# infinite := infinite(sigma!1),len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -5 "x1!1")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp :preds? t)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (iff)
                                  (("2"
                                    (split 4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -1 "x1!2")
                                          (("1"
                                            (inst
                                             -2
                                             "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!2], PROJ_2(env!1))"
                                             "sigma!1"
                                             "va!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "v(va!1)=v(FA1_var!1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (inst -3 "x1!2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -2 "x1!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst -1 "x1!2")
                                          (("2"
                                            (inst
                                             -2
                                             "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!2],
                                PROJ_2(env!1))"
                                             "sigma!1"
                                             "va!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "v(va!1)=v(FA1_var!1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (inst -3 "x1!2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -2 "x1!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (skosimp)
                          (("2" (expand "M" 2)
                            (("2" (expand "semforall")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "M") (("2" (propax) nil nil)) nil)
     ("3" (skosimp*)
      (("3" (expand "freeform" 1)
        (("3" (expand "union")
          (("3" (expand "member" 1 1)
            (("3" (flatten)
              (("3" (expand "M" 3)
                (("3" (lemma "l_var_exp")
                  (("3"
                    (inst-cp -1 "etwo1_var!1" "env!1" "sigma!1" "va!1")
                    (("3"
                      (inst -1 "etwo2_var!1" "env!1" "sigma!1" "va!1")
                      (("3" (case "t(va!1)=state")
                        (("1" (assert)
                          (("1" (skosimp)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (skosimp)
                            (("2" (inst?)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "freeform" 1)
        (("4" (case "t(va!1) = state")
          (("1" (assert)
            (("1" (skosimp)
              (("1" (expand "M" 2)
                (("1" (expand "semfone")
                  (("1" (case "fone2_var!1 = tnot")
                    (("1" (assert)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "l_old_new_1")
                        (("2" (assert)
                          (("2" (lemma "l_old_new_1")
                            (("2"
                              (inst-cp -1 "M(fone1_var!1)" "env!1"
                               "sigma!1")
                              (("2"
                                (replace -2 3 rl)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (inst
                                       -1
                                       "M(fone1_var!1)"
                                       "env!1"
                                       "(# infinite := infinite(sigma!1),
               len := len(sigma!1),
               seq
                 := LAMBDA (i: index[State](sigma!1)):
                      (PROJ_1(seq(sigma!1)(i))
                         WITH [(v(va!1)) := seq(val!1)(i)],
                       PROJ_2(seq(sigma!1)(i))) #)")
                                      (("1"
                                        (replace -1 3 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (iff)
                                            (("1"
                                              (split 3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "semcsold")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "csinner")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (hide 1)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "l!1")
                                                              (("2"
                                                                (case
                                                                 "infinite(l!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "i!1")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "sub")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "env!1"
                                                                               "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                               "va!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "(# infinite:=false,len:=seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq:= (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(val!1)(x + seq(l!1)(i!1)))#)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "infinite(sigma!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "suf")
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "env!1"
                                                                             "(# infinite := TRUE,len := len(sigma!1), seq := (LAMBDA (x: {i: nat | TRUE}): seq(sigma!1)(x + seq(l!1)(len(l!1)))) #)"
                                                                             "va!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "(# infinite := TRUE, len := len(sigma!1),seq := (LAMBDA (x: {i: nat | TRUE}): seq(val!1)(x + seq(l!1)(len(l!1)))) #)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := (LAMBDA (x: {i: nat | TRUE}):
                   seq(sigma!1)(x + seq(l!1)(len(l!1)))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + seq(l!1)(len(l!1))) #)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply-extensionality
                                                                                       1
                                                                                       :hide?
                                                                                       t)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         1
                                                                                         :hide?
                                                                                         t)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sub")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "env!1"
                                                                                         "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                                         "va!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "(# infinite:=false,len:=seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq:= (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(val!1)(x + seq(l!1)(i!1)))#)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "suf")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -6
                                                                                     "env!1"
                                                                                     "(# infinite := FALSE, len := len(sigma!1) - seq(l!1)(len(l!1)), seq :=(LAMBDA (x: {i: nat | i <= len(sigma!1) - seq(l!1)(len(l!1))}): seq(sigma!1)(x + seq(l!1)(len(l!1)))) #)"
                                                                                     "va!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -6
                                                                                         "(# infinite := FALSE, len := len(sigma!1) - seq(l!1)(len(l!1)), seq := (LAMBDA (x: {i: nat | i <= len(sigma!1) - seq(l!1)(len(l!1))}): seq(val!1)(x + seq(l!1)(len(l!1)))) #)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "sub")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -9
                                                                                         "env!1"
                                                                                         "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                                         "va!1")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -9
                                                                                             "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):seq(val!1)(x + seq(l!1)(i!1))) #)")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (replace
                                                                                                 -9)
                                                                                                (("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "semcsold")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "csinner")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             2
                                                             "l!1")
                                                            (("2"
                                                              (case
                                                               "infinite(l!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "i!1")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "sub")
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "env!1"
                                                                             "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i<= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                             "va!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):seq(val!1)(x + seq(l!1)(i!1))) #)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -7)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "infinite(sigma!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "suf")
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "env!1"
                                                                           "(# infinite := TRUE, len := len(sigma!1), seq := (LAMBDA (x: {i: nat | infinite(sigma!1) OR
                                    i <= len(sigma!1)}):seq(sigma!1)(x + seq(l!1)(len(l!1)))) #)"
                                                                           "va!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "(# infinite := TRUE, len := len(sigma!1), seq := (LAMBDA (x: {i: nat | infinite(sigma!1) OR
                                    i <= len(sigma!1)}): seq(val!1)(x + seq(l!1)(len(l!1)))) #)")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "i!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "sub")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "env!1"
                                                                                     "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                                     "va!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(val!1)(x + seq(l!1)(i!1))) #)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -8)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           4)
                                                                          (("1"
                                                                            (expand
                                                                             "suf")
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "env!1"
                                                                               "(# infinite := FALSE, len := len(sigma!1) - seq(l!1)(len(l!1)), seq := (LAMBDA (x: {i: nat | i <= len(sigma!1) - seq(l!1)(len(l!1))}): seq(sigma!1)(x + seq(l!1)(len(l!1)))) #)"
                                                                               "va!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -6
                                                                                   "(# infinite := FALSE, len := len(sigma!1) - seq(l!1)(len(l!1)), seq :=(LAMBDA (x: {i: nat | i <= len(sigma!1) - seq(l!1)(len(l!1))}): seq(val!1)(x + seq(l!1)(len(l!1)))) #)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -6)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sub")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -9
                                                                                         "env!1"
                                                                                         "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                                         "va!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -9
                                                                                             "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq :=(LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):seq(val!1)(x + seq(l!1)(i!1))) #)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (skosimp :preds? t)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skosimp)
              (("2" (expand "M" 3)
                (("2" (expand "semfone")
                  (("2" (case "fone2_var!1 = tnot")
                    (("1" (assert)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (replace -2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "l_old_new_1")
                        (("2"
                          (inst-cp -1 "M(fone1_var!1)" "env!1"
                           "sigma!1")
                          (("2" (replace -2 4 rl)
                            (("2"
                              (inst -1 "M(fone1_var!1)"
                               "(PROJ_1(env!1) WITH [(v(va!1)) := x1!1], PROJ_2(env!1))"
                               "sigma!1")
                              (("2"
                                (replace -1 4 rl)
                                (("2"
                                  (hide -1 -2)
                                  (("2"
                                    (expand "semcsold")
                                    (("2"
                                      (expand "csinner")
                                      (("2"
                                        (iff)
                                        (("2"
                                          (split 4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst 2 "l!1")
                                                  (("2"
                                                    (case
                                                     "infinite(l!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "i!1")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "env!1"
                                                                 "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                 "va!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "infinite(sigma!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split 3)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "env!1"
                                                               "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                               "va!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?
                                                                   -5)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "i!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "env!1"
                                                                         "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                         "va!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst?
                                                                             -7)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 4)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "env!1"
                                                                   "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                   "va!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?
                                                                       -5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "env!1"
                                                                             "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                             "va!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst 2 "l!1")
                                                  (("2"
                                                    (case
                                                     "infinite(l!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "i!1")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "env!1"
                                                                 "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                 "va!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "infinite(sigma!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split 3)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "env!1"
                                                               "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                               "va!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?
                                                                   -5)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "i!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "env!1"
                                                                         "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                         "va!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 4)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "env!1"
                                                                   "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                   "va!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?
                                                                       -5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "env!1"
                                                                             "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                             "va!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (expand "freeform" 1)
        (("5" (expand "union")
          (("5" (expand "member" 1 1)
            (("5" (flatten)
              (("5" (case "t(va!1) = state")
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (expand "M" 3)
                      (("1" (expand "semftwo")
                        (("1" (case "ftwo3_var!1=tchop")
                          (("1" (assert)
                            (("1" (expand "^^")
                              (("1"
                                (iff)
                                (("1"
                                  (split 3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 1 "m!1")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (expand "sub")
                                              (("1"
                                                (inst
                                                 -5
                                                 "env!1"
                                                 "(# infinite := FALSE, len := m!1, seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(sigma!1)(x))#)"
                                                 "va!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "(# infinite := FALSE, len := m!1, seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(val!1)(x)) #)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp
                                                       :preds?
                                                       t)
                                                      (("2"
                                                        (typepred
                                                         "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp :preds? t)
                                                  (("2"
                                                    (typepred "m!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "suf")
                                              (("2"
                                                (case
                                                 "infinite(sigma!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -6)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (inst
                                                         -6
                                                         "env!1"
                                                         "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + m!1) #)"
                                                         "va!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -6
                                                             "(# infinite := TRUE, len := len(sigma!1), seq := (LAMBDA (x: {i: nat | infinite(val!1) OR i<=len(val!1)}):seq(val!1)(x + m!1)) #)")
                                                            (("1"
                                                              (case
                                                               "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := TRUE,
                                          len := len(sigma!1),
                                          seq
                                          := LAMBDA
                                             (x:
                                              {i: nat |
                                               infinite(sigma!1)
                                               OR
                                               i <= len(sigma!1)}):
                                             seq(sigma!1)(x + m!1) #))):
                  (PROJ_1(seq(sigma!1)(i + m!1))
                     WITH [(v(va!1)) := seq(val!1)(i + m!1)],
                   PROJ_2(seq(sigma!1)(i + m!1))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i_2186: nat |
                                   infinite(sigma!1) OR
                                    i_2186 <= len(sigma!1)}):
                  (PROJ_1(seq(sigma!1)(x + m!1))
                     WITH [(v(va!1)) := seq(val!1)(x + m!1)],
                   PROJ_2(seq(sigma!1)(x + m!1))) #)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -5)
                                                    (("2"
                                                      (inst
                                                       -5
                                                       "env!1"
                                                       "(# infinite := FALSE, len := len(sigma!1) - m!1, seq := (LAMBDA (x: {i: nat | i<= len(sigma!1) - m!1}): seq(sigma!1)(x + m!1)) #)"
                                                       "va!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "(# infinite := FALSE, len := len(sigma!1) - m!1, seq := (LAMBDA (x: {i: nat | i <= len(sigma!1) - m!1}): seq(val!1)(x + m!1)) #)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "m!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst? -5)
                                          (("2"
                                            (inst? -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst? -5)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 1 "m!1")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (expand "sub")
                                              (("1"
                                                (inst
                                                 -5
                                                 "env!1"
                                                 "(# infinite := FALSE, len := m!1, seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(sigma!1)(x)) #)"
                                                 "va!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "(# infinite := FALSE, len := m!1, seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(val!1)(x)) #)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "m!1")
                                                      (("2"
                                                        (skosimp
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "m!1")
                                                  (("2"
                                                    (skosimp :preds? t)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "suf")
                                              (("2"
                                                (case
                                                 "infinite(sigma!1)")
                                                (("1"
                                                  (hide -6)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "env!1"
                                                       "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + m!1) #)"
                                                       "va!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "(# infinite := TRUE,
                  len := len(sigma!1),
                  seq :=LAMBDA (x:
                          {i: nat |
                                   infinite(val!1) OR
                                    i <= len(val!1)}):
                  seq(val!1)(x + m!1) #)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := TRUE,
                                          len := len(sigma!1),
                                          seq
                                          := LAMBDA
                                             (x:
                                              {i: nat |
                                               infinite(sigma!1)
                                               OR
                                               i <= len(sigma!1)}):
                                             seq(sigma!1)(x + m!1) #))):
                  (PROJ_1(seq(sigma!1)(i + m!1))
                     WITH [(v(va!1)) := seq(val!1)(i + m!1)],
                   PROJ_2(seq(sigma!1)(i + m!1))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i_2220: nat |
                                   infinite(sigma!1) OR
                                    i_2220 <= len(sigma!1)}):
                  (PROJ_1(seq(sigma!1)(x + m!1))
                     WITH [(v(va!1)) := seq(val!1)(x + m!1)],
                   PROJ_2(seq(sigma!1)(x + m!1))) #)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -5)
                                                    (("2"
                                                      (inst
                                                       -5
                                                       "env!1"
                                                       "(# infinite := FALSE,
           len := len(sigma!1) - m!1,
           seq
             := LAMBDA (x: {i: nat | i <= len(sigma!1) - m!1}):
                  seq(sigma!1)(x + m!1) #)"
                                                       "va!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "(# infinite := FALSE,
              len := len(sigma!1) - m!1,
              seq := LAMBDA (x: {i: nat | i <= len(val!1) - m!1}):
                  seq(val!1)(x + m!1) #)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "m!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "m!1")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -6)
                                              (("2"
                                                (inst
                                                 -5
                                                 "env!1"
                                                 "sigma!1"
                                                 "va!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -5 "val!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst?)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (case
                                                   "ftwo3_var!1=tand")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "ftwo3_var!1=tor")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "ftwo3_var!1=timpl")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skosimp)
                    (("2" (expand "M" 4)
                      (("2" (expand "semftwo")
                        (("2" (case "ftwo3_var!1=tchop")
                          (("1" (assert)
                            (("1" (expand "^^")
                              (("1"
                                (iff)
                                (("1"
                                  (split 4)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (skosimp :preds? t)
                                        (("1"
                                          (inst 1 "m!1")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (inst
                                               -5
                                               "env!1"
                                               "sub(sigma!1, 0, m!1)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -6
                                               "env!1"
                                               "suf(sigma!1, m!1)"
                                               "va!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst? -6)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst
                                           -4
                                           "env!1"
                                           "sigma!1"
                                           "va!1")
                                          (("2"
                                            (assert)
                                            (("2" (inst? -4) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 1 "m!1")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (inst
                                               -4
                                               "env!1"
                                               "sub(sigma!1, 0, m!1)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -4)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -5
                                               "env!1"
                                               "suf(sigma!1, m!1)"
                                               "va!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst? -5)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst
                                           -4
                                           "env!1"
                                           "sigma!1"
                                           "va!1")
                                          (("2"
                                            (assert)
                                            (("2" (inst? -4) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst?)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (case
                                                   "ftwo3_var!1 =tand")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "ftwo3_var!1 =tor")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "ftwo3_var!1 =timpl")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil))
    nil)
   proved-complete
   ((index type-eq-decl nil sequ nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (freeform def-decl "setof[(vr?)]" itlformfree nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (t adt-accessor-decl "[(vr?) -> vrtype]" exp_adt nil)
    (vrtype type-decl nil exptype nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (exp type-decl nil exp_adt nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (form type-decl nil form_adt nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (form_induction formula-decl nil form_adt nil)
    (semforall const-decl "bool" itlformsemanticsnew nil)
    (exp_vr_extensionality formula-decl nil exp_adt nil)
    (index2 type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (fotype type-decl nil formtypes nil)
    (tnot? adt-recognizer-decl "[fotype -> boolean]" formtypes nil)
    (tnot adt-constructor-decl "(tnot?)" formtypes nil)
    (l_old_new_1 formula-decl nil itlformsemanticsfixpoints nil)
    (csinner const-decl "bool" itlformsemanticsfixpoints nil)
    (sub const-decl "sequ" sequ nil) (suf const-decl "sequ" sequ nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (semcsold const-decl "bool" itlformsemanticsfixpoints nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (tor? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (tor adt-constructor-decl "(tor?)" formtypes nil)
    (timpl adt-constructor-decl "(timpl?)" formtypes nil)
    (timpl? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (tand adt-constructor-decl "(tand?)" formtypes nil)
    (tand? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (tchop adt-constructor-decl "(tchop?)" formtypes nil)
    (tchop? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (fttype type-decl nil formtypes nil))
   nil nil nil nil)
  (l_var_form-1 nil 3391230323 3391230499
   ("" (induct "f1" :name "form_induction")
    (("1" (skosimp*)
      (("1" (expand "member" 1)
        (("1" (expand "freeform" 1)
          (("1" (expand "difference")
            (("1" (expand "singleton")
              (("1" (expand "member" 1 2)
                (("1" (case "t(va!1) = state")
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (skosimp)
                        (("1" (expand "M" 2)
                          (("1" (expand "semforall")
                            (("1" (case "t(FA1_var!1) = state")
                              (("1"
                                (assert)
                                (("1"
                                  (iff)
                                  (("1"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -1 "val!2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -6
                                               "env!1"
                                               "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!2)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "va!1 = FA1_var!1")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst -7 "val!2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -6 "val!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "(LAMBDA (i: index[State]((# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1 (seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!2)(i)], PROJ_2(seq(sigma!1)(i)))) #))): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!2)(i)] WITH [(v(va!1)) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) = (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(va!1)) := seq(val!1)(i)] WITH [(v(FA1_var!1)) := seq(val!2)(i)], PROJ_2(seq(sigma!1)(i))))")
                                                        (("1"
                                                          (apply-extensionality
                                                           1
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "v(va!1)=v(FA1_var!1)")
                                                          (("1"
                                                            (rewrite
                                                             "exp_vr_extensionality")
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (skosimp
                                                           :preds?
                                                           t)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp :preds? t)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp :preds? t)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst -1 "val!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -6
                                                 "env!1"
                                                 "(# infinite := infinite(sigma!1),len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!2)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                                 "va!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "va!1=FA1_var!1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "v(va!1)=v(FA1_var!1)")
                                                      (("1"
                                                        (rewrite
                                                         "exp_vr_extensionality")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -6
                                                         "val!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp :preds? t)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (iff)
                                  (("2"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -1 "x1!1")
                                          (("1"
                                            (inst
                                             -3
                                             "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!1], PROJ_2(env!1))"
                                             "sigma!1"
                                             "va!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -3 "val!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst -1 "x1!1")
                                          (("2"
                                            (inst
                                             -3
                                             "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!1], PROJ_2(env!1))"
                                             "sigma!1"
                                             "va!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -3 "val!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (skosimp)
                          (("2" (expand "M" 1)
                            (("2" (expand "semforall")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (split 2)
                      (("1" (skosimp)
                        (("1" (expand "M" 3)
                          (("1" (expand "semforall")
                            (("1" (case "t(FA1_var!1) = state")
                              (("1"
                                (assert)
                                (("1"
                                  (iff)
                                  (("1"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -1 "val!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -5
                                               "env!1"
                                               "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)):(PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -5 "x1!1")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp :preds? t)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst -1 "val!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -5
                                               "env!1"
                                               "(# infinite := infinite(sigma!1),len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1(seq(sigma!1)(i)) WITH [(v(FA1_var!1)) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -5 "x1!1")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp :preds? t)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (iff)
                                  (("2"
                                    (split 4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -1 "x1!2")
                                          (("1"
                                            (inst
                                             -2
                                             "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!2], PROJ_2(env!1))"
                                             "sigma!1"
                                             "va!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "v(va!1)=v(FA1_var!1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (inst -3 "x1!2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -2 "x1!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst -1 "x1!2")
                                          (("2"
                                            (inst
                                             -2
                                             "(PROJ_1(env!1) WITH [(v(FA1_var!1)) := x1!2],
                                PROJ_2(env!1))"
                                             "sigma!1"
                                             "va!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "v(va!1)=v(FA1_var!1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (inst -3 "x1!2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -2 "x1!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (skosimp)
                          (("2" (expand "M" 2)
                            (("2" (expand "semforall")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "M") (("2" (propax) nil nil)) nil)
     ("3" (skosimp*)
      (("3" (expand "freeform" 1)
        (("3" (expand "union")
          (("3" (expand "member" 1 1)
            (("3" (flatten)
              (("3" (expand "M" 3)
                (("3" (lemma "l_var_exp")
                  (("3"
                    (inst-cp -1 "etwo1_var!1" "env!1" "sigma!1" "va!1")
                    (("3"
                      (inst -1 "etwo2_var!1" "env!1" "sigma!1" "va!1")
                      (("3" (case "t(va!1)=state")
                        (("1" (assert)
                          (("1" (skosimp)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (skosimp)
                            (("2" (inst?)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "freeform" 1)
        (("4" (case "t(va!1) = state")
          (("1" (assert)
            (("1" (skosimp)
              (("1" (expand "M" 2)
                (("1" (expand "semfone")
                  (("1" (case "fone2_var!1 = tnot")
                    (("1" (assert)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "l_old_new_1")
                        (("2" (assert)
                          (("2" (lemma "l_old_new_1")
                            (("2"
                              (inst-cp -1 "M(fone1_var!1)" "env!1"
                               "sigma!1")
                              (("2"
                                (replace -2 3 rl)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (inst
                                       -1
                                       "M(fone1_var!1)"
                                       "env!1"
                                       "(# infinite := infinite(sigma!1),
               len := len(sigma!1),
               seq
                 := LAMBDA (i: index[State](sigma!1)):
                      (PROJ_1(seq(sigma!1)(i))
                         WITH [(v(va!1)) := seq(val!1)(i)],
                       PROJ_2(seq(sigma!1)(i))) #)")
                                      (("1"
                                        (replace -1 3 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (iff)
                                            (("1"
                                              (split 3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "semcsold")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "csinner")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (hide 1)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "l!1")
                                                              (("2"
                                                                (case
                                                                 "infinite(l!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "i!1")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "sub")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "env!1"
                                                                               "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                               "va!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "(# infinite:=false,len:=seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq:= (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(val!1)(x + seq(l!1)(i!1)))#)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "infinite(sigma!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "suf")
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "env!1"
                                                                             "(# infinite := TRUE,len := len(sigma!1), seq := (LAMBDA (x: {i: nat | TRUE}): seq(sigma!1)(x + seq(l!1)(len(l!1)))) #)"
                                                                             "va!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "(# infinite := TRUE, len := len(sigma!1),seq := (LAMBDA (x: {i: nat | TRUE}): seq(val!1)(x + seq(l!1)(len(l!1)))) #)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := (LAMBDA (x: {i: nat | TRUE}):
                   seq(sigma!1)(x + seq(l!1)(len(l!1)))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + seq(l!1)(len(l!1))) #)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply-extensionality
                                                                                       1
                                                                                       :hide?
                                                                                       t)
                                                                                      (("2"
                                                                                        (apply-extensionality
                                                                                         1
                                                                                         :hide?
                                                                                         t)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sub")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "env!1"
                                                                                         "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                                         "va!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "(# infinite:=false,len:=seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq:= (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(val!1)(x + seq(l!1)(i!1)))#)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "suf")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -6
                                                                                     "env!1"
                                                                                     "(# infinite := FALSE, len := len(sigma!1) - seq(l!1)(len(l!1)), seq :=(LAMBDA (x: {i: nat | i <= len(sigma!1) - seq(l!1)(len(l!1))}): seq(sigma!1)(x + seq(l!1)(len(l!1)))) #)"
                                                                                     "va!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -6
                                                                                         "(# infinite := FALSE, len := len(sigma!1) - seq(l!1)(len(l!1)), seq := (LAMBDA (x: {i: nat | i <= len(sigma!1) - seq(l!1)(len(l!1))}): seq(val!1)(x + seq(l!1)(len(l!1)))) #)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "sub")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -9
                                                                                         "env!1"
                                                                                         "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                                         "va!1")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -9
                                                                                             "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):seq(val!1)(x + seq(l!1)(i!1))) #)")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (replace
                                                                                                 -9)
                                                                                                (("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "semcsold")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "csinner")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             2
                                                             "l!1")
                                                            (("2"
                                                              (case
                                                               "infinite(l!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "i!1")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "sub")
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "env!1"
                                                                             "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i<= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                             "va!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):seq(val!1)(x + seq(l!1)(i!1))) #)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -7)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "infinite(sigma!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "suf")
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "env!1"
                                                                           "(# infinite := TRUE, len := len(sigma!1), seq := (LAMBDA (x: {i: nat | infinite(sigma!1) OR
                                    i <= len(sigma!1)}):seq(sigma!1)(x + seq(l!1)(len(l!1)))) #)"
                                                                           "va!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "(# infinite := TRUE, len := len(sigma!1), seq := (LAMBDA (x: {i: nat | infinite(sigma!1) OR
                                    i <= len(sigma!1)}): seq(val!1)(x + seq(l!1)(len(l!1)))) #)")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "i!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "sub")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "env!1"
                                                                                     "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                                     "va!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(val!1)(x + seq(l!1)(i!1))) #)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -8)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           4)
                                                                          (("1"
                                                                            (expand
                                                                             "suf")
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "env!1"
                                                                               "(# infinite := FALSE, len := len(sigma!1) - seq(l!1)(len(l!1)), seq := (LAMBDA (x: {i: nat | i <= len(sigma!1) - seq(l!1)(len(l!1))}): seq(sigma!1)(x + seq(l!1)(len(l!1)))) #)"
                                                                               "va!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -6
                                                                                   "(# infinite := FALSE, len := len(sigma!1) - seq(l!1)(len(l!1)), seq :=(LAMBDA (x: {i: nat | i <= len(sigma!1) - seq(l!1)(len(l!1))}): seq(val!1)(x + seq(l!1)(len(l!1)))) #)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -6)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sub")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -9
                                                                                         "env!1"
                                                                                         "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq := (LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}): seq(sigma!1)(x + seq(l!1)(i!1))) #)"
                                                                                         "va!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -9
                                                                                             "(# infinite := FALSE, len := seq(l!1)(1 + i!1) - seq(l!1)(i!1), seq :=(LAMBDA (x: {i: nat | i <= seq(l!1)(1 + i!1) - seq(l!1)(i!1)}):seq(val!1)(x + seq(l!1)(i!1))) #)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (skosimp :preds? t)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skosimp)
              (("2" (expand "M" 3)
                (("2" (expand "semfone")
                  (("2" (case "fone2_var!1 = tnot")
                    (("1" (assert)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (replace -2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "l_old_new_1")
                        (("2"
                          (inst-cp -1 "M(fone1_var!1)" "env!1"
                           "sigma!1")
                          (("2" (replace -2 4 rl)
                            (("2"
                              (inst -1 "M(fone1_var!1)"
                               "(PROJ_1(env!1) WITH [(v(va!1)) := x1!1], PROJ_2(env!1))"
                               "sigma!1")
                              (("2"
                                (replace -1 4 rl)
                                (("2"
                                  (hide -1 -2)
                                  (("2"
                                    (expand "semcsold")
                                    (("2"
                                      (expand "csinner")
                                      (("2"
                                        (iff)
                                        (("2"
                                          (split 4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst 2 "l!1")
                                                  (("2"
                                                    (case
                                                     "infinite(l!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "i!1")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "env!1"
                                                                 "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                 "va!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "infinite(sigma!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split 3)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "env!1"
                                                               "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                               "va!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?
                                                                   -5)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "i!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "env!1"
                                                                         "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                         "va!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst?
                                                                             -7)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 4)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "env!1"
                                                                   "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                   "va!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?
                                                                       -5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "env!1"
                                                                             "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                             "va!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (inst 2 "l!1")
                                                  (("2"
                                                    (case
                                                     "infinite(l!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "i!1")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "env!1"
                                                                 "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                 "va!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "infinite(sigma!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split 3)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "env!1"
                                                               "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                               "va!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst?
                                                                   -5)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "i!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "env!1"
                                                                         "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                         "va!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 4)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "env!1"
                                                                   "suf(sigma!1, seq(l!1)(len(l!1)))"
                                                                   "va!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?
                                                                       -5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "env!1"
                                                                             "sub(sigma!1, seq(l!1)(i!1), seq(l!1)(1 + i!1))"
                                                                             "va!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (expand "freeform" 1)
        (("5" (expand "union")
          (("5" (expand "member" 1 1)
            (("5" (flatten)
              (("5" (case "t(va!1) = state")
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (expand "M" 3)
                      (("1" (expand "semftwo")
                        (("1" (case "ftwo3_var!1=tchop")
                          (("1" (assert)
                            (("1" (expand "^^")
                              (("1"
                                (iff)
                                (("1"
                                  (split 3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 1 "m!1")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (expand "sub")
                                              (("1"
                                                (inst
                                                 -5
                                                 "env!1"
                                                 "(# infinite := FALSE, len := m!1, seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(sigma!1)(x))#)"
                                                 "va!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "(# infinite := FALSE, len := m!1, seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(val!1)(x)) #)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp
                                                       :preds?
                                                       t)
                                                      (("2"
                                                        (typepred
                                                         "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp :preds? t)
                                                  (("2"
                                                    (typepred "m!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "suf")
                                              (("2"
                                                (case
                                                 "infinite(sigma!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -6)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (inst
                                                         -6
                                                         "env!1"
                                                         "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + m!1) #)"
                                                         "va!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -6
                                                             "(# infinite := TRUE, len := len(sigma!1), seq := (LAMBDA (x: {i: nat | infinite(val!1) OR i<=len(val!1)}):seq(val!1)(x + m!1)) #)")
                                                            (("1"
                                                              (case
                                                               "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := TRUE,
                                          len := len(sigma!1),
                                          seq
                                          := LAMBDA
                                             (x:
                                              {i: nat |
                                               infinite(sigma!1)
                                               OR
                                               i <= len(sigma!1)}):
                                             seq(sigma!1)(x + m!1) #))):
                  (PROJ_1(seq(sigma!1)(i + m!1))
                     WITH [(v(va!1)) := seq(val!1)(i + m!1)],
                   PROJ_2(seq(sigma!1)(i + m!1))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i_2186: nat |
                                   infinite(sigma!1) OR
                                    i_2186 <= len(sigma!1)}):
                  (PROJ_1(seq(sigma!1)(x + m!1))
                     WITH [(v(va!1)) := seq(val!1)(x + m!1)],
                   PROJ_2(seq(sigma!1)(x + m!1))) #)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -5)
                                                    (("2"
                                                      (inst
                                                       -5
                                                       "env!1"
                                                       "(# infinite := FALSE, len := len(sigma!1) - m!1, seq := (LAMBDA (x: {i: nat | i<= len(sigma!1) - m!1}): seq(sigma!1)(x + m!1)) #)"
                                                       "va!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "(# infinite := FALSE, len := len(sigma!1) - m!1, seq := (LAMBDA (x: {i: nat | i <= len(sigma!1) - m!1}): seq(val!1)(x + m!1)) #)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "m!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst? -5)
                                          (("2"
                                            (inst? -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst? -5)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 1 "m!1")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (expand "sub")
                                              (("1"
                                                (inst
                                                 -5
                                                 "env!1"
                                                 "(# infinite := FALSE, len := m!1, seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(sigma!1)(x)) #)"
                                                 "va!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "(# infinite := FALSE, len := m!1, seq := (LAMBDA (x: {i: nat | i <= m!1}): seq(val!1)(x)) #)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "m!1")
                                                      (("2"
                                                        (skosimp
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "m!1")
                                                  (("2"
                                                    (skosimp :preds? t)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "suf")
                                              (("2"
                                                (case
                                                 "infinite(sigma!1)")
                                                (("1"
                                                  (hide -6)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "env!1"
                                                       "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i: nat |
                                   infinite(sigma!1) OR
                                    i <= len(sigma!1)}):
                  seq(sigma!1)(x + m!1) #)"
                                                       "va!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "(# infinite := TRUE,
                  len := len(sigma!1),
                  seq :=LAMBDA (x:
                          {i: nat |
                                   infinite(val!1) OR
                                    i <= len(val!1)}):
                  seq(val!1)(x + m!1) #)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   "(# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (i:
                          index[State]((# infinite := TRUE,
                                          len := len(sigma!1),
                                          seq
                                          := LAMBDA
                                             (x:
                                              {i: nat |
                                               infinite(sigma!1)
                                               OR
                                               i <= len(sigma!1)}):
                                             seq(sigma!1)(x + m!1) #))):
                  (PROJ_1(seq(sigma!1)(i + m!1))
                     WITH [(v(va!1)) := seq(val!1)(i + m!1)],
                   PROJ_2(seq(sigma!1)(i + m!1))) #) = (# infinite := TRUE,
           len := len(sigma!1),
           seq
             := LAMBDA (x:
                          {i_2220: nat |
                                   infinite(sigma!1) OR
                                    i_2220 <= len(sigma!1)}):
                  (PROJ_1(seq(sigma!1)(x + m!1))
                     WITH [(v(va!1)) := seq(val!1)(x + m!1)],
                   PROJ_2(seq(sigma!1)(x + m!1))) #)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -5)
                                                    (("2"
                                                      (inst
                                                       -5
                                                       "env!1"
                                                       "(# infinite := FALSE,
           len := len(sigma!1) - m!1,
           seq
             := LAMBDA (x: {i: nat | i <= len(sigma!1) - m!1}):
                  seq(sigma!1)(x + m!1) #)"
                                                       "va!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "(# infinite := FALSE,
              len := len(sigma!1) - m!1,
              seq := LAMBDA (x: {i: nat | i <= len(val!1) - m!1}):
                  seq(val!1)(x + m!1) #)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "m!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "m!1")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "m!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -6)
                                              (("2"
                                                (inst
                                                 -5
                                                 "env!1"
                                                 "sigma!1"
                                                 "va!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -5 "val!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst?)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (case
                                                   "ftwo3_var!1=tand")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "ftwo3_var!1=tor")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "ftwo3_var!1=timpl")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skosimp)
                    (("2" (expand "M" 4)
                      (("2" (expand "semftwo")
                        (("2" (case "ftwo3_var!1=tchop")
                          (("1" (assert)
                            (("1" (expand "^^")
                              (("1"
                                (iff)
                                (("1"
                                  (split 4)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (skosimp :preds? t)
                                        (("1"
                                          (inst 1 "m!1")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (inst
                                               -5
                                               "env!1"
                                               "sub(sigma!1, 0, m!1)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -6
                                               "env!1"
                                               "suf(sigma!1, m!1)"
                                               "va!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst? -6)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst
                                           -4
                                           "env!1"
                                           "sigma!1"
                                           "va!1")
                                          (("2"
                                            (assert)
                                            (("2" (inst? -4) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst 1 "m!1")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (inst
                                               -4
                                               "env!1"
                                               "sub(sigma!1, 0, m!1)"
                                               "va!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -4)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -5
                                               "env!1"
                                               "suf(sigma!1, m!1)"
                                               "va!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst? -5)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst
                                           -4
                                           "env!1"
                                           "sigma!1"
                                           "va!1")
                                          (("2"
                                            (assert)
                                            (("2" (inst? -4) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst?)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (case
                                                   "ftwo3_var!1 =tand")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "ftwo3_var!1 =tor")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "ftwo3_var!1 =timpl")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil))
    nil)
   proved
   ((fttype type-decl nil formtypes nil)
    (tchop? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (tchop adt-constructor-decl "(tchop?)" formtypes nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (tand? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (tand adt-constructor-decl "(tand?)" formtypes nil)
    (timpl? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (timpl adt-constructor-decl "(timpl?)" formtypes nil)
    (tor adt-constructor-decl "(tor?)" formtypes nil)
    (tor? adt-recognizer-decl "[fttype -> boolean]" formtypes nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (Iform type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (semcsold const-decl "bool" itlformsemanticsfixpoints nil)
    (ninterval type-eq-decl nil itlsemanticstype nil)
    (suf const-decl "sequ" sequ nil) (sub const-decl "sequ" sequ nil)
    (csinner const-decl "bool" itlformsemanticsfixpoints nil)
    (l_old_new_1 formula-decl nil itlformsemanticsfixpoints nil)
    (tnot adt-constructor-decl "(tnot?)" formtypes nil)
    (tnot? adt-recognizer-decl "[fotype -> boolean]" formtypes nil)
    (fotype type-decl nil formtypes nil)
    (sequ type-eq-decl nil sequ nil) (index2 type-eq-decl nil sequ nil)
    (exp_vr_extensionality formula-decl nil exp_adt nil)
    (semforall const-decl "bool" itlformsemanticsnew nil)
    (form_induction formula-decl nil form_adt nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (SState type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (form type-decl nil form_adt nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (exp type-decl nil exp_adt nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (vrtype type-decl nil exptype nil)
    (t adt-accessor-decl "[(vr?) -> vrtype]" exp_adt nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (freeform def-decl "setof[(vr?)]" itlformfree nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   13838 9680 nil nil))
 (l_T 0
  (l_T-2 nil 3391249808 nil ("" (sem) nil nil) proved-complete
   ((M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   nil nil nil nil)
  (l_T-1 nil 3391230323 3391230499 ("" (sem) nil nil) proved
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil))
   51 40 nil nil))
 (l_more 0
  (l_more-2 nil 3391249808 3391252595
   ("" (skosimp)
    (("" (sem)
      (("" (expand "sub")
        (("" (case "infinite(sigma!1)")
          (("1" (assert) (("1" (inst 1 "1") nil nil)) nil)
           ("2" (assert)
            (("2" (iff)
              (("2" (prop)
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (typepred "m!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (inst 1 "1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sub const-decl "sequ" sequ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil sequ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (more const-decl "form" itlsynextra nil)
    (O const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   38349 140 t nil)
  (l_more-1 nil 3391230323 3391230500
   ("" (skosimp)
    (("" (sem)
      (("" (expand "sub")
        (("" (case "infinite(sigma!1)")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (iff)
              (("2" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 157 110 nil nil))
 (l_empty 0
  (l_empty-2 nil 3391249808 3391252625
   ("" (skosimp)
    (("" (sem)
      (("" (expand "sub")
        (("" (case "infinite(sigma!1)")
          (("1" (assert) (("1" (inst 1 "1") nil nil)) nil)
           ("2" (assert)
            (("2" (iff)
              (("2" (prop)
                (("1" (assert) (("1" (inst 1 "1") nil nil)) nil)
                 ("2" (assert)
                  (("2" (skosimp)
                    (("2" (typepred "m!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sub const-decl "sequ" sequ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil sequ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (empty const-decl "form" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (more const-decl "form" itlsynextra nil)
    (O const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   18527 130 t nil)
  (l_empty-1 nil 3391230323 3391230500
   ("" (skosimp)
    (("" (sem)
      (("" (expand "sub")
        (("" (case "infinite(sigma!1)")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (iff)
              (("2" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 156 100 nil nil))
 (l_inf 0
  (l_inf-2 nil 3391249808 nil ("" (sem) (("" (assert) nil nil)) nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil))
   nil nil nil nil)
  (l_inf-1 nil 3391230323 3391230500
   ("" (sem) (("" (assert) nil nil)) nil) proved
   ((semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   60 40 nil nil))
 (l_finite 0
  (l_finite-2 nil 3391249808 nil
   ("" (expand "finite")
    (("" (expand "-")
      (("" (expand "M")
        (("" (expand "semfone")
          (("" (skosimp) (("" (rewrite "l_inf") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((finite const-decl "form" itlsynextra nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (- const-decl "form" itlsyntax nil))
   nil nil nil nil)
  (l_finite-1 nil 3391230323 3391230500
   ("" (expand "finite")
    (("" (expand "-")
      (("" (expand "M")
        (("" (expand "semfone")
          (("" (skosimp) (("" (rewrite "l_inf") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((- const-decl "form" itlsyntax nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (finite const-decl "form" itlsynextra nil))
   19 20 nil nil))
 (l_fmore 0
  (l_fmore-2 nil 3391249808 3391252655
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp)
        (("" (case "infinite(sigma!1)")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (iff)
              (("2" (prop)
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (typepred "m!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (inst 1 "1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (O const-decl "form" itlsynextra nil)
    (more const-decl "form" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (fmore const-decl "form" itlsynextra nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (index type-eq-decl nil sequ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sub const-decl "sequ" sequ nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   15645 150 t nil)
  (l_fmore-1 nil 3391230323 3391230500
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp)
        (("" (case "infinite(sigma!1)")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (iff)
              (("2" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 138 110 nil nil))
 (l_always 0
  (l_always-2 nil 3391249808 nil
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp)
        (("" (iff)
          (("" (prop)
            (("1" (skosimp) (("1" (inst 2 "i!1") nil nil)) nil)
             ("2" (skosimp) (("2" (inst 1 "i!1") nil nil)) nil)
             ("3" (skosimp) (("3" (inst -1 "m!1") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((- const-decl "form" itlsyntax nil)
    (= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (<> const-decl "form" itlsynextra nil)
    ([] const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil) (sub const-decl "sequ" sequ nil))
   nil nil nil nil)
  (l_always-1 nil 3391230323 3391230500
   ("" (sem)
    (("" (expand "sub")
      (("" (skosimp)
        (("" (iff)
          (("" (prop)
            (("1" (skosimp) (("1" (inst 2 "i!1") nil nil)) nil)
             ("2" (skosimp) (("2" (inst 1 "i!1") nil nil)) nil)
             ("3" (skosimp) (("3" (inst -1 "m!1") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sub const-decl "sequ" sequ nil) (index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    ([] const-decl "form" itlsynextra nil)
    (<> const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil)
    (- const-decl "form" itlsyntax nil))
   195 140 nil nil))
 (l_wnext_TCC1 0
  (l_wnext_TCC1-2 nil 3391249808 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil))
   nil nil nil nil)
  (l_wnext_TCC1-1 nil 3391230323 3391230330 ("" (subtype-tcc) nil nil)
   proved
   ((Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   101 70 nil nil))
 (l_wnext 0
  (l_wnext-2 nil 3391249808 3391253169
   ("" (skosimp)
    (("" (sem)
      (("" (case "infinite(sigma!1)")
        (("1" (assert)
          (("1" (expand "suf" 1 1)
            (("1" (expand "sub" 1 1)
              (("1" (expand "suf" 1 1)
                (("1" (expand "sub" 1 1)
                  (("1" (expand "suf" 1 3)
                    (("1" (expand "suf" 1 4)
                      (("1" (iff)
                        (("1" (prop)
                          (("1" (expand "suf")
                            (("1"
                              (case "(# infinite := TRUE,
                        len := len(sigma!1),
                        seq
                          := LAMBDA (x_932:
                                       {i: nat |
                                                IF infinite(sigma!1)
                                                  THEN TRUE
                                                ELSE FALSE
                                                ENDIF
                                                 OR
                                                 i <=
                                                  IF infinite(sigma!1)
                                                    THEN len(sigma!1)
                                                  ELSE len(sigma!1) - i!1
                                                  ENDIF}):
                               seq(sigma!1)(1 + x_932 + i!1) #) = (# infinite := TRUE,
                        len := len(sigma!1),
                        seq
                          := LAMBDA (x: {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                               seq(sigma!1)(1 + x + i!1) #)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst 1 "1")
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "suf")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply-extensionality 1 :hide? t)
                                (("2"
                                  (apply-extensionality 1 :hide? t)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "suf")
                            (("2"
                              (case "(# infinite := TRUE,
                      len := len(sigma!1),
                      seq
                        := LAMBDA (x: {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                             seq(sigma!1)(1 + x + i!1) #) = (# infinite := TRUE,
                      len := len(sigma!1),
                      seq
                        := LAMBDA (x_944:
                                     {i: nat |
                                              IF infinite(sigma!1)
                                                THEN TRUE
                                              ELSE FALSE
                                              ENDIF
                                               OR
                                               i <=
                                                IF infinite(sigma!1)
                                                  THEN len(sigma!1)
                                                ELSE len(sigma!1) - i!1
                                                ENDIF}):
                             seq(sigma!1)(1 + x_944 + i!1) #)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (typepred "m!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply-extensionality 1 :hide? t)
                                (("2"
                                  (apply-extensionality 1 :hide? t)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "suf" 2 1)
            (("2" (expand "sub" 2 1)
              (("2" (expand "suf" 2 1)
                (("2" (expand "sub" 2 1)
                  (("2" (expand "suf" 2 3)
                    (("2" (iff)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "suf")
                            (("1" (assert)
                              (("1"
                                (typepred "i!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst 1 "1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "suf")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "suf" 1)
                          (("2" (typepred "i!1")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (typepred "m!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "suf")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (case
                                                   "(# infinite := FALSE,
           len := len(sigma!1) - 1 - i!1,
           seq
             := LAMBDA (x: {i: nat | i <= len(sigma!1) - 1 - i!1}):
                  seq(sigma!1)(1 + x + i!1) #) = (# infinite := FALSE,
           len := len(sigma!1) - i!1 - 1,
           seq
             := LAMBDA (x_1: {i: nat | i <= len(sigma!1) - i!1 - m!1}):
                  seq(sigma!1)(x_1 + i!1 + 1) #)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (typepred "m!1")
                                        (("2"
                                          (expand "suf")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (suf const-decl "sequ" sequ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil (sequ type-eq-decl nil sequ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (index type-eq-decl nil sequ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sub const-decl "sequ" sequ nil) nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (wO const-decl "form" itlsynextra nil)
    (O const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (- const-decl "form" itlsyntax nil))
   491315 1660 t nil)
  (l_wnext-1 nil 3391230323 3391230501
   ("" (skosimp)
    (("" (sem)
      (("" (case "infinite(sigma!1)")
        (("1" (assert)
          (("1" (expand "suf" 1 1)
            (("1" (expand "sub" 1 1)
              (("1" (expand "suf" 1 1)
                (("1" (expand "sub" 1 1)
                  (("1" (expand "suf" 1 3)
                    (("1" (expand "suf" 1 4)
                      (("1" (iff)
                        (("1" (prop)
                          (("1" (expand "suf")
                            (("1"
                              (case "(# infinite := TRUE,
                        len := len(sigma!1),
                        seq
                          := LAMBDA (x_932:
                                       {i: nat |
                                                IF infinite(sigma!1)
                                                  THEN TRUE
                                                ELSE FALSE
                                                ENDIF
                                                 OR
                                                 i <=
                                                  IF infinite(sigma!1)
                                                    THEN len(sigma!1)
                                                  ELSE len(sigma!1) - i!1
                                                  ENDIF}):
                               seq(sigma!1)(1 + x_932 + i!1) #) = (# infinite := TRUE,
                        len := len(sigma!1),
                        seq
                          := LAMBDA (x: {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                               seq(sigma!1)(1 + x + i!1) #)")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (apply-extensionality 1 :hide? t)
                                (("2"
                                  (apply-extensionality 1 :hide? t)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "suf")
                            (("2"
                              (case "(# infinite := TRUE,
                      len := len(sigma!1),
                      seq
                        := LAMBDA (x: {i: nat | infinite(sigma!1) OR i <= len(sigma!1)}):
                             seq(sigma!1)(1 + x + i!1) #) = (# infinite := TRUE,
                      len := len(sigma!1),
                      seq
                        := LAMBDA (x_944:
                                     {i: nat |
                                              IF infinite(sigma!1)
                                                THEN TRUE
                                              ELSE FALSE
                                              ENDIF
                                               OR
                                               i <=
                                                IF infinite(sigma!1)
                                                  THEN len(sigma!1)
                                                ELSE len(sigma!1) - i!1
                                                ENDIF}):
                             seq(sigma!1)(1 + x_944 + i!1) #)")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (apply-extensionality 1 :hide? t)
                                (("2"
                                  (apply-extensionality 1 :hide? t)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "suf" 2 1)
            (("2" (expand "sub" 2 1)
              (("2" (expand "suf" 2 1)
                (("2" (expand "sub" 2 1)
                  (("2" (expand "suf" 2 3)
                    (("2" (iff)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "suf")
                            (("1" (assert)
                              (("1"
                                (typepred "i!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "suf" 1)
                          (("2" (typepred "i!1")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1" (flatten) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1231 960 nil nil))
 (l_nx_exp 0
  (l_nx_exp-2 nil 3391249808 nil
   ("" (skosimp) (("" (sem) nil nil)) nil) proved-complete
   ((nx const-decl "exp" itlsyntax nil)
    (onesem const-decl "Value" itlexpsemantics nil)
    (E def-decl "Value" itlexpsemantics nil))
   nil nil nil nil)
  (l_nx_exp-1 nil 3391230323 3391230501
   ("" (skosimp) (("" (sem) nil nil)) nil) proved
   ((E def-decl "Value" itlexpsemantics nil)
    (onesem const-decl "Value" itlexpsemantics nil)
    (nx const-decl "exp" itlsyntax nil))
   63 40 nil nil))
 (l_tas_TCC1 0
  (l_tas_TCC1-2 nil 3391249808 nil ("" (subtype-tcc) nil nil)
   proved-complete nil nil nil nil nil)
  (l_tas_TCC1-1 nil 3391230323 3391230330 ("" (subtype-tcc) nil nil)
   proved nil 6 10 nil nil))
 (l_tas 0
  (l_tas-2 nil 3391249808 nil
   ("" (skosimp)
    (("" (sem)
      (("" (assert)
        (("" (case "infinite(sigma!1)")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (expand "suf") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((varsem const-decl "Value" itlexpsemantics nil)
    (suf const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (onesem const-decl "Value" itlexpsemantics nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (tas const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (fin const-decl "exp" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   nil nil nil nil)
  (l_tas-1 nil 3391230323 3391230502
   ("" (skosimp)
    (("" (sem)
      (("" (assert)
        (("" (case "infinite(sigma!1)")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (expand "suf") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (fin const-decl "exp" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (tas const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (onesem const-decl "Value" itlexpsemantics nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (suf const-decl "sequ" sequ nil)
    (varsem const-decl "Value" itlexpsemantics nil))
   178 130 nil nil))
 (l_getsinc1 0
  (l_getsinc1-2 nil 3391249808 nil
   ("" (skosimp)
    (("" (sem)
      (("" (assert)
        (("" (expand "sub")
          (("" (expand "suf")
            (("" (iff)
              (("" (prop)
                (("1" (induct "i" :fnum 3)
                  (("1" (typepred "i!1") (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil)
                   ("3" (skosimp)
                    (("3" (assert)
                      (("3" (assert)
                        (("3" (inst 3 "j!1+1")
                          (("3" (inst 3 "j!1")
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (expand "sub" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp) (("4" (assert) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (induct "i" :fnum 3)
                      (("1" (typepred "i!1") (("1" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil)
                       ("3" (skosimp)
                        (("3" (assert)
                          (("3" (assert)
                            (("3" (inst 3 "j!1+1")
                              (("3"
                                (inst 3 "j!1")
                                (("1"
                                  (replace -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "sub" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skosimp) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (hide 1)
                    (("3" (induct "i" :fnum 2)
                      (("1" (assert) nil nil)
                       ("2" (skosimp)
                        (("2" (assert)
                          (("2" (inst 2 "j!1+1")
                            (("2" (inst 2 "j!1")
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "sub" 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (inst-cp -2 "m!1")
                    (("4" (inst -2 "m!2")
                      (("1" (assert) nil nil)
                       ("2" (typepred "m!1")
                        (("2" (typepred "m!2")
                          (("2" (expand "sub")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (assert) (("5" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((varsem const-decl "Value" itlexpsemantics nil)
    (suf const-decl "sequ" sequ nil) (sequ type-eq-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil)
    (index type-eq-decl nil sequ nil) (exp type-decl nil exp_adt nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (sub const-decl "sequ" sequ nil)
    (twosem const-decl "Value" itlexpsemantics nil)
    (onesem const-decl "Value" itlexpsemantics nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (gets const-decl "form" itlsynextra nil)
    (keep const-decl "form" itlsynextra nil)
    (Ba const-decl "form" itlsynextra nil)
    (Da const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (tas const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (fin const-decl "exp" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil)
    (+ const-decl "exp" itlsyntax nil))
   nil nil nil nil)
  (l_getsinc1-1 nil 3391230323 3391230503
   ("" (skosimp)
    (("" (sem)
      (("" (assert)
        (("" (expand "sub")
          (("" (expand "suf")
            (("" (iff)
              (("" (prop)
                (("1" (induct "i" :fnum 3)
                  (("1" (typepred "i!1") (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil)
                   ("3" (skosimp)
                    (("3" (assert)
                      (("3" (assert)
                        (("3" (inst 3 "j!1+1")
                          (("3" (inst 3 "j!1")
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (expand "sub" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp) (("4" (assert) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (induct "i" :fnum 3)
                      (("1" (typepred "i!1") (("1" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil)
                       ("3" (skosimp)
                        (("3" (assert)
                          (("3" (assert)
                            (("3" (inst 3 "j!1+1")
                              (("3"
                                (inst 3 "j!1")
                                (("1"
                                  (replace -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "sub" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skosimp) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (hide 1)
                    (("3" (induct "i" :fnum 2)
                      (("1" (assert) nil nil)
                       ("2" (skosimp)
                        (("2" (assert)
                          (("2" (inst 2 "j!1+1")
                            (("2" (inst 2 "j!1")
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "sub" 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (inst-cp -2 "m!1")
                    (("4" (inst -2 "m!2")
                      (("1" (assert) nil nil)
                       ("2" (typepred "m!1")
                        (("2" (typepred "m!2")
                          (("2" (expand "sub")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (assert) (("5" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((+ const-decl "exp" itlsyntax nil)
    (= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (fin const-decl "exp" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (tas const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (Da const-decl "form" itlsynextra nil)
    (Ba const-decl "form" itlsynextra nil)
    (keep const-decl "form" itlsynextra nil)
    (gets const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (onesem const-decl "Value" itlexpsemantics nil)
    (twosem const-decl "Value" itlexpsemantics nil)
    (sub const-decl "sequ" sequ nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (v adt-accessor-decl "[(vr?) -> nat]" exp_adt nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (exp type-decl nil exp_adt nil) (index type-eq-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (suf const-decl "sequ" sequ nil)
    (varsem const-decl "Value" itlexpsemantics nil))
   1729 1380 nil nil))
 (l_intlen 0
  (l_intlen-2 nil 3391249808 nil
   ("" (expand "intlen")
    (("" (expand "/\\")
      (("" (expand "TE")
        (("" (expand "-")
          (("" (expand "M" 1 1)
            (("" (expand "semfone")
              (("" (expand "M" 1 1)
                (("" (expand "semforall")
                  (("" (expand "v0")
                    (("" (expand "M" 1 1)
                      (("" (expand "semfone")
                        (("" (expand "M" 1 1)
                          (("" (expand "semftwo")
                            (("" (skosimp)
                              ((""
                                (iff)
                                ((""
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (expand "=" -3)
                                        (("1"
                                          (expand "M" -3)
                                          (("1"
                                            (expand "semetwo")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "E" -3)
                                                (("1"
                                                  (expand "varsem")
                                                  (("1"
                                                    (expand "M")
                                                    (("1"
                                                      (expand
                                                       "semftwo")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "l_getsinc1")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "env!1"
                                                               "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1 (seq(sigma!1)(i))  WITH [(0) := seq(val!1)(i)], PROJ_2 (seq(sigma!1)(i)))) #)"
                                                               "vr(0,state)")
                                                              (("1"
                                                                (beta)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -5)
                                                                    (("1"
                                                                      (lemma
                                                                       "l_tas")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "e1!1"
                                                                         "env!1"
                                                                         "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State] (sigma!1)):(PROJ_1(seq(sigma!1)(i)) WITH [(0) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                                                         "vr(0,state)")
                                                                        (("1"
                                                                          (beta)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -6)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "len(sigma!1)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             2
                                                                                             rl)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "l_var_exp")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "e1!1"
                                                                                                   "env!1"
                                                                                                   "sigma!1"
                                                                                                   "vr(0,state)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "val!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp
                                                                           :preds?
                                                                           t)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -2
                                         "(# infinite:=false,len:=len(sigma!1),seq:=(lambda (i:{j:nat|j<=len(sigma!1)}): i )#)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "M" 2 2)
                                            (("2"
                                              (expand "semftwo")
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (expand "=")
                                                  (("1"
                                                    (expand "M")
                                                    (("1"
                                                      (expand
                                                       "semetwo")
                                                      (("1"
                                                        (expand "E" 1)
                                                        (("1"
                                                          (expand
                                                           "varsem")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "l_getsinc1")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (beta)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma "l_tas")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (beta)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (replace -1)
                                                          (("3"
                                                            (hide -1 2)
                                                            (("3"
                                                              (lemma
                                                               "l_var_exp")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "e1!1"
                                                                 "env!1"
                                                                 "sigma!1"
                                                                 "vr(0,state)")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "(# infinite:=false,len:=len(sigma!1),seq:=(lambda (i:{j:nat|j<=len(sigma!1)}): i)#)")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((intlen const-decl "form" itlsynextra nil)
    (TE const-decl "form" itlsynextra nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (v0 const-decl "(vr?)" itlsynextra nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (= const-decl "form" itlsyntax nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (vr adt-constructor-decl "[[nat, vrtype] -> (vr?)]" exp_adt nil)
    (vrtype type-decl nil exptype nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (exp type-decl nil exp_adt nil)
    (SState type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (varsem const-decl "Value" itlexpsemantics nil)
    (semforall const-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (- const-decl "form" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil))
   nil nil nil nil)
  (l_intlen-1 nil 3391230323 3391230504
   ("" (expand "intlen")
    (("" (expand "/\\")
      (("" (expand "TE")
        (("" (expand "-")
          (("" (expand "M" 1 1)
            (("" (expand "semfone")
              (("" (expand "M" 1 1)
                (("" (expand "semforall")
                  (("" (expand "v0")
                    (("" (expand "M" 1 1)
                      (("" (expand "semfone")
                        (("" (expand "M" 1 1)
                          (("" (expand "semftwo")
                            (("" (skosimp)
                              ((""
                                (iff)
                                ((""
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (expand "=" -3)
                                        (("1"
                                          (expand "M" -3)
                                          (("1"
                                            (expand "semetwo")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "E" -3)
                                                (("1"
                                                  (expand "varsem")
                                                  (("1"
                                                    (expand "M")
                                                    (("1"
                                                      (expand
                                                       "semftwo")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "l_getsinc1")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "env!1"
                                                               "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State](sigma!1)): (PROJ_1 (seq(sigma!1)(i))  WITH [(0) := seq(val!1)(i)], PROJ_2 (seq(sigma!1)(i)))) #)"
                                                               "vr(0,state)")
                                                              (("1"
                                                                (beta)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -5)
                                                                    (("1"
                                                                      (lemma
                                                                       "l_tas")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "e1!1"
                                                                         "env!1"
                                                                         "(# infinite := infinite(sigma!1), len := len(sigma!1), seq := (LAMBDA (i: index[State] (sigma!1)):(PROJ_1(seq(sigma!1)(i)) WITH [(0) := seq(val!1)(i)], PROJ_2(seq(sigma!1)(i)))) #)"
                                                                         "vr(0,state)")
                                                                        (("1"
                                                                          (beta)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -6)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "len(sigma!1)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             2
                                                                                             rl)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "l_var_exp")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "e1!1"
                                                                                                   "env!1"
                                                                                                   "sigma!1"
                                                                                                   "vr(0,state)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "val!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp
                                                                           :preds?
                                                                           t)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp
                                                                 :preds?
                                                                 t)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -2
                                         "(# infinite:=false,len:=len(sigma!1),seq:=(lambda (i:{j:nat|j<=len(sigma!1)}): i )#)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "M" 2 2)
                                            (("2"
                                              (expand "semftwo")
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (expand "=")
                                                  (("1"
                                                    (expand "M")
                                                    (("1"
                                                      (expand
                                                       "semetwo")
                                                      (("1"
                                                        (expand "E" 1)
                                                        (("1"
                                                          (expand
                                                           "varsem")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "l_getsinc1")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (beta)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma "l_tas")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (beta)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (replace -1)
                                                          (("3"
                                                            (hide -1 2)
                                                            (("3"
                                                              (lemma
                                                               "l_var_exp")
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "e1!1"
                                                                 "env!1"
                                                                 "sigma!1"
                                                                 "vr(0,state)")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "(# infinite:=false,len:=len(sigma!1),seq:=(lambda (i:{j:nat|j<=len(sigma!1)}): i)#)")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((/\\ const-decl "form" itlsyntax nil)
    (- const-decl "form" itlsyntax nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (semforall const-decl "bool" itlformsemanticsnew nil)
    (varsem const-decl "Value" itlexpsemantics nil)
    (IIValue type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (exp type-decl nil exp_adt nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (vrtype type-decl nil exptype nil)
    (vr adt-constructor-decl "[[nat, vrtype] -> (vr?)]" exp_adt nil)
    (state? adt-recognizer-decl "[vrtype -> boolean]" exptype nil)
    (state adt-constructor-decl "(state?)" exptype nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (= const-decl "form" itlsyntax nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (v0 const-decl "(vr?)" itlsynextra nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (TE const-decl "form" itlsynextra nil)
    (intlen const-decl "form" itlsynextra nil))
   738 510 nil nil))
 (l_stable_1 0
  (l_stable_1-2 nil 3391249808 nil
   ("" (skosimp)
    (("" (sem)
      (("" (iff)
        (("" (case "infinite(sigma!1)")
          (("1" (assert)
            (("1" (expand "sub" 1 1)
              (("1" (expand "sub" 1 1)
                (("1" (expand "suf" 1 1)
                  (("1" (expand "sub" 1 1)
                    (("1" (expand "suf" 1 1)
                      (("1" (expand "sub" 1 1)
                        (("1" (expand "suf" 1 1)
                          (("1" (expand "sub" 1 1)
                            (("1" (expand "suf" 1 1)
                              (("1"
                                (expand "sub" 1 2)
                                (("1"
                                  (expand "suf" 1 3)
                                  (("1"
                                    (expand "sub" 1 3)
                                    (("1"
                                      (expand "sub" 1 3)
                                      (("1"
                                        (expand "suf" 1 4)
                                        (("1"
                                          (expand "suf" 1 4)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (induct "i" :fnum 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite "l_suf")
                                                  (("1"
                                                    (rewrite
                                                     "l_pexp_E")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 "j!1+1")
                                                    (("2"
                                                      (inst 2 "j!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "sub")
                                                          (("1"
                                                            (expand
                                                             "suf")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "l_pexp_E")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "env!1"
                                                                     "pe1!1"
                                                                     "(# infinite := TRUE,
                                        len := len(sigma!1),
                                        seq :=
                                          (LAMBDA (x: {i: nat | infinite(sigma!1) or i<=len(sigma!1)}):
                                             seq(sigma!1)(1 + x + j!1))
                                        #)")
                                                                    (("1"
                                                                      (expand
                                                                       "sub"
                                                                       (-1
                                                                        -2))
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "env!1"
                                                                                 "pe1!1"
                                                                                 "(# infinite := FALSE,
                                        len := 1,
                                        seq :=
                                          (LAMBDA (x: {i: nat | i <= 1}):
                                             seq(sigma!1)(x + j!1))
                                        #)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "env!1"
                                                                                       "pe1!1"
                                                                                       "(# infinite := TRUE,
                                          len := len(sigma!1),
                                          seq :=
                                            (LAMBDA (x: {i: nat | infinite(sigma!1) or i<=len(sigma!1)}):
                                               seq(sigma!1)(x + j!1))
                                          #)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "sub"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst-cp -1 "m!1")
                                                (("2"
                                                  (inst -1 "m!2")
                                                  (("2"
                                                    (expand "sub")
                                                    (("2"
                                                      (expand "suf")
                                                      (("2"
                                                        (lemma
                                                         "l_pexp_E")
                                                        (("2"
                                                          (expand
                                                           "sub")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "env!1"
                                                             "pe1!1"
                                                             "(# infinite := TRUE,
                                len := len(sigma!1),
                                seq :=
                                  (LAMBDA (x: {i: nat | infinite(sigma!1) or i<=len(sigma!1)}):
                                     seq(sigma!1)(x + m!1))
                                #)")
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (hide
                                                                     -3)
                                                                    (("2"
                                                                      (inst-cp
                                                                       -1
                                                                       "env!1"
                                                                       "pe1!1"
                                                                       "(# infinite := TRUE,
                                len := len(sigma!1),
                                seq :=
                                  (LAMBDA (x: {i: nat | infinite(sigma!1) or i<=len(sigma!1)}):
                                     seq(sigma!1)(x + m!2))
                                #)")
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "env!1"
                                                                             "pe1!1"
                                                                             "(# infinite := FALSE,
                                  len := m!1 - m!2,
                                  seq :=
                                    (LAMBDA (x: {i: nat | i <= m!1 - m!2}):
                                       seq(sigma!1)(x + m!2))
                                  #)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "sub" 2 1)
              (("2" (expand "sub" 2 1)
                (("2" (expand "suf" 2 1)
                  (("2" (expand "sub" 2 1)
                    (("2" (expand "suf" 2 1)
                      (("2" (expand "sub" 2 1)
                        (("2" (expand "suf" 2 1)
                          (("2" (expand "sub" 2 1)
                            (("2" (expand "suf" 2 1)
                              (("2"
                                (expand "sub" 2 2)
                                (("2"
                                  (expand "suf" 2 3)
                                  (("2"
                                    (expand "sub" 2 3)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (induct "i" :fnum 2)
                                        (("1"
                                          (typepred "i!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "l_suf")
                                              (("2"
                                                (rewrite "l_pexp_E")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst 2 "j!1+1")
                                                (("3"
                                                  (inst 2 "j!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "sub")
                                                      (("1"
                                                        (expand "suf")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1
                                                           rl)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "l_pexp_E")
                                                              (("1"
                                                                (expand
                                                                 "sub")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "env!1"
                                                                   "pe1!1"
                                                                   "(# infinite := FALSE,
                                        len := len(sigma!1) - 1 - j!1,
                                        seq :=
                                          (LAMBDA (x: {i: nat | i
                                                         <= len(sigma!1) - 1 - j!1}):
                                             seq(sigma!1)(1 + x + j!1))
                                        #)")
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "env!1"
                                                                             "pe1!1"
                                                                             "(# infinite := FALSE,
                                        len := 1,
                                        seq :=
                                          (LAMBDA (x: {i: nat | i <= 1}):
                                             seq(sigma!1)(x + j!1))
                                        #)")
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "env!1"
                                                                                   "pe1!1"
                                                                                   "(# infinite := FALSE,
                                          len := len(sigma!1) - j!1,
                                          seq :=
                                            (LAMBDA (x: {i: nat | i
                                                           <= len(sigma!1) - j!1}):
                                               seq(sigma!1)(x + j!1))
                                          #)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "sub" 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skosimp)
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst-cp -1 "m!1")
                                          (("2"
                                            (inst -1 "m!2")
                                            (("1"
                                              (expand "sub")
                                              (("1"
                                                (expand "suf")
                                                (("1"
                                                  (lemma "l_pexp_E")
                                                  (("1"
                                                    (expand "sub")
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -3
                                                       rl)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "env!1"
                                                           "pe1!1"
                                                           "(# infinite := FALSE,
                                    len := len(sigma!1) - m!1,
                                    seq :=
                                      (LAMBDA (x: {i: nat | i
                                                     <= len(sigma!1) - m!1}):
                                         seq(sigma!1)(x + m!1))
                                    #)")
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "env!1"
                                                                     "pe1!1"
                                                                     "(# infinite := FALSE,
                                        len := len(sigma!1) - m!2,
                                        seq :=
                                          (LAMBDA (x: {i: nat | i
                                                         <= len(sigma!1) - m!2}):
                                             seq(sigma!1)(x + m!2))
                                        #)")
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "env!1"
                                                                           "pe1!1"
                                                                           "(# infinite := FALSE,
                                              len := m!1 - m!2,
                                              seq :=
                                                (LAMBDA (x: {i: nat | i <= m!1 - m!2}):
                                                   seq(sigma!1)(x + m!2))
                                              #)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp
                                                                             :preds?
                                                                             t)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "m!2")
                                                                                (("2"
                                                                                  (expand
                                                                                   "sub"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "m!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "m!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "m!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "m!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((l_suf formula-decl nil sequ nil) (exp type-decl nil exp_adt nil)
    (SVars type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (otype type-decl nil exptype nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (sequ type-eq-decl nil sequ nil) (index type-eq-decl nil sequ nil)
    (index2 type-eq-decl nil sequ nil) (suf const-decl "sequ" sequ nil)
    (sub const-decl "sequ" sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (onesem const-decl "Value" itlexpsemantics nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (E def-decl "Value" itlexpsemantics nil)
    (stable const-decl "form" itlsynextra nil)
    (gets const-decl "form" itlsynextra nil)
    (keep const-decl "form" itlsynextra nil)
    (Ba const-decl "form" itlsynextra nil)
    (Da const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (tas const-decl "form" itlsynextra nil)
    (/\\ const-decl "form" itlsyntax nil)
    (fin const-decl "exp" itlsyntax nil)
    (finite const-decl "form" itlsynextra nil)
    (inf const-decl "form" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (= const-decl "form" itlsyntax nil))
   nil nil nil nil)
  (l_stable_1-1 nil 3391230323 3391230508
   ("" (skosimp)
    (("" (sem)
      (("" (iff)
        (("" (case "infinite(sigma!1)")
          (("1" (assert)
            (("1" (expand "sub" 1 1)
              (("1" (expand "sub" 1 1)
                (("1" (expand "suf" 1 1)
                  (("1" (expand "sub" 1 1)
                    (("1" (expand "suf" 1 1)
                      (("1" (expand "sub" 1 1)
                        (("1" (expand "suf" 1 1)
                          (("1" (expand "sub" 1 1)
                            (("1" (expand "suf" 1 1)
                              (("1"
                                (expand "sub" 1 2)
                                (("1"
                                  (expand "suf" 1 3)
                                  (("1"
                                    (expand "sub" 1 3)
                                    (("1"
                                      (expand "sub" 1 3)
                                      (("1"
                                        (expand "suf" 1 4)
                                        (("1"
                                          (expand "suf" 1 4)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (induct "i" :fnum 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite "l_suf")
                                                  (("1"
                                                    (rewrite
                                                     "l_pexp_E")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 "j!1+1")
                                                    (("2"
                                                      (inst 2 "j!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "sub")
                                                          (("1"
                                                            (expand
                                                             "suf")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "l_pexp_E")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "env!1"
                                                                     "pe1!1"
                                                                     "(# infinite := TRUE,
                                        len := len(sigma!1),
                                        seq :=
                                          (LAMBDA (x: {i: nat | infinite(sigma!1) or i<=len(sigma!1)}):
                                             seq(sigma!1)(1 + x + j!1))
                                        #)")
                                                                    (("1"
                                                                      (expand
                                                                       "sub"
                                                                       (-1
                                                                        -2))
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "env!1"
                                                                                 "pe1!1"
                                                                                 "(# infinite := FALSE,
                                        len := 1,
                                        seq :=
                                          (LAMBDA (x: {i: nat | i <= 1}):
                                             seq(sigma!1)(x + j!1))
                                        #)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "env!1"
                                                                                       "pe1!1"
                                                                                       "(# infinite := TRUE,
                                          len := len(sigma!1),
                                          seq :=
                                            (LAMBDA (x: {i: nat | infinite(sigma!1) or i<=len(sigma!1)}):
                                               seq(sigma!1)(x + j!1))
                                          #)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "sub"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst-cp -1 "m!1")
                                                (("2"
                                                  (inst -1 "m!2")
                                                  (("2"
                                                    (expand "sub")
                                                    (("2"
                                                      (expand "suf")
                                                      (("2"
                                                        (lemma
                                                         "l_pexp_E")
                                                        (("2"
                                                          (expand
                                                           "sub")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "env!1"
                                                             "pe1!1"
                                                             "(# infinite := TRUE,
                                len := len(sigma!1),
                                seq :=
                                  (LAMBDA (x: {i: nat | infinite(sigma!1) or i<=len(sigma!1)}):
                                     seq(sigma!1)(x + m!1))
                                #)")
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (hide
                                                                     -3)
                                                                    (("2"
                                                                      (inst-cp
                                                                       -1
                                                                       "env!1"
                                                                       "pe1!1"
                                                                       "(# infinite := TRUE,
                                len := len(sigma!1),
                                seq :=
                                  (LAMBDA (x: {i: nat | infinite(sigma!1) or i<=len(sigma!1)}):
                                     seq(sigma!1)(x + m!2))
                                #)")
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "env!1"
                                                                             "pe1!1"
                                                                             "(# infinite := FALSE,
                                  len := m!1 - m!2,
                                  seq :=
                                    (LAMBDA (x: {i: nat | i <= m!1 - m!2}):
                                       seq(sigma!1)(x + m!2))
                                  #)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "sub" 2 1)
              (("2" (expand "sub" 2 1)
                (("2" (expand "suf" 2 1)
                  (("2" (expand "sub" 2 1)
                    (("2" (expand "suf" 2 1)
                      (("2" (expand "sub" 2 1)
                        (("2" (expand "suf" 2 1)
                          (("2" (expand "sub" 2 1)
                            (("2" (expand "suf" 2 1)
                              (("2"
                                (expand "sub" 2 2)
                                (("2"
                                  (expand "suf" 2 3)
                                  (("2"
                                    (expand "sub" 2 3)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (induct "i" :fnum 2)
                                        (("1"
                                          (typepred "i!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "l_suf")
                                              (("2"
                                                (rewrite "l_pexp_E")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst 2 "j!1+1")
                                                (("3"
                                                  (inst 2 "j!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "sub")
                                                      (("1"
                                                        (expand "suf")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1
                                                           rl)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "l_pexp_E")
                                                              (("1"
                                                                (expand
                                                                 "sub")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "env!1"
                                                                   "pe1!1"
                                                                   "(# infinite := FALSE,
                                        len := len(sigma!1) - 1 - j!1,
                                        seq :=
                                          (LAMBDA (x: {i: nat | i
                                                         <= len(sigma!1) - 1 - j!1}):
                                             seq(sigma!1)(1 + x + j!1))
                                        #)")
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             "env!1"
                                                                             "pe1!1"
                                                                             "(# infinite := FALSE,
                                        len := 1,
                                        seq :=
                                          (LAMBDA (x: {i: nat | i <= 1}):
                                             seq(sigma!1)(x + j!1))
                                        #)")
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "env!1"
                                                                                   "pe1!1"
                                                                                   "(# infinite := FALSE,
                                          len := len(sigma!1) - j!1,
                                          seq :=
                                            (LAMBDA (x: {i: nat | i
                                                           <= len(sigma!1) - j!1}):
                                               seq(sigma!1)(x + j!1))
                                          #)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "sub" 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skosimp)
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst-cp -1 "m!1")
                                          (("2"
                                            (inst -1 "m!2")
                                            (("1"
                                              (expand "sub")
                                              (("1"
                                                (expand "suf")
                                                (("1"
                                                  (lemma "l_pexp_E")
                                                  (("1"
                                                    (expand "sub")
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -3
                                                       rl)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "env!1"
                                                           "pe1!1"
                                                           "(# infinite := FALSE,
                                    len := len(sigma!1) - m!1,
                                    seq :=
                                      (LAMBDA (x: {i: nat | i
                                                     <= len(sigma!1) - m!1}):
                                         seq(sigma!1)(x + m!1))
                                    #)")
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "env!1"
                                                                     "pe1!1"
                                                                     "(# infinite := FALSE,
                                        len := len(sigma!1) - m!2,
                                        seq :=
                                          (LAMBDA (x: {i: nat | i
                                                         <= len(sigma!1) - m!2}):
                                             seq(sigma!1)(x + m!2))
                                        #)")
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "env!1"
                                                                           "pe1!1"
                                                                           "(# infinite := FALSE,
                                              len := m!1 - m!2,
                                              seq :=
                                                (LAMBDA (x: {i: nat | i <= m!1 - m!2}):
                                                   seq(sigma!1)(x + m!2))
                                              #)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp
                                                                             :preds?
                                                                             t)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "m!2")
                                                                                (("2"
                                                                                  (expand
                                                                                   "sub"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "m!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "m!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "m!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "m!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((= const-decl "form" itlsyntax nil)
    (T const-decl "pform" itlsynextra nil)
    (- const-decl "form" itlsyntax nil)
    (F const-decl "pform" itlsynextra nil)
    (^ const-decl "form" itlsyntax nil)
    (inf const-decl "form" itlsynextra nil)
    (finite const-decl "form" itlsynextra nil)
    (fin const-decl "exp" itlsyntax nil)
    (/\\ const-decl "form" itlsyntax nil)
    (tas const-decl "form" itlsynextra nil)
    (=> const-decl "form" itlsyntax nil)
    (Da const-decl "form" itlsynextra nil)
    (Ba const-decl "form" itlsynextra nil)
    (keep const-decl "form" itlsynextra nil)
    (gets const-decl "form" itlsynextra nil)
    (stable const-decl "form" itlsynextra nil)
    (E def-decl "Value" itlexpsemantics nil)
    (semetwo const-decl "bool" itlformsemanticsnew nil)
    (M def-decl "bool" itlformsemanticsnew nil)
    (semfone const-decl "bool" itlformsemanticsnew nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (semftwo const-decl "bool" itlformsemanticsnew nil)
    (onesem const-decl "Value" itlexpsemantics nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sub const-decl "sequ" sequ nil) (suf const-decl "sequ" sequ nil)
    (index2 type-eq-decl nil sequ nil)
    (index type-eq-decl nil sequ nil) (sequ type-eq-decl nil sequ nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (otype type-decl nil exptype nil)
    (SState type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (exp type-decl nil exp_adt nil) (l_suf formula-decl nil sequ nil))
   3449 2670 nil nil))
 (l_stable 0
  (l_stable-2 nil 3391249808 nil
   ("" (skosimp)
    (("" (expand "|-")
      (("" (expand "semstable")
        (("" (iff)
          (("" (prop)
            (("1" (skosimp)
              (("1" (skosimp)
                (("1" (inst -1 "env!1")
                  (("1" (inst -1 "sigma!1")
                    (("1" (use "l_stable_1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst -1 "env!1")
                (("2" (inst -1 "sigma!1")
                  (("2" (use "l_stable_1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((semstable const-decl "bool" itlexpsemantics nil)
    (Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (exp type-decl nil exp_adt nil) (otype type-decl nil exptype nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (SState type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SVars type-eq-decl nil itlstate nil)
    (\|- const-decl "pred[form]" itlformsemanticsnew nil))
   nil nil nil nil)
  (l_stable-1 nil 3391230323 3391230508
   ("" (skosimp)
    (("" (expand "|-")
      (("" (expand "semstable")
        (("" (iff)
          (("" (prop)
            (("1" (skosimp)
              (("1" (skosimp)
                (("1" (inst -1 "env!1")
                  (("1" (inst -1 "sigma!1")
                    (("1" (use "l_stable_1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst -1 "env!1")
                (("2" (inst -1 "sigma!1")
                  (("2" (use "l_stable_1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((\|- const-decl "pred[form]" itlformsemanticsnew nil)
    (SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (pexp type-eq-decl nil itlsemanticstype nil)
    (one adt-constructor-decl "[[exp, otype] -> (one?)]" exp_adt nil)
    (one? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (subterm adt-def-decl "boolean" exp_adt nil)
    (otype type-decl nil exptype nil) (exp type-decl nil exp_adt nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (semstable const-decl "bool" itlexpsemantics nil))
   120 80 nil nil)))

