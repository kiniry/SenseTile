(itlformsemanticsnew
 (doublecaret_TCC1 0
  (doublecaret_TCC1-2 nil 3391235587 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil))
   nil nil nil nil)
  (doublecaret_TCC1-1 nil 3391230323 3391230332
   ("" (subtype-tcc) nil nil) proved
   ((Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   47 20 nil nil))
 (semftwo_TCC1 0
  (semftwo_TCC1-2 nil 3391235587 nil ("" (cond-disjoint-tcc) nil nil)
   proved-complete nil nil nil nil nil)
  (semftwo_TCC1-1 nil 3391230323 3391230332
   ("" (cond-disjoint-tcc) nil nil) proved nil 31 30 nil nil))
 (semforall_TCC1 0
  (semforall_TCC1-2 nil 3391235587 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((index type-eq-decl nil sequ nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (State type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (Vars type-eq-decl nil itlstate nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (exp type-decl nil exp_adt nil))
   nil nil nil nil)
  (semforall_TCC1-1 nil 3391230323 3391230332
   ("" (subtype-tcc) nil nil) proved
   ((exp type-decl nil exp_adt nil)
    (vr? adt-recognizer-decl "[exp -> boolean]" exp_adt nil)
    (Vars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil))
   61 40 nil nil))
 (Ts_TCC1 0
  (Ts_TCC1-2 nil 3391235587 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil nil nil nil)
  (Ts_TCC1-1 nil 3391230323 3391230332 ("" (subtype-tcc) nil nil)
   proved nil 48 30 nil nil))
 (Ts_TCC2 0
  (Ts_TCC2-2 nil 3391235587 nil ("" (termination-tcc) nil nil)
   proved-complete nil nil nil nil nil)
  (Ts_TCC2-1 nil 3391230323 3391230332 ("" (termination-tcc) nil nil)
   proved nil 6 0 nil nil))
 (Csinu_TCC1 0
  (Csinu_TCC1-1 nil 3391230327 3391249763
   ("" (expand "monotonic?")
    (("" (expand "<=")
      (("" (expand "^^")
        (("" (skosimp)
          (("" (skosimp)
            (("" (expand "semfmore")
              (("" (expand "sub" 1 1)
                (("" (expand "sub" 1 1)
                  (("" (expand "sub" 1 2)
                    (("" (expand "sub" 1 2)
                      (("" (skosimp)
                        (("" (split)
                          (("1" (skosimp)
                            (("1" (inst 1 "m!1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -5 "(s!1`1, suf(s!1`2, m!1))")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((<= const-decl "bool" mucalculus nil)
    (semfmore const-decl "Iform" itlformsemanticsnew nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (SVars type-eq-decl nil itlstate nil)
    (Value type-eq-decl nil itlstate nil)
    (SState type-eq-decl nil itlstate nil)
    (<= const-decl "bool" reals nil)
    (Vars type-eq-decl nil itlstate nil)
    (State type-eq-decl nil itlstate nil)
    (Interval type-eq-decl nil itlsemanticstype nil)
    (sta type-eq-decl nil itlsemanticstype nil)
    (index type-eq-decl nil sequ nil) (suf const-decl "sequ" sequ nil)
    (sequ type-eq-decl nil sequ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub const-decl "sequ" sequ nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (^^ const-decl "Iform" itlformsemanticsnew nil)
    (monotonic? const-decl "bool" mucalculus nil))
   514525 300 t nil))
 (M_TCC1 0
  (M_TCC1-2 nil 3391235587 nil
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved-complete
   ((sizeform const-decl "nat" itlsemanticstype nil)
    (reduce_nat adt-def-decl "[form -> nat]" form_adt nil))
   nil nil nil nil)
  (M_TCC1-1 nil 3391230323 3391230333
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved
   ((reduce_nat adt-def-decl "[form -> nat]" form_adt nil)
    (sizeform const-decl "nat" itlsemanticstype nil))
   129 100 nil nil))
 (M_TCC2 0
  (M_TCC2-2 nil 3391235587 nil
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved-complete
   ((sizeform const-decl "nat" itlsemanticstype nil)
    (reduce_nat adt-def-decl "[form -> nat]" form_adt nil))
   nil nil nil nil)
  (M_TCC2-1 nil 3391230323 3391230333
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved
   ((reduce_nat adt-def-decl "[form -> nat]" form_adt nil)
    (sizeform const-decl "nat" itlsemanticstype nil))
   121 90 nil nil))
 (M_TCC3 0
  (M_TCC3-2 nil 3391235587 nil
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved-complete
   ((sizeform const-decl "nat" itlsemanticstype nil)
    (reduce_nat adt-def-decl "[form -> nat]" form_adt nil))
   nil nil nil nil)
  (M_TCC3-1 nil 3391230323 3391230333
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved
   ((reduce_nat adt-def-decl "[form -> nat]" form_adt nil)
    (sizeform const-decl "nat" itlsemanticstype nil))
   134 100 nil nil))
 (M_TCC4 0
  (M_TCC4-2 nil 3391235587 nil
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved-complete
   ((sizeform const-decl "nat" itlsemanticstype nil)
    (reduce_nat adt-def-decl "[form -> nat]" form_adt nil))
   nil nil nil nil)
  (M_TCC4-1 nil 3391230323 3391230334
   ("" (skosimp)
    (("" (replace -1)
      (("" (expand "sizeform")
        (("" (expand "reduce_nat" 1 2) (("" (ground) nil))))))))
    nil)
   proved
   ((reduce_nat adt-def-decl "[form -> nat]" form_adt nil)
    (sizeform const-decl "nat" itlsemanticstype nil))
   155 120 nil nil)))

