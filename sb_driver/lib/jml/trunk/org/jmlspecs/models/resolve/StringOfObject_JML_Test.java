// This file was generated by jmlunit on Wed Jan 09 22:24:45 EST 2008.

package org.jmlspecs.models.resolve;

import org.jmlspecs.models.*;
import java.util.Collection;
import java.util.Iterator;

/** Automatically-generated test driver for JML and JUnit based
 * testing of StringOfObject. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit StringOfObject.java
 * </pre>
 * to regenerate this class whenever StringOfObject.java changes.
 */
public class StringOfObject_JML_Test
     extends StringOfObject_JML_TestData
{
    /** Initialize this class. */
    public StringOfObject_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class StringOfObject
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class StringOfObject"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(StringOfObject.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        StringOfObject_JML_Test testobj
            = new StringOfObject_JML_Test("StringOfObject_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(StringOfObject_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends StringOfObject_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * StringOfObject.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestStringOfObject(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestStringOfObject$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSingleton(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestExt(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestFrom(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestFrom$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestProduct(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestProductFrom(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestProductFromTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGet(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestInt_size(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLength(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestExt$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAdd(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddFront(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddAfterIndex(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddBeforeIndex(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestConcat(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestComposedWith(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddAll(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddAll$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRev(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestReverse(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestPow(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEquals(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestClone(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestOccurs_ct(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestHas(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsEmpty(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestHashCode(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToString(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIterator(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestElements(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsPrefix(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsProperPrefix(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsProperSuffix(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsSuffix(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the StringOfObject contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestStringOfObject
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("StringOfObject");
        try {
            methodTests$.addTest
                (new TestStringOfObject());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the StringOfObject contructor. */
    protected static class TestStringOfObject extends OneTest {

        /** Initialize this instance. */
        public TestStringOfObject() {
            super("StringOfObject");
        }

        protected void doCall() throws java.lang.Throwable {
            new StringOfObject();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'StringOfObject'";
            return msg;
        }
    }

    /** Add tests for the StringOfObject contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestStringOfObject$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("StringOfObject");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_lang_Object$1$iter
                = this.vjava_lang_ObjectIter("StringOfObject", 0);
            this.check_has_data
                (vjava_lang_Object$1$iter,
                 "this.vjava_lang_ObjectIter(\"StringOfObject\", 0)");
            while (!vjava_lang_Object$1$iter.atEnd()) {
                final java.lang.Object elem
                    = (java.lang.Object) vjava_lang_Object$1$iter.get();
                methodTests$.addTest
                    (new TestStringOfObject$1(elem));
                vjava_lang_Object$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the StringOfObject contructor. */
    protected static class TestStringOfObject$1 extends OneTest {
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestStringOfObject$1(java.lang.Object elem) {
            super("StringOfObject"+ ":" + (elem==null? "null" :"{java.lang.Object}"));
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            new StringOfObject(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'StringOfObject' applied to";
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the singleton method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSingleton
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("singleton");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_lang_Object$1$iter
                = this.vjava_lang_ObjectIter("singleton", 0);
            this.check_has_data
                (vjava_lang_Object$1$iter,
                 "this.vjava_lang_ObjectIter(\"singleton\", 0)");
            while (!vjava_lang_Object$1$iter.atEnd()) {
                final java.lang.Object elem
                    = (java.lang.Object) vjava_lang_Object$1$iter.get();
                methodTests$.addTest
                    (new TestSingleton(elem));
                vjava_lang_Object$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the singleton method. */
    protected static class TestSingleton extends OneTest {
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestSingleton(java.lang.Object elem) {
            super("singleton"+ ":" + (elem==null? "null" :"{java.lang.Object}"));
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            StringOfObject.singleton(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'singleton' applied to";
            msg += "\n\tReceiver class StringOfObject";
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the ext method
     * to the overall test suite. */
    private void addTestSuiteFor$TestExt
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("ext");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_resolve_StringOfObject$1$iter
                = this.vorg_jmlspecs_models_resolve_StringOfObjectIter("ext", 1);
            this.check_has_data
                (vorg_jmlspecs_models_resolve_StringOfObject$1$iter,
                 "this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"ext\", 1)");
            while (!vorg_jmlspecs_models_resolve_StringOfObject$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$2$iter
                    = this.vjava_lang_ObjectIter("ext", 0);
                this.check_has_data
                    (vjava_lang_Object$2$iter,
                     "this.vjava_lang_ObjectIter(\"ext\", 0)");
                while (!vjava_lang_Object$2$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject s
                        = (org.jmlspecs.models.resolve.StringOfObject) vorg_jmlspecs_models_resolve_StringOfObject$1$iter.get();
                    final java.lang.Object elem
                        = (java.lang.Object) vjava_lang_Object$2$iter.get();
                    methodTests$.addTest
                        (new TestExt(s, elem));
                    vjava_lang_Object$2$iter.advance();
                }
                vorg_jmlspecs_models_resolve_StringOfObject$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the ext method. */
    protected static class TestExt extends OneTest {
        /** Argument s */
        private org.jmlspecs.models.resolve.StringOfObject s;
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestExt(org.jmlspecs.models.resolve.StringOfObject s, java.lang.Object elem) {
            super("ext"+ ":" + (s==null? "null" :"{org.jmlspecs.models.resolve.StringOfObject}")+ "," +(elem==null? "null" :"{java.lang.Object}"));
            this.s = s;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            StringOfObject.ext(s, elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'ext' applied to";
            msg += "\n\tReceiver class StringOfObject";
            msg += "\n\tArgument s: " + this.s;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the from method
     * to the overall test suite. */
    private void addTestSuiteFor$TestFrom
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("from");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_lang_Object$_$1$iter
                = this.vjava_lang_Object$_Iter("from", 0);
            this.check_has_data
                (vjava_lang_Object$_$1$iter,
                 "this.vjava_lang_Object$_Iter(\"from\", 0)");
            while (!vjava_lang_Object$_$1$iter.atEnd()) {
                final java.lang.Object[] a
                    = (java.lang.Object[]) vjava_lang_Object$_$1$iter.get();
                methodTests$.addTest
                    (new TestFrom(a));
                vjava_lang_Object$_$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the from method. */
    protected static class TestFrom extends OneTest {
        /** Argument a */
        private java.lang.Object[] a;

        /** Initialize this instance. */
        public TestFrom(java.lang.Object[] a) {
            super("from"+ ":" + (a==null?"null":("{java.lang.Object["+a.length + "]"+"}")));
            this.a = a;
        }

        protected void doCall() throws java.lang.Throwable {
            StringOfObject.from(a);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'from' applied to";
            msg += "\n\tReceiver class StringOfObject";
            msg += "\n\tArgument a: " + this.a;
            return msg;
        }
    }

    /** Add tests for the from method
     * to the overall test suite. */
    private void addTestSuiteFor$TestFrom$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("from");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_util_Collection$1$iter
                = this.vjava_util_CollectionIter("from", 0);
            this.check_has_data
                (vjava_util_Collection$1$iter,
                 "this.vjava_util_CollectionIter(\"from\", 0)");
            while (!vjava_util_Collection$1$iter.atEnd()) {
                final java.util.Collection c
                    = (java.util.Collection) vjava_util_Collection$1$iter.get();
                methodTests$.addTest
                    (new TestFrom$1(c));
                vjava_util_Collection$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the from method. */
    protected static class TestFrom$1 extends OneTest {
        /** Argument c */
        private java.util.Collection c;

        /** Initialize this instance. */
        public TestFrom$1(java.util.Collection c) {
            super("from"+ ":" + (c==null? "null" :"{java.util.Collection}"));
            this.c = c;
        }

        protected void doCall() throws java.lang.Throwable {
            StringOfObject.from(c);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'from' applied to";
            msg += "\n\tReceiver class StringOfObject";
            msg += "\n\tArgument c: " + this.c;
            return msg;
        }
    }

    /** Add tests for the product method
     * to the overall test suite. */
    private void addTestSuiteFor$TestProduct
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("product");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter
                = this.vorg_jmlspecs_models_resolve_StringOfObject$_Iter("product", 0);
            this.check_has_data
                (vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter,
                 "this.vorg_jmlspecs_models_resolve_StringOfObject$_Iter(\"product\", 0)");
            while (!vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject[] a
                    = (org.jmlspecs.models.resolve.StringOfObject[]) vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.get();
                methodTests$.addTest
                    (new TestProduct(a));
                vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the product method. */
    protected static class TestProduct extends OneTest {
        /** Argument a */
        private org.jmlspecs.models.resolve.StringOfObject[] a;

        /** Initialize this instance. */
        public TestProduct(org.jmlspecs.models.resolve.StringOfObject[] a) {
            super("product"+ ":" + (a==null?"null":("{org.jmlspecs.models.resolve.StringOfObject["+a.length + "]"+"}")));
            this.a = a;
        }

        protected void doCall() throws java.lang.Throwable {
            StringOfObject.product(a);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'product' applied to";
            msg += "\n\tReceiver class StringOfObject";
            msg += "\n\tArgument a: " + this.a;
            return msg;
        }
    }

    /** Add tests for the productFrom method
     * to the overall test suite. */
    private void addTestSuiteFor$TestProductFrom
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("productFrom");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter
                = this.vorg_jmlspecs_models_resolve_StringOfObject$_Iter("productFrom", 1);
            this.check_has_data
                (vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter,
                 "this.vorg_jmlspecs_models_resolve_StringOfObject$_Iter(\"productFrom\", 1)");
            while (!vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$2$iter
                    = this.vintIter("productFrom", 0);
                this.check_has_data
                    (vint$2$iter,
                     "this.vintIter(\"productFrom\", 0)");
                while (!vint$2$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject[] a
                        = (org.jmlspecs.models.resolve.StringOfObject[]) vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.get();
                    final int fromIndex
                        = vint$2$iter.getInt();
                    methodTests$.addTest
                        (new TestProductFrom(a, fromIndex));
                    vint$2$iter.advance();
                }
                vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the productFrom method. */
    protected static class TestProductFrom extends OneTest {
        /** Argument a */
        private org.jmlspecs.models.resolve.StringOfObject[] a;
        /** Argument fromIndex */
        private int fromIndex;

        /** Initialize this instance. */
        public TestProductFrom(org.jmlspecs.models.resolve.StringOfObject[] a, int fromIndex) {
            super("productFrom"+ ":" + (a==null?"null":("{org.jmlspecs.models.resolve.StringOfObject["+a.length + "]"+"}"))+ "," +fromIndex);
            this.a = a;
            this.fromIndex = fromIndex;
        }

        protected void doCall() throws java.lang.Throwable {
            StringOfObject.productFrom(a, fromIndex);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'productFrom' applied to";
            msg += "\n\tReceiver class StringOfObject";
            msg += "\n\tArgument a: " + this.a;
            msg += "\n\tArgument fromIndex: " + this.fromIndex;
            return msg;
        }
    }

    /** Add tests for the productFromTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestProductFromTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("productFromTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter
                = this.vorg_jmlspecs_models_resolve_StringOfObject$_Iter("productFromTo", 2);
            this.check_has_data
                (vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter,
                 "this.vorg_jmlspecs_models_resolve_StringOfObject$_Iter(\"productFromTo\", 2)");
            while (!vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$2$iter
                    = this.vintIter("productFromTo", 1);
                this.check_has_data
                    (vint$2$iter,
                     "this.vintIter(\"productFromTo\", 1)");
                while (!vint$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$3$iter
                        = this.vintIter("productFromTo", 0);
                    this.check_has_data
                        (vint$3$iter,
                         "this.vintIter(\"productFromTo\", 0)");
                    while (!vint$3$iter.atEnd()) {
                        final org.jmlspecs.models.resolve.StringOfObject[] a
                            = (org.jmlspecs.models.resolve.StringOfObject[]) vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.get();
                        final int fromIndex
                            = vint$2$iter.getInt();
                        final int toIndex
                            = vint$3$iter.getInt();
                        methodTests$.addTest
                            (new TestProductFromTo(a, fromIndex, toIndex));
                        vint$3$iter.advance();
                    }
                    vint$2$iter.advance();
                }
                vorg_jmlspecs_models_resolve_StringOfObject$_$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the productFromTo method. */
    protected static class TestProductFromTo extends OneTest {
        /** Argument a */
        private org.jmlspecs.models.resolve.StringOfObject[] a;
        /** Argument fromIndex */
        private int fromIndex;
        /** Argument toIndex */
        private int toIndex;

        /** Initialize this instance. */
        public TestProductFromTo(org.jmlspecs.models.resolve.StringOfObject[] a, int fromIndex, int toIndex) {
            super("productFromTo"+ ":" + (a==null?"null":("{org.jmlspecs.models.resolve.StringOfObject["+a.length + "]"+"}"))+ "," +fromIndex+ "," +toIndex);
            this.a = a;
            this.fromIndex = fromIndex;
            this.toIndex = toIndex;
        }

        protected void doCall() throws java.lang.Throwable {
            StringOfObject.productFromTo(a, fromIndex, toIndex);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'productFromTo' applied to";
            msg += "\n\tReceiver class StringOfObject";
            msg += "\n\tArgument a: " + this.a;
            msg += "\n\tArgument fromIndex: " + this.fromIndex;
            msg += "\n\tArgument toIndex: " + this.toIndex;
            return msg;
        }
    }

    /** Add tests for the get method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGet
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("get");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("get", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"get\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("get", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"get\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final int index
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestGet(receiver$, index));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the get method. */
    protected static class TestGet extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument index */
        private int index;

        /** Initialize this instance. */
        public TestGet(org.jmlspecs.models.resolve.StringOfObject receiver$, int index) {
            super("get"+ ":" + index);
            this.receiver$ = receiver$;
            this.index = index;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.get(index);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'get' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument index: " + this.index;
            return msg;
        }
    }

    /** Add tests for the int_size method
     * to the overall test suite. */
    private void addTestSuiteFor$TestInt_size
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("int_size");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("int_size", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"int_size\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestInt_size(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the int_size method. */
    protected static class TestInt_size extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestInt_size(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("int_size");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.int_size();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'int_size' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the length method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLength
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("length");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("length", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"length\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestLength(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the length method. */
    protected static class TestLength extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestLength(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("length");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.length();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'length' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the ext method
     * to the overall test suite. */
    private void addTestSuiteFor$TestExt$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("ext");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("ext", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"ext\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("ext", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"ext\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final java.lang.Object elem
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestExt$1(receiver$, elem));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the ext method. */
    protected static class TestExt$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestExt$1(org.jmlspecs.models.resolve.StringOfObject receiver$, java.lang.Object elem) {
            super("ext"+ ":" + (elem==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.ext(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'ext' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the add method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAdd
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("add");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("add", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"add\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("add", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"add\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final java.lang.Object elem
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestAdd(receiver$, elem));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the add method. */
    protected static class TestAdd extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestAdd(org.jmlspecs.models.resolve.StringOfObject receiver$, java.lang.Object elem) {
            super("add"+ ":" + (elem==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.add(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'add' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the addFront method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddFront
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addFront");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("addFront", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"addFront\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("addFront", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"addFront\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final java.lang.Object elem
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestAddFront(receiver$, elem));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addFront method. */
    protected static class TestAddFront extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestAddFront(org.jmlspecs.models.resolve.StringOfObject receiver$, java.lang.Object elem) {
            super("addFront"+ ":" + (elem==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addFront(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addFront' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the addAfterIndex method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddAfterIndex
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addAfterIndex");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("addAfterIndex", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"addAfterIndex\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("addAfterIndex", 1);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"addAfterIndex\", 1)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        vjava_lang_Object$2$iter
                        = this.vjava_lang_ObjectIter("addAfterIndex", 0);
                    this.check_has_data
                        (vjava_lang_Object$2$iter,
                         "this.vjava_lang_ObjectIter(\"addAfterIndex\", 0)");
                    while (!vjava_lang_Object$2$iter.atEnd()) {
                        final org.jmlspecs.models.resolve.StringOfObject receiver$
                            = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                        final int afterThisOne
                            = vint$1$iter.getInt();
                        final java.lang.Object elem
                            = (java.lang.Object) vjava_lang_Object$2$iter.get();
                        methodTests$.addTest
                            (new TestAddAfterIndex(receiver$, afterThisOne, elem));
                        vjava_lang_Object$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addAfterIndex method. */
    protected static class TestAddAfterIndex extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument afterThisOne */
        private int afterThisOne;
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestAddAfterIndex(org.jmlspecs.models.resolve.StringOfObject receiver$, int afterThisOne, java.lang.Object elem) {
            super("addAfterIndex"+ ":" + afterThisOne+ "," +(elem==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.afterThisOne = afterThisOne;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addAfterIndex(afterThisOne, elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addAfterIndex' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument afterThisOne: " + this.afterThisOne;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the addBeforeIndex method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddBeforeIndex
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addBeforeIndex");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("addBeforeIndex", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"addBeforeIndex\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("addBeforeIndex", 1);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"addBeforeIndex\", 1)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        vjava_lang_Object$2$iter
                        = this.vjava_lang_ObjectIter("addBeforeIndex", 0);
                    this.check_has_data
                        (vjava_lang_Object$2$iter,
                         "this.vjava_lang_ObjectIter(\"addBeforeIndex\", 0)");
                    while (!vjava_lang_Object$2$iter.atEnd()) {
                        final org.jmlspecs.models.resolve.StringOfObject receiver$
                            = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                        final int beforeThisOne
                            = vint$1$iter.getInt();
                        final java.lang.Object elem
                            = (java.lang.Object) vjava_lang_Object$2$iter.get();
                        methodTests$.addTest
                            (new TestAddBeforeIndex(receiver$, beforeThisOne, elem));
                        vjava_lang_Object$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addBeforeIndex method. */
    protected static class TestAddBeforeIndex extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument beforeThisOne */
        private int beforeThisOne;
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestAddBeforeIndex(org.jmlspecs.models.resolve.StringOfObject receiver$, int beforeThisOne, java.lang.Object elem) {
            super("addBeforeIndex"+ ":" + beforeThisOne+ "," +(elem==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.beforeThisOne = beforeThisOne;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addBeforeIndex(beforeThisOne, elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addBeforeIndex' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument beforeThisOne: " + this.beforeThisOne;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the concat method
     * to the overall test suite. */
    private void addTestSuiteFor$TestConcat
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("concat");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("concat", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"concat\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter
                    = this.vorg_jmlspecs_models_resolve_StringOfObjectIter("concat", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_resolve_StringOfObject$1$iter,
                     "this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"concat\", 0)");
                while (!vorg_jmlspecs_models_resolve_StringOfObject$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final org.jmlspecs.models.resolve.StringOfObject s
                        = (org.jmlspecs.models.resolve.StringOfObject) vorg_jmlspecs_models_resolve_StringOfObject$1$iter.get();
                    methodTests$.addTest
                        (new TestConcat(receiver$, s));
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the concat method. */
    protected static class TestConcat extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument s */
        private org.jmlspecs.models.resolve.StringOfObject s;

        /** Initialize this instance. */
        public TestConcat(org.jmlspecs.models.resolve.StringOfObject receiver$, org.jmlspecs.models.resolve.StringOfObject s) {
            super("concat"+ ":" + (s==null? "null" :"{org.jmlspecs.models.resolve.StringOfObject}"));
            this.receiver$ = receiver$;
            this.s = s;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.concat(s);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'concat' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s: " + this.s;
            return msg;
        }
    }

    /** Add tests for the composedWith method
     * to the overall test suite. */
    private void addTestSuiteFor$TestComposedWith
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("composedWith");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("composedWith", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"composedWith\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter
                    = this.vorg_jmlspecs_models_resolve_StringOfObjectIter("composedWith", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_resolve_StringOfObject$1$iter,
                     "this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"composedWith\", 0)");
                while (!vorg_jmlspecs_models_resolve_StringOfObject$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final org.jmlspecs.models.resolve.StringOfObject s
                        = (org.jmlspecs.models.resolve.StringOfObject) vorg_jmlspecs_models_resolve_StringOfObject$1$iter.get();
                    methodTests$.addTest
                        (new TestComposedWith(receiver$, s));
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the composedWith method. */
    protected static class TestComposedWith extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument s */
        private org.jmlspecs.models.resolve.StringOfObject s;

        /** Initialize this instance. */
        public TestComposedWith(org.jmlspecs.models.resolve.StringOfObject receiver$, org.jmlspecs.models.resolve.StringOfObject s) {
            super("composedWith"+ ":" + (s==null? "null" :"{org.jmlspecs.models.resolve.StringOfObject}"));
            this.receiver$ = receiver$;
            this.s = s;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.composedWith(s);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'composedWith' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s: " + this.s;
            return msg;
        }
    }

    /** Add tests for the addAll method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddAll
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addAll");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("addAll", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"addAll\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_util_Collection$1$iter
                    = this.vjava_util_CollectionIter("addAll", 0);
                this.check_has_data
                    (vjava_util_Collection$1$iter,
                     "this.vjava_util_CollectionIter(\"addAll\", 0)");
                while (!vjava_util_Collection$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final java.util.Collection c
                        = (java.util.Collection) vjava_util_Collection$1$iter.get();
                    methodTests$.addTest
                        (new TestAddAll(receiver$, c));
                    vjava_util_Collection$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addAll method. */
    protected static class TestAddAll extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument c */
        private java.util.Collection c;

        /** Initialize this instance. */
        public TestAddAll(org.jmlspecs.models.resolve.StringOfObject receiver$, java.util.Collection c) {
            super("addAll"+ ":" + (c==null? "null" :"{java.util.Collection}"));
            this.receiver$ = receiver$;
            this.c = c;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addAll(c);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addAll' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument c: " + this.c;
            return msg;
        }
    }

    /** Add tests for the addAll method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddAll$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addAll");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("addAll", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"addAll\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$_$1$iter
                    = this.vjava_lang_Object$_Iter("addAll", 0);
                this.check_has_data
                    (vjava_lang_Object$_$1$iter,
                     "this.vjava_lang_Object$_Iter(\"addAll\", 0)");
                while (!vjava_lang_Object$_$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final java.lang.Object[] c
                        = (java.lang.Object[]) vjava_lang_Object$_$1$iter.get();
                    methodTests$.addTest
                        (new TestAddAll$1(receiver$, c));
                    vjava_lang_Object$_$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addAll method. */
    protected static class TestAddAll$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument c */
        private java.lang.Object[] c;

        /** Initialize this instance. */
        public TestAddAll$1(org.jmlspecs.models.resolve.StringOfObject receiver$, java.lang.Object[] c) {
            super("addAll"+ ":" + (c==null?"null":("{java.lang.Object["+c.length + "]"+"}")));
            this.receiver$ = receiver$;
            this.c = c;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addAll(c);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addAll' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument c: " + this.c;
            return msg;
        }
    }

    /** Add tests for the rev method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRev
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("rev");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("rev", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"rev\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestRev(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the rev method. */
    protected static class TestRev extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestRev(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("rev");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.rev();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'rev' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the reverse method
     * to the overall test suite. */
    private void addTestSuiteFor$TestReverse
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("reverse");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("reverse", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"reverse\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestReverse(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the reverse method. */
    protected static class TestReverse extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestReverse(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("reverse");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.reverse();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'reverse' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the pow method
     * to the overall test suite. */
    private void addTestSuiteFor$TestPow
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("pow");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("pow", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"pow\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("pow", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"pow\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final int n
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestPow(receiver$, n));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the pow method. */
    protected static class TestPow extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument n */
        private int n;

        /** Initialize this instance. */
        public TestPow(org.jmlspecs.models.resolve.StringOfObject receiver$, int n) {
            super("pow"+ ":" + n);
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.pow(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'pow' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the equals method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEquals
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("equals");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("equals", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"equals\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("equals", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"equals\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final java.lang.Object x
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestEquals(receiver$, x));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the equals method. */
    protected static class TestEquals extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument x */
        private java.lang.Object x;

        /** Initialize this instance. */
        public TestEquals(org.jmlspecs.models.resolve.StringOfObject receiver$, java.lang.Object x) {
            super("equals"+ ":" + (x==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.x = x;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.equals(x);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'equals' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument x: " + this.x;
            return msg;
        }
    }

    /** Add tests for the clone method
     * to the overall test suite. */
    private void addTestSuiteFor$TestClone
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("clone");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("clone", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"clone\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestClone(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the clone method. */
    protected static class TestClone extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestClone(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("clone");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.clone();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'clone' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the occurs_ct method
     * to the overall test suite. */
    private void addTestSuiteFor$TestOccurs_ct
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("occurs_ct");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("occurs_ct", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"occurs_ct\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("occurs_ct", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"occurs_ct\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final java.lang.Object y
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestOccurs_ct(receiver$, y));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the occurs_ct method. */
    protected static class TestOccurs_ct extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument y */
        private java.lang.Object y;

        /** Initialize this instance. */
        public TestOccurs_ct(org.jmlspecs.models.resolve.StringOfObject receiver$, java.lang.Object y) {
            super("occurs_ct"+ ":" + (y==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.y = y;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.occurs_ct(y);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'occurs_ct' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument y: " + this.y;
            return msg;
        }
    }

    /** Add tests for the has method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHas
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("has");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("has", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"has\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("has", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"has\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final java.lang.Object elem
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestHas(receiver$, elem));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the has method. */
    protected static class TestHas extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument elem */
        private java.lang.Object elem;

        /** Initialize this instance. */
        public TestHas(org.jmlspecs.models.resolve.StringOfObject receiver$, java.lang.Object elem) {
            super("has"+ ":" + (elem==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.has(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'has' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the isEmpty method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsEmpty
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isEmpty");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isEmpty", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isEmpty\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsEmpty(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isEmpty method. */
    protected static class TestIsEmpty extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestIsEmpty(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("isEmpty");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isEmpty();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isEmpty' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the hashCode method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHashCode
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("hashCode");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("hashCode", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"hashCode\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestHashCode(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the hashCode method. */
    protected static class TestHashCode extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestHashCode(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("hashCode");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.hashCode();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'hashCode' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the toString method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToString
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toString");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("toString", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"toString\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestToString(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toString method. */
    protected static class TestToString extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestToString(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("toString");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toString();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toString' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the iterator method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIterator
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("iterator");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("iterator", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"iterator\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestIterator(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the iterator method. */
    protected static class TestIterator extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestIterator(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("iterator");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.iterator();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'iterator' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the elements method
     * to the overall test suite. */
    private void addTestSuiteFor$TestElements
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("elements");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("elements", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"elements\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.resolve.StringOfObject receiver$
                    = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                methodTests$.addTest
                    (new TestElements(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the elements method. */
    protected static class TestElements extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;

        /** Initialize this instance. */
        public TestElements(org.jmlspecs.models.resolve.StringOfObject receiver$) {
            super("elements");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.elements();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'elements' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isPrefix method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsPrefix
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isPrefix");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isPrefix", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isPrefix\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter
                    = this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isPrefix", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_resolve_StringOfObject$1$iter,
                     "this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isPrefix\", 0)");
                while (!vorg_jmlspecs_models_resolve_StringOfObject$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final org.jmlspecs.models.resolve.StringOfObject s2
                        = (org.jmlspecs.models.resolve.StringOfObject) vorg_jmlspecs_models_resolve_StringOfObject$1$iter.get();
                    methodTests$.addTest
                        (new TestIsPrefix(receiver$, s2));
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isPrefix method. */
    protected static class TestIsPrefix extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.resolve.StringOfObject s2;

        /** Initialize this instance. */
        public TestIsPrefix(org.jmlspecs.models.resolve.StringOfObject receiver$, org.jmlspecs.models.resolve.StringOfObject s2) {
            super("isPrefix"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.resolve.StringOfObject}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isPrefix(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isPrefix' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the isProperPrefix method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsProperPrefix
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isProperPrefix");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isProperPrefix", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isProperPrefix\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter
                    = this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isProperPrefix", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_resolve_StringOfObject$1$iter,
                     "this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isProperPrefix\", 0)");
                while (!vorg_jmlspecs_models_resolve_StringOfObject$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final org.jmlspecs.models.resolve.StringOfObject s2
                        = (org.jmlspecs.models.resolve.StringOfObject) vorg_jmlspecs_models_resolve_StringOfObject$1$iter.get();
                    methodTests$.addTest
                        (new TestIsProperPrefix(receiver$, s2));
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isProperPrefix method. */
    protected static class TestIsProperPrefix extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.resolve.StringOfObject s2;

        /** Initialize this instance. */
        public TestIsProperPrefix(org.jmlspecs.models.resolve.StringOfObject receiver$, org.jmlspecs.models.resolve.StringOfObject s2) {
            super("isProperPrefix"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.resolve.StringOfObject}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isProperPrefix(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isProperPrefix' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the isProperSuffix method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsProperSuffix
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isProperSuffix");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isProperSuffix", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isProperSuffix\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter
                    = this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isProperSuffix", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_resolve_StringOfObject$1$iter,
                     "this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isProperSuffix\", 0)");
                while (!vorg_jmlspecs_models_resolve_StringOfObject$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final org.jmlspecs.models.resolve.StringOfObject s2
                        = (org.jmlspecs.models.resolve.StringOfObject) vorg_jmlspecs_models_resolve_StringOfObject$1$iter.get();
                    methodTests$.addTest
                        (new TestIsProperSuffix(receiver$, s2));
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isProperSuffix method. */
    protected static class TestIsProperSuffix extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.resolve.StringOfObject s2;

        /** Initialize this instance. */
        public TestIsProperSuffix(org.jmlspecs.models.resolve.StringOfObject receiver$, org.jmlspecs.models.resolve.StringOfObject s2) {
            super("isProperSuffix"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.resolve.StringOfObject}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isProperSuffix(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isProperSuffix' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the isSuffix method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsSuffix
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isSuffix");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isSuffix", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isSuffix\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter
                    = this.vorg_jmlspecs_models_resolve_StringOfObjectIter("isSuffix", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_resolve_StringOfObject$1$iter,
                     "this.vorg_jmlspecs_models_resolve_StringOfObjectIter(\"isSuffix\", 0)");
                while (!vorg_jmlspecs_models_resolve_StringOfObject$1$iter.atEnd()) {
                    final org.jmlspecs.models.resolve.StringOfObject receiver$
                        = (org.jmlspecs.models.resolve.StringOfObject) receivers$iter.get();
                    final org.jmlspecs.models.resolve.StringOfObject s2
                        = (org.jmlspecs.models.resolve.StringOfObject) vorg_jmlspecs_models_resolve_StringOfObject$1$iter.get();
                    methodTests$.addTest
                        (new TestIsSuffix(receiver$, s2));
                    vorg_jmlspecs_models_resolve_StringOfObject$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isSuffix method. */
    protected static class TestIsSuffix extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.resolve.StringOfObject receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.resolve.StringOfObject s2;

        /** Initialize this instance. */
        public TestIsSuffix(org.jmlspecs.models.resolve.StringOfObject receiver$, org.jmlspecs.models.resolve.StringOfObject s2) {
            super("isSuffix"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.resolve.StringOfObject}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isSuffix(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isSuffix' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
