// This file was generated by jmlunit on Mon Mar 16 13:11:57 EDT 2009.

package org.jmlspecs.models;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JMLFloat. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JMLFloat.java
 * </pre>
 * to regenerate this class whenever JMLFloat.java changes.
 */
public class JMLFloat_JML_Test
     extends JMLFloat_JML_TestData
{
    /** Initialize this class. */
    public JMLFloat_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JMLFloat
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JMLFloat"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JMLFloat.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JMLFloat_JML_Test testobj
            = new JMLFloat_JML_Test("JMLFloat_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JMLFloat_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JMLFloat_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JMLFloat.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJMLFloat(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestJMLFloat$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestJMLFloat$2(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestJMLFloat$3(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestJMLFloat$4(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsInfinite(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsNaN(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestClone(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCompareTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsZero(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsZero$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEquals(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestHashCode(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestFloatValue(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetFloat(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestNegated(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestPlus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestMinus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestTimes(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestDividedBy(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRemainderBy(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGreaterThan(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLessThan(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGreaterThanOrEqualTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLessThanOrEqualTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToString(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestWithinEpsilonOf(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestApproximatelyEqualTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestWithinEpsilonOf$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestApproximatelyEqualTo$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestWithinEpsilonOf$2(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestApproximatelyEqualTo$2(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestWithinEpsilonOf$3(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestApproximatelyEqualTo$3(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestWithinEpsilonOf$4(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestApproximatelyEqualTo$4(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestWithinEpsilonOf$5(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestApproximatelyEqualTo$5(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestWithinEpsilonOf$6(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestApproximatelyEqualTo$6(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JMLFloat contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLFloat
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLFloat");
        try {
            methodTests$.addTest
                (new TestJMLFloat());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLFloat contructor. */
    protected static class TestJMLFloat extends OneTest {

        /** Initialize this instance. */
        public TestJMLFloat() {
            super("JMLFloat");
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLFloat();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLFloat'";
            return msg;
        }
    }

    /** Add tests for the JMLFloat contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLFloat$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLFloat");
        try {
            org.jmlspecs.jmlunit.strategies.FloatIterator
                vfloat$1$iter
                = this.vfloatIter("JMLFloat", 0);
            this.check_has_data
                (vfloat$1$iter,
                 "this.vfloatIter(\"JMLFloat\", 0)");
            while (!vfloat$1$iter.atEnd()) {
                final float inFloat
                    = vfloat$1$iter.getFloat();
                methodTests$.addTest
                    (new TestJMLFloat$1(inFloat));
                vfloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLFloat contructor. */
    protected static class TestJMLFloat$1 extends OneTest {
        /** Argument inFloat */
        private float inFloat;

        /** Initialize this instance. */
        public TestJMLFloat$1(float inFloat) {
            super("JMLFloat"+ ":" + inFloat);
            this.inFloat = inFloat;
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLFloat(inFloat);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLFloat' applied to";
            msg += "\n\tArgument inFloat: " + this.inFloat;
            return msg;
        }
    }

    /** Add tests for the JMLFloat contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLFloat$2
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLFloat");
        try {
            org.jmlspecs.jmlunit.strategies.IntIterator
                vint$1$iter
                = this.vintIter("JMLFloat", 0);
            this.check_has_data
                (vint$1$iter,
                 "this.vintIter(\"JMLFloat\", 0)");
            while (!vint$1$iter.atEnd()) {
                final int inInt
                    = vint$1$iter.getInt();
                methodTests$.addTest
                    (new TestJMLFloat$2(inInt));
                vint$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLFloat contructor. */
    protected static class TestJMLFloat$2 extends OneTest {
        /** Argument inInt */
        private int inInt;

        /** Initialize this instance. */
        public TestJMLFloat$2(int inInt) {
            super("JMLFloat"+ ":" + inInt);
            this.inInt = inInt;
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLFloat(inInt);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLFloat' applied to";
            msg += "\n\tArgument inInt: " + this.inInt;
            return msg;
        }
    }

    /** Add tests for the JMLFloat contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLFloat$3
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLFloat");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_lang_Float$1$iter
                = this.vjava_lang_FloatIter("JMLFloat", 0);
            this.check_has_data
                (vjava_lang_Float$1$iter,
                 "this.vjava_lang_FloatIter(\"JMLFloat\", 0)");
            while (!vjava_lang_Float$1$iter.atEnd()) {
                final java.lang.Float inFloat
                    = (java.lang.Float) vjava_lang_Float$1$iter.get();
                methodTests$.addTest
                    (new TestJMLFloat$3(inFloat));
                vjava_lang_Float$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLFloat contructor. */
    protected static class TestJMLFloat$3 extends OneTest {
        /** Argument inFloat */
        private java.lang.Float inFloat;

        /** Initialize this instance. */
        public TestJMLFloat$3(java.lang.Float inFloat) {
            super("JMLFloat"+ ":" + (inFloat==null? "null" :"{java.lang.Float}"));
            this.inFloat = inFloat;
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLFloat(inFloat);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLFloat' applied to";
            msg += "\n\tArgument inFloat: " + this.inFloat;
            return msg;
        }
    }

    /** Add tests for the JMLFloat contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLFloat$4
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLFloat");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_lang_String$1$iter
                = this.vjava_lang_StringIter("JMLFloat", 0);
            this.check_has_data
                (vjava_lang_String$1$iter,
                 "this.vjava_lang_StringIter(\"JMLFloat\", 0)");
            while (!vjava_lang_String$1$iter.atEnd()) {
                final java.lang.String s
                    = (java.lang.String) vjava_lang_String$1$iter.get();
                methodTests$.addTest
                    (new TestJMLFloat$4(s));
                vjava_lang_String$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLFloat contructor. */
    protected static class TestJMLFloat$4 extends OneTest {
        /** Argument s */
        private java.lang.String s;

        /** Initialize this instance. */
        public TestJMLFloat$4(java.lang.String s) {
            super("JMLFloat"+ ":" + (s==null? "null" :("\""+s+"\"")));
            this.s = s;
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLFloat(s);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLFloat' applied to";
            msg += "\n\tArgument s: " + this.s;
            return msg;
        }
    }

    /** Add tests for the isInfinite method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsInfinite
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isInfinite");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("isInfinite", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"isInfinite\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsInfinite(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isInfinite method. */
    protected static class TestIsInfinite extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestIsInfinite(org.jmlspecs.models.JMLFloat receiver$) {
            super("isInfinite");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isInfinite();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isInfinite' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isNaN method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsNaN
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isNaN");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("isNaN", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"isNaN\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsNaN(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isNaN method. */
    protected static class TestIsNaN extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestIsNaN(org.jmlspecs.models.JMLFloat receiver$) {
            super("isNaN");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isNaN();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isNaN' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the clone method
     * to the overall test suite. */
    private void addTestSuiteFor$TestClone
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("clone");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("clone", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"clone\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestClone(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the clone method. */
    protected static class TestClone extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestClone(org.jmlspecs.models.JMLFloat receiver$) {
            super("clone");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.clone();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'clone' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the compareTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCompareTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("compareTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("compareTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"compareTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("compareTo", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"compareTo\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final java.lang.Object op2
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestCompareTo(receiver$, op2));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the compareTo method. */
    protected static class TestCompareTo extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument op2 */
        private java.lang.Object op2;

        /** Initialize this instance. */
        public TestCompareTo(org.jmlspecs.models.JMLFloat receiver$, java.lang.Object op2) {
            super("compareTo"+ ":" + (op2==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.op2 = op2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.compareTo(op2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'compareTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument op2: " + this.op2;
            return msg;
        }
    }

    /** Add tests for the isZero method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsZero
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isZero");
        try {
            org.jmlspecs.jmlunit.strategies.FloatIterator
                vfloat$1$iter
                = this.vfloatIter("isZero", 0);
            this.check_has_data
                (vfloat$1$iter,
                 "this.vfloatIter(\"isZero\", 0)");
            while (!vfloat$1$iter.atEnd()) {
                final float f
                    = vfloat$1$iter.getFloat();
                methodTests$.addTest
                    (new TestIsZero(f));
                vfloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isZero method. */
    protected static class TestIsZero extends OneTest {
        /** Argument f */
        private float f;

        /** Initialize this instance. */
        public TestIsZero(float f) {
            super("isZero"+ ":" + f);
            this.f = f;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.isZero(f);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isZero' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f: " + this.f;
            return msg;
        }
    }

    /** Add tests for the isZero method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsZero$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isZero");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("isZero", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"isZero\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsZero$1(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isZero method. */
    protected static class TestIsZero$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestIsZero$1(org.jmlspecs.models.JMLFloat receiver$) {
            super("isZero");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isZero();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isZero' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the equals method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEquals
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("equals");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("equals", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"equals\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("equals", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"equals\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final java.lang.Object op2
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestEquals(receiver$, op2));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the equals method. */
    protected static class TestEquals extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument op2 */
        private java.lang.Object op2;

        /** Initialize this instance. */
        public TestEquals(org.jmlspecs.models.JMLFloat receiver$, java.lang.Object op2) {
            super("equals"+ ":" + (op2==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.op2 = op2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.equals(op2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'equals' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument op2: " + this.op2;
            return msg;
        }
    }

    /** Add tests for the hashCode method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHashCode
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("hashCode");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("hashCode", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"hashCode\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestHashCode(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the hashCode method. */
    protected static class TestHashCode extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestHashCode(org.jmlspecs.models.JMLFloat receiver$) {
            super("hashCode");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.hashCode();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'hashCode' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the floatValue method
     * to the overall test suite. */
    private void addTestSuiteFor$TestFloatValue
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("floatValue");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("floatValue", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"floatValue\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestFloatValue(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the floatValue method. */
    protected static class TestFloatValue extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestFloatValue(org.jmlspecs.models.JMLFloat receiver$) {
            super("floatValue");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.floatValue();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'floatValue' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getFloat method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetFloat
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getFloat");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("getFloat", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"getFloat\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetFloat(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getFloat method. */
    protected static class TestGetFloat extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestGetFloat(org.jmlspecs.models.JMLFloat receiver$) {
            super("getFloat");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getFloat();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getFloat' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the negated method
     * to the overall test suite. */
    private void addTestSuiteFor$TestNegated
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("negated");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("negated", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"negated\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestNegated(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the negated method. */
    protected static class TestNegated extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestNegated(org.jmlspecs.models.JMLFloat receiver$) {
            super("negated");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.negated();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'negated' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the plus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestPlus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("plus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("plus", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"plus\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("plus", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"plus\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestPlus(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the plus method. */
    protected static class TestPlus extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestPlus(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("plus"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.plus(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'plus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the minus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestMinus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("minus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("minus", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"minus\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("minus", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"minus\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestMinus(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the minus method. */
    protected static class TestMinus extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestMinus(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("minus"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.minus(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'minus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the times method
     * to the overall test suite. */
    private void addTestSuiteFor$TestTimes
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("times");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("times", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"times\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("times", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"times\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestTimes(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the times method. */
    protected static class TestTimes extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestTimes(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("times"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.times(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'times' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the dividedBy method
     * to the overall test suite. */
    private void addTestSuiteFor$TestDividedBy
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("dividedBy");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("dividedBy", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"dividedBy\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("dividedBy", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"dividedBy\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestDividedBy(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the dividedBy method. */
    protected static class TestDividedBy extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestDividedBy(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("dividedBy"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.dividedBy(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'dividedBy' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the remainderBy method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRemainderBy
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("remainderBy");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("remainderBy", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"remainderBy\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("remainderBy", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"remainderBy\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestRemainderBy(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the remainderBy method. */
    protected static class TestRemainderBy extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestRemainderBy(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("remainderBy"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.remainderBy(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'remainderBy' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the greaterThan method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGreaterThan
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("greaterThan");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("greaterThan", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"greaterThan\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("greaterThan", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"greaterThan\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestGreaterThan(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the greaterThan method. */
    protected static class TestGreaterThan extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestGreaterThan(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("greaterThan"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.greaterThan(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'greaterThan' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the lessThan method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLessThan
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("lessThan");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("lessThan", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"lessThan\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("lessThan", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"lessThan\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestLessThan(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the lessThan method. */
    protected static class TestLessThan extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestLessThan(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("lessThan"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.lessThan(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'lessThan' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the greaterThanOrEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGreaterThanOrEqualTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("greaterThanOrEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("greaterThanOrEqualTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"greaterThanOrEqualTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("greaterThanOrEqualTo", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"greaterThanOrEqualTo\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestGreaterThanOrEqualTo(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the greaterThanOrEqualTo method. */
    protected static class TestGreaterThanOrEqualTo extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestGreaterThanOrEqualTo(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("greaterThanOrEqualTo"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.greaterThanOrEqualTo(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'greaterThanOrEqualTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the lessThanOrEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLessThanOrEqualTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("lessThanOrEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("lessThanOrEqualTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"lessThanOrEqualTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("lessThanOrEqualTo", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"lessThanOrEqualTo\", 0)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLFloat receiver$
                        = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                    final org.jmlspecs.models.JMLFloat f2
                        = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                    methodTests$.addTest
                        (new TestLessThanOrEqualTo(receiver$, f2));
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the lessThanOrEqualTo method. */
    protected static class TestLessThanOrEqualTo extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;

        /** Initialize this instance. */
        public TestLessThanOrEqualTo(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2) {
            super("lessThanOrEqualTo"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}"));
            this.receiver$ = receiver$;
            this.f2 = f2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.lessThanOrEqualTo(f2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'lessThanOrEqualTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            return msg;
        }
    }

    /** Add tests for the toString method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToString
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toString");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("toString", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"toString\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLFloat receiver$
                    = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                methodTests$.addTest
                    (new TestToString(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toString method. */
    protected static class TestToString extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;

        /** Initialize this instance. */
        public TestToString(org.jmlspecs.models.JMLFloat receiver$) {
            super("toString");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toString();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toString' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the withinEpsilonOf method
     * to the overall test suite. */
    private void addTestSuiteFor$TestWithinEpsilonOf
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("withinEpsilonOf");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("withinEpsilonOf", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"withinEpsilonOf\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("withinEpsilonOf", 1);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"withinEpsilonOf\", 1)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$2$iter
                        = this.vfloatIter("withinEpsilonOf", 0);
                    this.check_has_data
                        (vfloat$2$iter,
                         "this.vfloatIter(\"withinEpsilonOf\", 0)");
                    while (!vfloat$2$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat receiver$
                            = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                        final org.jmlspecs.models.JMLFloat f2
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                        final float epsilon
                            = vfloat$2$iter.getFloat();
                        methodTests$.addTest
                            (new TestWithinEpsilonOf(receiver$, f2, epsilon));
                        vfloat$2$iter.advance();
                    }
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the withinEpsilonOf method. */
    protected static class TestWithinEpsilonOf extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestWithinEpsilonOf(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2, float epsilon) {
            super("withinEpsilonOf"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +epsilon);
            this.receiver$ = receiver$;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.withinEpsilonOf(f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'withinEpsilonOf' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the approximatelyEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestApproximatelyEqualTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("approximatelyEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("approximatelyEqualTo", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"approximatelyEqualTo\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$1$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("approximatelyEqualTo", 1);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$1$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"approximatelyEqualTo\", 1)");
                while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$2$iter
                        = this.vfloatIter("approximatelyEqualTo", 0);
                    this.check_has_data
                        (vfloat$2$iter,
                         "this.vfloatIter(\"approximatelyEqualTo\", 0)");
                    while (!vfloat$2$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat receiver$
                            = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                        final org.jmlspecs.models.JMLFloat f2
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                        final float epsilon
                            = vfloat$2$iter.getFloat();
                        methodTests$.addTest
                            (new TestApproximatelyEqualTo(receiver$, f2, epsilon));
                        vfloat$2$iter.advance();
                    }
                    vorg_jmlspecs_models_JMLFloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the approximatelyEqualTo method. */
    protected static class TestApproximatelyEqualTo extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestApproximatelyEqualTo(org.jmlspecs.models.JMLFloat receiver$, org.jmlspecs.models.JMLFloat f2, float epsilon) {
            super("approximatelyEqualTo"+ ":" + (f2==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +epsilon);
            this.receiver$ = receiver$;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.approximatelyEqualTo(f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'approximatelyEqualTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the withinEpsilonOf method
     * to the overall test suite. */
    private void addTestSuiteFor$TestWithinEpsilonOf$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("withinEpsilonOf");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("withinEpsilonOf", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"withinEpsilonOf\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Float$1$iter
                    = this.vjava_lang_FloatIter("withinEpsilonOf", 1);
                this.check_has_data
                    (vjava_lang_Float$1$iter,
                     "this.vjava_lang_FloatIter(\"withinEpsilonOf\", 1)");
                while (!vjava_lang_Float$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$2$iter
                        = this.vfloatIter("withinEpsilonOf", 0);
                    this.check_has_data
                        (vfloat$2$iter,
                         "this.vfloatIter(\"withinEpsilonOf\", 0)");
                    while (!vfloat$2$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat receiver$
                            = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                        final java.lang.Float f2
                            = (java.lang.Float) vjava_lang_Float$1$iter.get();
                        final float epsilon
                            = vfloat$2$iter.getFloat();
                        methodTests$.addTest
                            (new TestWithinEpsilonOf$1(receiver$, f2, epsilon));
                        vfloat$2$iter.advance();
                    }
                    vjava_lang_Float$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the withinEpsilonOf method. */
    protected static class TestWithinEpsilonOf$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private java.lang.Float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestWithinEpsilonOf$1(org.jmlspecs.models.JMLFloat receiver$, java.lang.Float f2, float epsilon) {
            super("withinEpsilonOf"+ ":" + (f2==null? "null" :"{java.lang.Float}")+ "," +epsilon);
            this.receiver$ = receiver$;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.withinEpsilonOf(f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'withinEpsilonOf' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the approximatelyEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestApproximatelyEqualTo$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("approximatelyEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("approximatelyEqualTo", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"approximatelyEqualTo\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Float$1$iter
                    = this.vjava_lang_FloatIter("approximatelyEqualTo", 1);
                this.check_has_data
                    (vjava_lang_Float$1$iter,
                     "this.vjava_lang_FloatIter(\"approximatelyEqualTo\", 1)");
                while (!vjava_lang_Float$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$2$iter
                        = this.vfloatIter("approximatelyEqualTo", 0);
                    this.check_has_data
                        (vfloat$2$iter,
                         "this.vfloatIter(\"approximatelyEqualTo\", 0)");
                    while (!vfloat$2$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat receiver$
                            = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                        final java.lang.Float f2
                            = (java.lang.Float) vjava_lang_Float$1$iter.get();
                        final float epsilon
                            = vfloat$2$iter.getFloat();
                        methodTests$.addTest
                            (new TestApproximatelyEqualTo$1(receiver$, f2, epsilon));
                        vfloat$2$iter.advance();
                    }
                    vjava_lang_Float$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the approximatelyEqualTo method. */
    protected static class TestApproximatelyEqualTo$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private java.lang.Float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestApproximatelyEqualTo$1(org.jmlspecs.models.JMLFloat receiver$, java.lang.Float f2, float epsilon) {
            super("approximatelyEqualTo"+ ":" + (f2==null? "null" :"{java.lang.Float}")+ "," +epsilon);
            this.receiver$ = receiver$;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.approximatelyEqualTo(f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'approximatelyEqualTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the withinEpsilonOf method
     * to the overall test suite. */
    private void addTestSuiteFor$TestWithinEpsilonOf$2
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("withinEpsilonOf");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("withinEpsilonOf", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"withinEpsilonOf\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.FloatIterator
                    vfloat$1$iter
                    = this.vfloatIter("withinEpsilonOf", 1);
                this.check_has_data
                    (vfloat$1$iter,
                     "this.vfloatIter(\"withinEpsilonOf\", 1)");
                while (!vfloat$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$2$iter
                        = this.vfloatIter("withinEpsilonOf", 0);
                    this.check_has_data
                        (vfloat$2$iter,
                         "this.vfloatIter(\"withinEpsilonOf\", 0)");
                    while (!vfloat$2$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat receiver$
                            = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                        final float f2
                            = vfloat$1$iter.getFloat();
                        final float epsilon
                            = vfloat$2$iter.getFloat();
                        methodTests$.addTest
                            (new TestWithinEpsilonOf$2(receiver$, f2, epsilon));
                        vfloat$2$iter.advance();
                    }
                    vfloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the withinEpsilonOf method. */
    protected static class TestWithinEpsilonOf$2 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestWithinEpsilonOf$2(org.jmlspecs.models.JMLFloat receiver$, float f2, float epsilon) {
            super("withinEpsilonOf"+ ":" + f2+ "," +epsilon);
            this.receiver$ = receiver$;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.withinEpsilonOf(f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'withinEpsilonOf' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the approximatelyEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestApproximatelyEqualTo$2
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("approximatelyEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLFloatIter("approximatelyEqualTo", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLFloatIter(\"approximatelyEqualTo\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.FloatIterator
                    vfloat$1$iter
                    = this.vfloatIter("approximatelyEqualTo", 1);
                this.check_has_data
                    (vfloat$1$iter,
                     "this.vfloatIter(\"approximatelyEqualTo\", 1)");
                while (!vfloat$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$2$iter
                        = this.vfloatIter("approximatelyEqualTo", 0);
                    this.check_has_data
                        (vfloat$2$iter,
                         "this.vfloatIter(\"approximatelyEqualTo\", 0)");
                    while (!vfloat$2$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat receiver$
                            = (org.jmlspecs.models.JMLFloat) receivers$iter.get();
                        final float f2
                            = vfloat$1$iter.getFloat();
                        final float epsilon
                            = vfloat$2$iter.getFloat();
                        methodTests$.addTest
                            (new TestApproximatelyEqualTo$2(receiver$, f2, epsilon));
                        vfloat$2$iter.advance();
                    }
                    vfloat$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the approximatelyEqualTo method. */
    protected static class TestApproximatelyEqualTo$2 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLFloat receiver$;
        /** Argument f2 */
        private float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestApproximatelyEqualTo$2(org.jmlspecs.models.JMLFloat receiver$, float f2, float epsilon) {
            super("approximatelyEqualTo"+ ":" + f2+ "," +epsilon);
            this.receiver$ = receiver$;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.approximatelyEqualTo(f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'approximatelyEqualTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the withinEpsilonOf method
     * to the overall test suite. */
    private void addTestSuiteFor$TestWithinEpsilonOf$3
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("withinEpsilonOf");
        try {
            org.jmlspecs.jmlunit.strategies.FloatIterator
                vfloat$1$iter
                = this.vfloatIter("withinEpsilonOf", 2);
            this.check_has_data
                (vfloat$1$iter,
                 "this.vfloatIter(\"withinEpsilonOf\", 2)");
            while (!vfloat$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.FloatIterator
                    vfloat$2$iter
                    = this.vfloatIter("withinEpsilonOf", 1);
                this.check_has_data
                    (vfloat$2$iter,
                     "this.vfloatIter(\"withinEpsilonOf\", 1)");
                while (!vfloat$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$3$iter
                        = this.vfloatIter("withinEpsilonOf", 0);
                    this.check_has_data
                        (vfloat$3$iter,
                         "this.vfloatIter(\"withinEpsilonOf\", 0)");
                    while (!vfloat$3$iter.atEnd()) {
                        final float f1
                            = vfloat$1$iter.getFloat();
                        final float f2
                            = vfloat$2$iter.getFloat();
                        final float epsilon
                            = vfloat$3$iter.getFloat();
                        methodTests$.addTest
                            (new TestWithinEpsilonOf$3(f1, f2, epsilon));
                        vfloat$3$iter.advance();
                    }
                    vfloat$2$iter.advance();
                }
                vfloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the withinEpsilonOf method. */
    protected static class TestWithinEpsilonOf$3 extends OneTest {
        /** Argument f1 */
        private float f1;
        /** Argument f2 */
        private float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestWithinEpsilonOf$3(float f1, float f2, float epsilon) {
            super("withinEpsilonOf"+ ":" + f1+ "," +f2+ "," +epsilon);
            this.f1 = f1;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.withinEpsilonOf(f1, f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'withinEpsilonOf' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f1: " + this.f1;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the approximatelyEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestApproximatelyEqualTo$3
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("approximatelyEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.FloatIterator
                vfloat$1$iter
                = this.vfloatIter("approximatelyEqualTo", 2);
            this.check_has_data
                (vfloat$1$iter,
                 "this.vfloatIter(\"approximatelyEqualTo\", 2)");
            while (!vfloat$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.FloatIterator
                    vfloat$2$iter
                    = this.vfloatIter("approximatelyEqualTo", 1);
                this.check_has_data
                    (vfloat$2$iter,
                     "this.vfloatIter(\"approximatelyEqualTo\", 1)");
                while (!vfloat$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$3$iter
                        = this.vfloatIter("approximatelyEqualTo", 0);
                    this.check_has_data
                        (vfloat$3$iter,
                         "this.vfloatIter(\"approximatelyEqualTo\", 0)");
                    while (!vfloat$3$iter.atEnd()) {
                        final float f1
                            = vfloat$1$iter.getFloat();
                        final float f2
                            = vfloat$2$iter.getFloat();
                        final float epsilon
                            = vfloat$3$iter.getFloat();
                        methodTests$.addTest
                            (new TestApproximatelyEqualTo$3(f1, f2, epsilon));
                        vfloat$3$iter.advance();
                    }
                    vfloat$2$iter.advance();
                }
                vfloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the approximatelyEqualTo method. */
    protected static class TestApproximatelyEqualTo$3 extends OneTest {
        /** Argument f1 */
        private float f1;
        /** Argument f2 */
        private float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestApproximatelyEqualTo$3(float f1, float f2, float epsilon) {
            super("approximatelyEqualTo"+ ":" + f1+ "," +f2+ "," +epsilon);
            this.f1 = f1;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.approximatelyEqualTo(f1, f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'approximatelyEqualTo' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f1: " + this.f1;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the withinEpsilonOf method
     * to the overall test suite. */
    private void addTestSuiteFor$TestWithinEpsilonOf$4
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("withinEpsilonOf");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLFloat$1$iter
                = this.vorg_jmlspecs_models_JMLFloatIter("withinEpsilonOf", 2);
            this.check_has_data
                (vorg_jmlspecs_models_JMLFloat$1$iter,
                 "this.vorg_jmlspecs_models_JMLFloatIter(\"withinEpsilonOf\", 2)");
            while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$2$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("withinEpsilonOf", 1);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$2$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"withinEpsilonOf\", 1)");
                while (!vorg_jmlspecs_models_JMLFloat$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$3$iter
                        = this.vfloatIter("withinEpsilonOf", 0);
                    this.check_has_data
                        (vfloat$3$iter,
                         "this.vfloatIter(\"withinEpsilonOf\", 0)");
                    while (!vfloat$3$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat f1
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                        final org.jmlspecs.models.JMLFloat f2
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$2$iter.get();
                        final float epsilon
                            = vfloat$3$iter.getFloat();
                        methodTests$.addTest
                            (new TestWithinEpsilonOf$4(f1, f2, epsilon));
                        vfloat$3$iter.advance();
                    }
                    vorg_jmlspecs_models_JMLFloat$2$iter.advance();
                }
                vorg_jmlspecs_models_JMLFloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the withinEpsilonOf method. */
    protected static class TestWithinEpsilonOf$4 extends OneTest {
        /** Argument f1 */
        private org.jmlspecs.models.JMLFloat f1;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestWithinEpsilonOf$4(org.jmlspecs.models.JMLFloat f1, org.jmlspecs.models.JMLFloat f2, float epsilon) {
            super("withinEpsilonOf"+ ":" + (f1==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +(f2==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +epsilon);
            this.f1 = f1;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.withinEpsilonOf(f1, f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'withinEpsilonOf' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f1: " + this.f1;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the approximatelyEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestApproximatelyEqualTo$4
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("approximatelyEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLFloat$1$iter
                = this.vorg_jmlspecs_models_JMLFloatIter("approximatelyEqualTo", 2);
            this.check_has_data
                (vorg_jmlspecs_models_JMLFloat$1$iter,
                 "this.vorg_jmlspecs_models_JMLFloatIter(\"approximatelyEqualTo\", 2)");
            while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLFloat$2$iter
                    = this.vorg_jmlspecs_models_JMLFloatIter("approximatelyEqualTo", 1);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLFloat$2$iter,
                     "this.vorg_jmlspecs_models_JMLFloatIter(\"approximatelyEqualTo\", 1)");
                while (!vorg_jmlspecs_models_JMLFloat$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$3$iter
                        = this.vfloatIter("approximatelyEqualTo", 0);
                    this.check_has_data
                        (vfloat$3$iter,
                         "this.vfloatIter(\"approximatelyEqualTo\", 0)");
                    while (!vfloat$3$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat f1
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                        final org.jmlspecs.models.JMLFloat f2
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$2$iter.get();
                        final float epsilon
                            = vfloat$3$iter.getFloat();
                        methodTests$.addTest
                            (new TestApproximatelyEqualTo$4(f1, f2, epsilon));
                        vfloat$3$iter.advance();
                    }
                    vorg_jmlspecs_models_JMLFloat$2$iter.advance();
                }
                vorg_jmlspecs_models_JMLFloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the approximatelyEqualTo method. */
    protected static class TestApproximatelyEqualTo$4 extends OneTest {
        /** Argument f1 */
        private org.jmlspecs.models.JMLFloat f1;
        /** Argument f2 */
        private org.jmlspecs.models.JMLFloat f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestApproximatelyEqualTo$4(org.jmlspecs.models.JMLFloat f1, org.jmlspecs.models.JMLFloat f2, float epsilon) {
            super("approximatelyEqualTo"+ ":" + (f1==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +(f2==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +epsilon);
            this.f1 = f1;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.approximatelyEqualTo(f1, f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'approximatelyEqualTo' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f1: " + this.f1;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the withinEpsilonOf method
     * to the overall test suite. */
    private void addTestSuiteFor$TestWithinEpsilonOf$5
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("withinEpsilonOf");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLFloat$1$iter
                = this.vorg_jmlspecs_models_JMLFloatIter("withinEpsilonOf", 2);
            this.check_has_data
                (vorg_jmlspecs_models_JMLFloat$1$iter,
                 "this.vorg_jmlspecs_models_JMLFloatIter(\"withinEpsilonOf\", 2)");
            while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Float$2$iter
                    = this.vjava_lang_FloatIter("withinEpsilonOf", 1);
                this.check_has_data
                    (vjava_lang_Float$2$iter,
                     "this.vjava_lang_FloatIter(\"withinEpsilonOf\", 1)");
                while (!vjava_lang_Float$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$3$iter
                        = this.vfloatIter("withinEpsilonOf", 0);
                    this.check_has_data
                        (vfloat$3$iter,
                         "this.vfloatIter(\"withinEpsilonOf\", 0)");
                    while (!vfloat$3$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat f1
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                        final java.lang.Float f2
                            = (java.lang.Float) vjava_lang_Float$2$iter.get();
                        final float epsilon
                            = vfloat$3$iter.getFloat();
                        methodTests$.addTest
                            (new TestWithinEpsilonOf$5(f1, f2, epsilon));
                        vfloat$3$iter.advance();
                    }
                    vjava_lang_Float$2$iter.advance();
                }
                vorg_jmlspecs_models_JMLFloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the withinEpsilonOf method. */
    protected static class TestWithinEpsilonOf$5 extends OneTest {
        /** Argument f1 */
        private org.jmlspecs.models.JMLFloat f1;
        /** Argument f2 */
        private java.lang.Float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestWithinEpsilonOf$5(org.jmlspecs.models.JMLFloat f1, java.lang.Float f2, float epsilon) {
            super("withinEpsilonOf"+ ":" + (f1==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +(f2==null? "null" :"{java.lang.Float}")+ "," +epsilon);
            this.f1 = f1;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.withinEpsilonOf(f1, f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'withinEpsilonOf' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f1: " + this.f1;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the approximatelyEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestApproximatelyEqualTo$5
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("approximatelyEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLFloat$1$iter
                = this.vorg_jmlspecs_models_JMLFloatIter("approximatelyEqualTo", 2);
            this.check_has_data
                (vorg_jmlspecs_models_JMLFloat$1$iter,
                 "this.vorg_jmlspecs_models_JMLFloatIter(\"approximatelyEqualTo\", 2)");
            while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Float$2$iter
                    = this.vjava_lang_FloatIter("approximatelyEqualTo", 1);
                this.check_has_data
                    (vjava_lang_Float$2$iter,
                     "this.vjava_lang_FloatIter(\"approximatelyEqualTo\", 1)");
                while (!vjava_lang_Float$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$3$iter
                        = this.vfloatIter("approximatelyEqualTo", 0);
                    this.check_has_data
                        (vfloat$3$iter,
                         "this.vfloatIter(\"approximatelyEqualTo\", 0)");
                    while (!vfloat$3$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat f1
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                        final java.lang.Float f2
                            = (java.lang.Float) vjava_lang_Float$2$iter.get();
                        final float epsilon
                            = vfloat$3$iter.getFloat();
                        methodTests$.addTest
                            (new TestApproximatelyEqualTo$5(f1, f2, epsilon));
                        vfloat$3$iter.advance();
                    }
                    vjava_lang_Float$2$iter.advance();
                }
                vorg_jmlspecs_models_JMLFloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the approximatelyEqualTo method. */
    protected static class TestApproximatelyEqualTo$5 extends OneTest {
        /** Argument f1 */
        private org.jmlspecs.models.JMLFloat f1;
        /** Argument f2 */
        private java.lang.Float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestApproximatelyEqualTo$5(org.jmlspecs.models.JMLFloat f1, java.lang.Float f2, float epsilon) {
            super("approximatelyEqualTo"+ ":" + (f1==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +(f2==null? "null" :"{java.lang.Float}")+ "," +epsilon);
            this.f1 = f1;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.approximatelyEqualTo(f1, f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'approximatelyEqualTo' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f1: " + this.f1;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the withinEpsilonOf method
     * to the overall test suite. */
    private void addTestSuiteFor$TestWithinEpsilonOf$6
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("withinEpsilonOf");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLFloat$1$iter
                = this.vorg_jmlspecs_models_JMLFloatIter("withinEpsilonOf", 2);
            this.check_has_data
                (vorg_jmlspecs_models_JMLFloat$1$iter,
                 "this.vorg_jmlspecs_models_JMLFloatIter(\"withinEpsilonOf\", 2)");
            while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.FloatIterator
                    vfloat$2$iter
                    = this.vfloatIter("withinEpsilonOf", 1);
                this.check_has_data
                    (vfloat$2$iter,
                     "this.vfloatIter(\"withinEpsilonOf\", 1)");
                while (!vfloat$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$3$iter
                        = this.vfloatIter("withinEpsilonOf", 0);
                    this.check_has_data
                        (vfloat$3$iter,
                         "this.vfloatIter(\"withinEpsilonOf\", 0)");
                    while (!vfloat$3$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat f1
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                        final float f2
                            = vfloat$2$iter.getFloat();
                        final float epsilon
                            = vfloat$3$iter.getFloat();
                        methodTests$.addTest
                            (new TestWithinEpsilonOf$6(f1, f2, epsilon));
                        vfloat$3$iter.advance();
                    }
                    vfloat$2$iter.advance();
                }
                vorg_jmlspecs_models_JMLFloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the withinEpsilonOf method. */
    protected static class TestWithinEpsilonOf$6 extends OneTest {
        /** Argument f1 */
        private org.jmlspecs.models.JMLFloat f1;
        /** Argument f2 */
        private float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestWithinEpsilonOf$6(org.jmlspecs.models.JMLFloat f1, float f2, float epsilon) {
            super("withinEpsilonOf"+ ":" + (f1==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +f2+ "," +epsilon);
            this.f1 = f1;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.withinEpsilonOf(f1, f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'withinEpsilonOf' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f1: " + this.f1;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Add tests for the approximatelyEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestApproximatelyEqualTo$6
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("approximatelyEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLFloat$1$iter
                = this.vorg_jmlspecs_models_JMLFloatIter("approximatelyEqualTo", 2);
            this.check_has_data
                (vorg_jmlspecs_models_JMLFloat$1$iter,
                 "this.vorg_jmlspecs_models_JMLFloatIter(\"approximatelyEqualTo\", 2)");
            while (!vorg_jmlspecs_models_JMLFloat$1$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.FloatIterator
                    vfloat$2$iter
                    = this.vfloatIter("approximatelyEqualTo", 1);
                this.check_has_data
                    (vfloat$2$iter,
                     "this.vfloatIter(\"approximatelyEqualTo\", 1)");
                while (!vfloat$2$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.FloatIterator
                        vfloat$3$iter
                        = this.vfloatIter("approximatelyEqualTo", 0);
                    this.check_has_data
                        (vfloat$3$iter,
                         "this.vfloatIter(\"approximatelyEqualTo\", 0)");
                    while (!vfloat$3$iter.atEnd()) {
                        final org.jmlspecs.models.JMLFloat f1
                            = (org.jmlspecs.models.JMLFloat) vorg_jmlspecs_models_JMLFloat$1$iter.get();
                        final float f2
                            = vfloat$2$iter.getFloat();
                        final float epsilon
                            = vfloat$3$iter.getFloat();
                        methodTests$.addTest
                            (new TestApproximatelyEqualTo$6(f1, f2, epsilon));
                        vfloat$3$iter.advance();
                    }
                    vfloat$2$iter.advance();
                }
                vorg_jmlspecs_models_JMLFloat$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the approximatelyEqualTo method. */
    protected static class TestApproximatelyEqualTo$6 extends OneTest {
        /** Argument f1 */
        private org.jmlspecs.models.JMLFloat f1;
        /** Argument f2 */
        private float f2;
        /** Argument epsilon */
        private float epsilon;

        /** Initialize this instance. */
        public TestApproximatelyEqualTo$6(org.jmlspecs.models.JMLFloat f1, float f2, float epsilon) {
            super("approximatelyEqualTo"+ ":" + (f1==null? "null" :"{org.jmlspecs.models.JMLFloat}")+ "," +f2+ "," +epsilon);
            this.f1 = f1;
            this.f2 = f2;
            this.epsilon = epsilon;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLFloat.approximatelyEqualTo(f1, f2, epsilon);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'approximatelyEqualTo' applied to";
            msg += "\n\tReceiver class JMLFloat";
            msg += "\n\tArgument f1: " + this.f1;
            msg += "\n\tArgument f2: " + this.f2;
            msg += "\n\tArgument epsilon: " + this.epsilon;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
