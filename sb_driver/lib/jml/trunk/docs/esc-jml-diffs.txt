		 DIFFERENCES BETWEEN ESC/JAVA AND JML
		     $Date: 2002/08/18 01:14:12 $

This reflects discussions from Gary Leavens's visit with Raymie Stata
and Rustan Leino at Compaq SRC ending August 20, 1999, some discussion
back at Iowa State on Aug 30, 1999, discussions between Gary and
Rustan during FM'99 (Sept. 19-25, 1999), and revisions by the
JML team (especially thanks to Clyde Ruby) in October through
December 1999.  It also now reflects discussions by email leading to the
JML 2.2 release in December 2000, and changes made in JML releases 2.3-2.6
up to May 7, 2001, and discussions with Rustan Leino in early May 2001.
It is somewhat updated to ESC/Java 1.2.4 and JML 3.0.

A formal grammar is now available, and should be consulted for the details
of JML's syntax.

There are many former differences which are no more because of changes
made in JML and ESC/Java; these are no longer documented here.  As of
this writing, JML is mostly upward compatible with ESC/Java, so in
many places this is not mentioned.  We only mention places where JML
does not parse or use the same semantics as ESC/Java.  On the other
hand, ESC/Java has only implemented some of what was agreed to, and
what is left to implement is described below.


DIFFERENCES FROM BOTH THE ORIGINAL JML AND ESC/JAVA

- ESC/Java has (public) "ghost" variables which are concrete,
specification-only variables.  In ESC/Java, ghost variables seem to be
scoped differently than normal variables, while in JML the scope of a
ghost variable declaration is exactly the same as for a normal Java
declaration.  ESC/Java should change to make the scope of ghost
variable declarations the same scoping as normal Java declarations.

- ESC/Java changed to support the following syntax for loop
invariants and termination functions:

        //@ loop_invariant ...loop_inv...
        //@ decreases ...termination_fun...
        while (...cond...) do { ...statements... }

JML supports this and also the following synonyms (adapted from RESOLVE):

        //@ maintaining ...loop_inv...
        //@ decreasing ...termination_fun...
        while (...cond...) do { ...statements... }

- ESC/Java should adopt at least the main aspects of the agreed upon
combined specification syntax.  The main aspects do not include the
implies_that, for_example, and subclassing_contract sections, however,
which will remain only in JML.  The Antlr file in
../org/jmlspecs/checker/Jml.g should be consulted for the details of what JML
supports.

Several ideas were involved in this grammar change which we
negotiated.  An important one is to distinguish between specifications
and extending method specifications.  If the method is overriding a
declaration in a supertype (or, for JML, a refinement), then it must
use one of the extending method specification forms.  These extending
specification forms start with "also".  (We originally had an "and"
form which JML no longer supports.) These forms are combined with the
specification being overridden (if any, see the latest version of TR
#00-03 from the JML web page for details).

Another idea is the distinction between lightweight (ESC/Java) and
heavyweight (JML) specifications.  A specification that doesn't start
with an optional privacy modifier and one of the JML behavior keywords
(e.g., normal_behavior) is a lightweight specification.  A completely
omitted specification is taken to be a lightweight specification.

The default for an omitted clause in a lightweight specification is
"\not_specified", in all cases.  Different tools can interpret the
meaning of \not_specified" in different ways.  In particular, this
resolves the problem of what the meaning of a completely omitted
specification is.

On the other hand, heavyweight specifications are assumed to be
complete, and they have the following defaults.

     requires true;
     modifies \nothing;
     ensures true;
     exsures (Exception e) true;
     diverges false;

However, in a normal_behavior heavyweight specification, the
exsures/signals clause must be omitted.  It means that no exceptions
can be thrown, as if one had written:

     exsures (Exception e) false;

Conversely, in an exceptional_behavior heavyweight specification, the
ensures clause must be omitted.  It means that the method may not
return normally, as if one had written:

     exsures (Exception e) false;

(Also, for JML, in a subclassing contract the defaults are
callable \everything; accessible \everything;.)

Changes still needed in ESC/Java include supporting various synonyms:
        for "requires": "pre"
	for "modifies": "modifiable" and "assignable"
        for "ensures": "post"
        for "exsures": "signals"
and the use of {| and |} as brackets for spec-case sequences.

ESC/Java should at the very least follow the agreement by taking the
following steps (in order):
  - parsing the keyword synonyms,
  - work with specifications that use "also" instead of also_requires, etc.
    and drop the use of also_requires (which is not sensible semantically)
    and also_ensures.
  - parse the brackets {| and |},
  - parse the behavior keywords and privacy modifiers.


OTHER DIFFERENCES FOR WHICH ESC/JAVA AGREED TO CHANGE

- ESC/Java should add JML's initially clauses to declarations; these
to specify initial properties for declarations.


NON-AGREED DIFFERENCES FOR WHICH IT WOULD BE HELPFUL FOR ESC/JAVA TO CHANGE

The following have not been agreed to by ESC/Java, but would be
helpful for compatability.

- ESC/Java could require semicolons where they are required by JML.
  Currently some semicolons are optional in ESC/Java.

- JML allows privacy modifiers (public, protected, private) on
invariants, and enforces them; for example, public invariants cannot
mention protected or private names.  ESC/Java should at least parse
these modifiers and ignore them.

- JML has the modifier "pure", which can be used to declare classes
and methods that have no side effects.

- JML allows \nothing (and \everything) in a modifies clause.

- JML allows final fields in modifies clauses in constructors.

- ESC/Java seems to have a \max operator which can be applied to a
  lockset.  This conflicts with JML's \max quantifier.

- ESC/Java requires bodies for methods in .spec files

- JML treats non_null annotations as redundant, and allows them to be
  specifed on arguments in overrides of methods.  ESC/Java rejects
  files when this happens.  It's true that it's a specification error
  to add non_null to a parameter in an override, but it should be okay
  to specify it redundantly.  For return types, it should be okay to
  add it in subtypes.

REMAINING DIFFERENCES FOR WHICH JML HAS CHANGED

- ESC/Java has lexical pragmas of the form "nowarn labels;".  JML 
has added these, but requires a semicolon at the end of the pragma.

- ESC/Java requires a whole syntactic construct in a //@ comment,
whereas in JML the construct can be split over multiple lines.
(This is theoretically the case now in JML, but is not enforced
as in the JML parser //@ is simply ignored, as are /*@ and @*/.)


DIFFERENCES WHICH WILL (PROBABLY) REMAIN (JML AS A SUPERSET OF ESC/JAVA)

It would be nice if ESC/Java could parse and ignore all of JML's
syntax, but that is not currently planned.  The first two differences
below allow users of both tools to deal with this problem.

- JML supports annotation forms //+@ and /*+@ ... @+*/, so that
annotations that JML understands but ESC/Java doesn't can be written.

- JML allows specifications to appear within javadoc comments in the form

   /** ...
    <pre><JML>
     ...
    </JML></pre>
   */

which, of course, will appear before the method signature.
ESC/Java already has such comments of the form <pre><esc> ... </esc></pre>.
ESC/Java will not recognize the <JML> form, so that specification forms
that JML understands but ESC/Java doesn't can be written in
documentation comments.

- JML uses .jml, .jml-refined, .java-refined,
.refines-jml, and .refines-java files
as well as .java files.

- JML has .jml and .jml-refined files whose syntax does not
require annotation markers.

- JML has dependent (abstract) model variables.

- JML has model classes, interfaces, or methods.

- JML has depends and represents declarations.

- JML has history constraints (constraint).

- JML has subclassing_contracts including callable and accessible clauses

- JML has other refinement calculus and annotation primitives
besides the assert and assume that are in ESC/Java
  choose, hence_by, a nondeterministic if statement (choose_if),
  and behavior statements (these allow a specification to act as a statement)
that can appear only in model programs.

- JML allows pure method invocations in assertions.

- JML allows new expressions (with pure constructors) in assertions.

- JML has measured_by clauses to give termination functions for recursive
methods and specifications.

- JML has a notion of refinement of specifications with a "refine" keyword.

- JML has model import declarations.

- JML has when clauses in specifications for concurrency.

- JML specifications have an implication (implies_that) and examples
  (for_example) sections, as well as a subclassing_contract section.

IDEAS THAT NEED MORE DISCUSSION

The exact semantics of modifiable clauses.  Should they prohibit
temporary side-effects.  The JML group believes so, both to better
support concurrency, and to allow one to program subclasses from
superclass specifications (see the OOPSLA 2000 paper by Ruby and
Leavens, available from the JML web site).

Which methods an invariant or history constraint applies to only
public methods (as in JML) or to all methods (as in ESC/Java).

Should we allow the use of the usual Java doclet style keywords,
like @requires, etc. in documentation comments?

APPENDIX

A technical note:
When Gary was at SRC, we noted that the unit of "also"-combination for
method specifications is the specification:
		       requires false;
(and for this specification the set of variables that can be modified
and the postcondition don't matter).
Note however that this is not the unit of the "and" combination
of specifications.
