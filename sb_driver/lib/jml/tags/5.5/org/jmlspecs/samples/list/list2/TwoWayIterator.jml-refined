// @(#) $Id: TwoWayIterator.jml-refined,v 1.6 2005/12/06 19:55:00 chalin Exp $

// Copyright (C) 1998, 1999 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

// Author:  Clyde Ruby

package org.jmlspecs.samples.list.list2;

import org.jmlspecs.samples.list.iterator.RestartableIterator;
import org.jmlspecs.samples.list.node.TwoWayNode;

//@ model import org.jmlspecs.models.JMLObjectSequence;

// FIXME: adapt this file to non-null-by-default and remove the following modifier.
/*@ nullable_by_default @*/ 
public class TwoWayIterator implements RestartableIterator {
  //@ public represents unchanged <- true; // FIXME

  /*@ public model JMLObjectSequence theList;
    @                           in currElem, uniteratedElems, iteratedElems;
    @*/
  //@ public invariant theList != null;

  /*@ public model int currIndex;
    @                  in currElem, uniteratedElems, iteratedElems;
    @*/
  //@ public invariant -1 <= currIndex && currIndex <= theList.int_length();

  /*@ public normal_behavior
    @   requires link != null && link.prevNode == null;
    @   assignable currElem, uniteratedElems, iteratedElems, currIndex;
    @   assignable_redundantly theList;
    @   ensures currIndex == 0;
    @*/
  public TwoWayIterator(TwoWayNode link);

  /*@ also
    @ public normal_behavior 
    @   requires unchanged;
    @   assignable currIndex;
    @   ensures currIndex == 0;
    @*/
  public void first();

  /*@ public normal_behavior
    @   requires unchanged;
    @   assignable currIndex;
    @   ensures currIndex == theList.int_length() - 1;
    @*/
  public void last();

  /*@ also
    @ public normal_behavior 
    @   requires unchanged && 0 <= currIndex && currIndex < theList.int_length();
    @   assignable currIndex;
    @   ensures currIndex == \old(currIndex) + 1;
    @*/
  public void next();

  /*@ public normal_behavior
    @   requires unchanged && 0 < currIndex;
    @   assignable currIndex;
    @   ensures currIndex == \old(currIndex) - 1;
    @*/
  public void previous();

  /*@ also
    @ implies_that
    @ public normal_behavior 
    @   requires unchanged;
    @   assignable \nothing;
    @   ensures \result == (currIndex == theList.int_length());
    @*/
  public /*@ pure @*/ boolean isDone();

  /*@ public normal_behavior
    @   requires unchanged;
    @   assignable \nothing;
    @   ensures \result == (currIndex == 0);
    @*/
  public /*@ pure @*/ boolean isAtFront();

  /*@ also
    @ implies_that
    @  public normal_behavior 
    @   requires 0 <= currIndex && currIndex < theList.int_length()
    @         && unchanged;
    @   assignable \nothing;
    @   ensures \result == theList.itemAt(currIndex);
    @*/
  public /*@ pure @*/ Object currentItem();

}

