// @(#) $Id: E_SLList.jml,v 1.4 2005/12/06 19:55:00 chalin Exp $

// Copyright (C) 1998, 1999 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

// Author:  Clyde Ruby

package org.jmlspecs.samples.list.list1;

//@ refine "E_SLList.jml-refined";

import org.jmlspecs.samples.list.list1.node.SLNode;

// FIXME: adapt this file to non-null-by-default and remove the following modifier.
/*@ nullable_by_default @*/ 
public class E_SLList extends SLList { // Extended Singly Linked List
   protected int length_;
   //@               in theList;

   //@ protected invariant length_ == theList.int_length();

   protected int log_;
   //@              in changeLog;

  //@ protected represents changeLog <- log_;

   /*@ also
     @  protected normal_behavior
     @   requires !isOffFront() && !isOffEnd() && newEntry != null;
     @   assignable changeLog;
     @   ensures \not_modified(length_);
    @*/
   public void replaceEntry(Object newEntry);

   /*@  protected normal_behavior
     @   assignable cursor;
     @   ensures cursor == theList.int_length() - 1;
    @*/
   protected void lastEntry();

   /*@  protected normal_behavior
     @   requires othLst != null;
     @   assignable theList, cursor, changeLog;
     @   ensures theList.equals(othLst.theList) && cursor == 0
     @        && changeLog == othLst.changeLog;
    @*/
   protected E_SLList(E_SLList othLst);

   /*@  protected normal_behavior
     @   requires listNode != null;
     @         // && len == listNode.entries.size() + 1; //1 sentinel node
	       // !FIXME! the second conjunct causes RAC tests to fail
     @   assignable theList, cursor, changeLog;
     @   ensures theListNode_.entries.equals(listNode.entries)
     @        && cursor == 0 && changeLog == 0;
    @*/
   protected E_SLList(SLNode listNode, int len);
}

