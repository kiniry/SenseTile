// @(#) $Id: DLNode.jml,v 1.6 2005/12/06 19:55:00 chalin Exp $

// Copyright (C) 1998, 1999 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

// Author:  Clyde Ruby

package org.jmlspecs.samples.list.list1.node;

//@ refine "DLNode.jml-refined";

//@ model import org.jmlspecs.models.JMLObjectSequence;

// FIXME: adapt this file to non-null-by-default and remove the following modifier.
/*@ nullable_by_default @*/ 
public class DLNode extends SLNode { // Doubly Linked Node

    // data members

    protected DLNode prevNode_;
    //@              in prevNode;

    //@ protected represents prevNode <- prevNode_;

    //@ protected represents nextDL <- (DLNode) nextNode_;

    /*@ protected represents prevEntries <- 
      @   (prevNode_ == null)? new JMLObjectSequence() 
      @        : prevNode_.prevEntries.insertBack(prevNode_.entry_);
      @*/

    // Note that based on the data group specifications here and in SLNode,
    // nextNode_.prevNode_ is not assignable when the other fields of 
    // the node are.
    // This makes sense since the type of nextNode_ is SLNode which 
    // does not necessarily have this field!
    // However, only the last node of a list containing one or more DLNode's 
    // can be a SLNode (if all DLNode's are linked in both directions).

    /*@ protected invariant (prevNode != null)?
      @                     (prevNode.nextNode == this) : true;
      @*/
    /*@ protected invariant (nextNode != null)?
      @                     (nextDL.prevNode == this) : true;
      @*/
    //@ protected invariant (* the nodes are linked both ways *);

  /*@ protected normal_behavior
    @   requires (prvNode == null || prvNode.nextNode == null 
    @             || prvNode.nextNode == nxtNode)
    @         && (nxtNode == null || nxtNode.prevNode == null
    @             || nxtNode.prevNode == prvNode);
    @   assignable entries;
    @   ensures theEntry == ent &&  entries.itemAt(0) == ent
    @       && prevNode == prvNode && nextNode == nxtNode;
    @*/
    protected DLNode(Object ent, DLNode prvNode, DLNode nxtNode);

    /*@ protected normal_behavior
      @   requires nxtNode != null;
      @   assignable nextNode, nxtNode.prevNode;
      @   ensures nextNode == nxtNode
      @        && nextDL.prevNode == this;
      @ also
      @   requires nxtNode == null;
      @   assignable nextNode;
      @   ensures nextNode == null;
      @*/
    protected void linkTo(DLNode nxtNode);

  /*@ protected normal_behavior
    @    assignable \nothing;
    @    ensures \result.entries.equals(entries);
    @        ensures \result.prevEntries.isEmpty();
    @*/
    protected DLNode cloneNext();

  /*@ protected normal_behavior
    @    assignable \nothing;
    @    ensures \result.allButFirst.isEmpty();
    @       ensures \result.prevEntries.equals(prevEntries);
    @*/
    protected DLNode clonePrevious();

}

