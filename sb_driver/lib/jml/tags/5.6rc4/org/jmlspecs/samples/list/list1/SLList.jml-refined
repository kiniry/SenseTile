// @(#) $Id: SLList.jml-refined,v 1.6 2007/07/01 02:38:45 chalin Exp $

// Copyright (C) 1998, 1999 Iowa State University

// This file is part of JML

// JML is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.

// JML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with JML; see the file COPYING.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

// Author:  Clyde Ruby

package org.jmlspecs.samples.list.list1;
//@ model import org.jmlspecs.models.JMLObjectSequence;

// FIXME: adapt this file to non-null-by-default and remove the following modifier.
/*@ nullable_by_default @*/ 
public class SLList 
{
  //@ public model JMLObjectSequence theList;
  //@ public model int cursor;

  /*@ public invariant isOffFront() || isOffEnd()
    @        || (0 <= cursor && cursor < theList.int_length());
    @*/

  /*@ public invariant theList != null
    @        && (\forall int i; 0<=i && i<theList.int_length();
    @                           theList.itemAt(i) != null );
    @*/

  //@  public initially theList.isEmpty() && cursor == 0;

  /*@  public normal_behavior
    @   assignable theList, cursor;
    @   ensures theList != null && theList.isEmpty() && cursor == 0;
    @*/
  public SLList();

  // iteration methods
  // -----------------

  /*@  public normal_behavior
    @   assignable cursor;
    @   ensures cursor == 0;
    @*/
  public void firstEntry();

  /*@  public normal_behavior
    @   requires !isOffEnd();
    @   assignable cursor;
    @   ensures cursor == \pre(cursor + 1);
    @*/
  public void incrementCursor();

  /*@  public normal_behavior
    @   ensures \result == (cursor == -1); 
    @*/
  public /*@ pure @*/ boolean isOffFront();

  /*@  public normal_behavior
    @   assignable \nothing;
    @   ensures \result == (cursor == theList.int_length());
    @*/
  public /*@ pure @*/ boolean isOffEnd();

  /*@  public normal_behavior
    @   requires !isOffFront() && !isOffEnd();
    @   assignable \nothing;
    @   ensures \result == theList.itemAt(cursor);
    @*/
  public /*@ pure @*/ Object getEntry();

  // methods for changing the list
  // -----------------------------

  /*@  public normal_behavior
    @   old JMLObjectSequence preList = (!isOffFront() && !isOffEnd())
    @		? theList.removeItemAt(cursor)
    @		: null;
    @   requires !isOffFront() && !isOffEnd();
    @   assignable theList, cursor;
    @   ensures cursor == \pre(cursor - 1)
    @        && theList.equals(preList);
    @*/
  public void removeEntry();

  /*@  public normal_behavior
    @   old JMLObjectSequence preList = (newEntry != null && !isOffFront() && !isOffEnd())
    @		? theList.replaceItemAt(cursor, newEntry)
    @		: null;
    @   requires !isOffFront() && !isOffEnd() && newEntry != null;
    @   assignable theList;
    @   ensures theList.equals(preList);
    @*/
  public void replaceEntry(Object newEntry);

  /*@  public normal_behavior
    @   requires newEntry != null;
    @   {|
    @	  old JMLObjectSequence preList = (!isOffFront() && !isOffEnd())
    @		? theList.insertAfterIndex(cursor, newEntry)
    @		: null;
    @     requires !isOffFront() && !isOffEnd();
    @     assignable theList, cursor;
    @     ensures theList.equals(preList)
    @          && \not_modified(cursor);
    @   also
    @	  old JMLObjectSequence preList = isOffFront()
    @		? theList.insertFront(newEntry)
    @		: null;
    @     requires isOffFront();
    @     assignable theList, cursor;
    @     ensures theList.equals(preList)
    @          && \not_modified(cursor);
    @   |}
    @   implies_that
    @     public normal_behavior
    @         requires isOffEnd();
    @         assignable theList, cursor;
    @         ensures \not_specified;  // but will be specified in DLList
    @*/
  public void insertAfterCursor(Object newEntry);

  /*@  public normal_behavior
    @   requires newEntry != null && !isOffFront();
    @   assignable theList, cursor;
    @   ensures cursor == \pre(cursor) + 1 
    @        && theList.equals(
    @               \pre(theList.insertBeforeIndex(cursor, newEntry)));
    @  implies_that
    @     public normal_behavior
    @         requires isOffFront();
    @         assignable theList, cursor;
    @         ensures \not_specified;  // but will be specified in DLList
    @*/
  public void insertBeforeCursor(Object newEntry);
 
  /*@ also
    @ public normal_behavior
    @   assignable \nothing;
    @   ensures \result instanceof SLList && ((SLList)\result).cursor == 0
    @        && ((SLList)\result).theList.equals(theList);
    @*/
  public /*@ non_null @*/ Object clone();
}

