// This file was generated by jmlunit on Mon Mar 16 13:11:57 EDT 2009.

package org.jmlspecs.models;

import java.util.Enumeration;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JMLValueSet. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JMLValueSet.java
 * </pre>
 * to regenerate this class whenever JMLValueSet.java changes.
 */
public class JMLValueSet_JML_Test
     extends JMLValueSet_JML_TestData
{
    /** Initialize this class. */
    public JMLValueSet_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JMLValueSet
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JMLValueSet"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JMLValueSet.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JMLValueSet_JML_Test testobj
            = new JMLValueSet_JML_Test("JMLValueSet_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JMLValueSet_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JMLValueSet_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JMLValueSet.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJMLValueSet(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestJMLValueSet$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSingleton(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestConvertFrom(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestConvertFrom$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestConvertFrom$2(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestHas(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestContainsAll(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEquals(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestHashCode(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsEmpty(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestInt_size(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsSubset(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsProperSubset(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsSuperset(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsProperSuperset(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestChoose(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestClone(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestInsert(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRemove(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIntersection(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUnion(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestDifference(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestPowerSet(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToBag(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToSequence(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToArray(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestElements(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIterator(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToString(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestHas$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JMLValueSet contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLValueSet
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLValueSet");
        try {
            methodTests$.addTest
                (new TestJMLValueSet());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLValueSet contructor. */
    protected static class TestJMLValueSet extends OneTest {

        /** Initialize this instance. */
        public TestJMLValueSet() {
            super("JMLValueSet");
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLValueSet();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLValueSet'";
            return msg;
        }
    }

    /** Add tests for the JMLValueSet contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLValueSet$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLValueSet");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLType$1$iter
                = this.vorg_jmlspecs_models_JMLTypeIter("JMLValueSet", 0);
            this.check_has_data
                (vorg_jmlspecs_models_JMLType$1$iter,
                 "this.vorg_jmlspecs_models_JMLTypeIter(\"JMLValueSet\", 0)");
            while (!vorg_jmlspecs_models_JMLType$1$iter.atEnd()) {
                final org.jmlspecs.models.JMLType e
                    = (org.jmlspecs.models.JMLType) vorg_jmlspecs_models_JMLType$1$iter.get();
                methodTests$.addTest
                    (new TestJMLValueSet$1(e));
                vorg_jmlspecs_models_JMLType$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLValueSet contructor. */
    protected static class TestJMLValueSet$1 extends OneTest {
        /** Argument e */
        private org.jmlspecs.models.JMLType e;

        /** Initialize this instance. */
        public TestJMLValueSet$1(org.jmlspecs.models.JMLType e) {
            super("JMLValueSet"+ ":" + (e==null? "null" :"{org.jmlspecs.models.JMLType}"));
            this.e = e;
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLValueSet(e);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLValueSet' applied to";
            msg += "\n\tArgument e: " + this.e;
            return msg;
        }
    }

    /** Add tests for the singleton method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSingleton
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("singleton");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLType$1$iter
                = this.vorg_jmlspecs_models_JMLTypeIter("singleton", 0);
            this.check_has_data
                (vorg_jmlspecs_models_JMLType$1$iter,
                 "this.vorg_jmlspecs_models_JMLTypeIter(\"singleton\", 0)");
            while (!vorg_jmlspecs_models_JMLType$1$iter.atEnd()) {
                final org.jmlspecs.models.JMLType e
                    = (org.jmlspecs.models.JMLType) vorg_jmlspecs_models_JMLType$1$iter.get();
                methodTests$.addTest
                    (new TestSingleton(e));
                vorg_jmlspecs_models_JMLType$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the singleton method. */
    protected static class TestSingleton extends OneTest {
        /** Argument e */
        private org.jmlspecs.models.JMLType e;

        /** Initialize this instance. */
        public TestSingleton(org.jmlspecs.models.JMLType e) {
            super("singleton"+ ":" + (e==null? "null" :"{org.jmlspecs.models.JMLType}"));
            this.e = e;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLValueSet.singleton(e);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'singleton' applied to";
            msg += "\n\tReceiver class JMLValueSet";
            msg += "\n\tArgument e: " + this.e;
            return msg;
        }
    }

    /** Add tests for the convertFrom method
     * to the overall test suite. */
    private void addTestSuiteFor$TestConvertFrom
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("convertFrom");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLType$_$1$iter
                = this.vorg_jmlspecs_models_JMLType$_Iter("convertFrom", 0);
            this.check_has_data
                (vorg_jmlspecs_models_JMLType$_$1$iter,
                 "this.vorg_jmlspecs_models_JMLType$_Iter(\"convertFrom\", 0)");
            while (!vorg_jmlspecs_models_JMLType$_$1$iter.atEnd()) {
                final org.jmlspecs.models.JMLType[] a
                    = (org.jmlspecs.models.JMLType[]) vorg_jmlspecs_models_JMLType$_$1$iter.get();
                methodTests$.addTest
                    (new TestConvertFrom(a));
                vorg_jmlspecs_models_JMLType$_$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the convertFrom method. */
    protected static class TestConvertFrom extends OneTest {
        /** Argument a */
        private org.jmlspecs.models.JMLType[] a;

        /** Initialize this instance. */
        public TestConvertFrom(org.jmlspecs.models.JMLType[] a) {
            super("convertFrom"+ ":" + (a==null?"null":("{org.jmlspecs.models.JMLType["+a.length + "]"+"}")));
            this.a = a;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLValueSet.convertFrom(a);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'convertFrom' applied to";
            msg += "\n\tReceiver class JMLValueSet";
            msg += "\n\tArgument a: " + this.a;
            return msg;
        }
    }

    /** Add tests for the convertFrom method
     * to the overall test suite. */
    private void addTestSuiteFor$TestConvertFrom$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("convertFrom");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_util_Collection$1$iter
                = this.vjava_util_CollectionIter("convertFrom", 0);
            this.check_has_data
                (vjava_util_Collection$1$iter,
                 "this.vjava_util_CollectionIter(\"convertFrom\", 0)");
            while (!vjava_util_Collection$1$iter.atEnd()) {
                final java.util.Collection c
                    = (java.util.Collection) vjava_util_Collection$1$iter.get();
                methodTests$.addTest
                    (new TestConvertFrom$1(c));
                vjava_util_Collection$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the convertFrom method. */
    protected static class TestConvertFrom$1 extends OneTest {
        /** Argument c */
        private java.util.Collection c;

        /** Initialize this instance. */
        public TestConvertFrom$1(java.util.Collection c) {
            super("convertFrom"+ ":" + (c==null? "null" :"{java.util.Collection}"));
            this.c = c;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLValueSet.convertFrom(c);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'convertFrom' applied to";
            msg += "\n\tReceiver class JMLValueSet";
            msg += "\n\tArgument c: " + this.c;
            return msg;
        }
    }

    /** Add tests for the convertFrom method
     * to the overall test suite. */
    private void addTestSuiteFor$TestConvertFrom$2
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("convertFrom");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vorg_jmlspecs_models_JMLCollection$1$iter
                = this.vorg_jmlspecs_models_JMLCollectionIter("convertFrom", 0);
            this.check_has_data
                (vorg_jmlspecs_models_JMLCollection$1$iter,
                 "this.vorg_jmlspecs_models_JMLCollectionIter(\"convertFrom\", 0)");
            while (!vorg_jmlspecs_models_JMLCollection$1$iter.atEnd()) {
                final org.jmlspecs.models.JMLCollection c
                    = (org.jmlspecs.models.JMLCollection) vorg_jmlspecs_models_JMLCollection$1$iter.get();
                methodTests$.addTest
                    (new TestConvertFrom$2(c));
                vorg_jmlspecs_models_JMLCollection$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the convertFrom method. */
    protected static class TestConvertFrom$2 extends OneTest {
        /** Argument c */
        private org.jmlspecs.models.JMLCollection c;

        /** Initialize this instance. */
        public TestConvertFrom$2(org.jmlspecs.models.JMLCollection c) {
            super("convertFrom"+ ":" + (c==null? "null" :"{org.jmlspecs.models.JMLCollection}"));
            this.c = c;
        }

        protected void doCall() throws java.lang.Throwable {
            JMLValueSet.convertFrom(c);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'convertFrom' applied to";
            msg += "\n\tReceiver class JMLValueSet";
            msg += "\n\tArgument c: " + this.c;
            return msg;
        }
    }

    /** Add tests for the has method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHas
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("has");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("has", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"has\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLType$1$iter
                    = this.vorg_jmlspecs_models_JMLTypeIter("has", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLType$1$iter,
                     "this.vorg_jmlspecs_models_JMLTypeIter(\"has\", 0)");
                while (!vorg_jmlspecs_models_JMLType$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLType elem
                        = (org.jmlspecs.models.JMLType) vorg_jmlspecs_models_JMLType$1$iter.get();
                    methodTests$.addTest
                        (new TestHas(receiver$, elem));
                    vorg_jmlspecs_models_JMLType$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the has method. */
    protected static class TestHas extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument elem */
        private org.jmlspecs.models.JMLType elem;

        /** Initialize this instance. */
        public TestHas(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLType elem) {
            super("has"+ ":" + (elem==null? "null" :"{org.jmlspecs.models.JMLType}"));
            this.receiver$ = receiver$;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.has(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'has' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the containsAll method
     * to the overall test suite. */
    private void addTestSuiteFor$TestContainsAll
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("containsAll");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("containsAll", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"containsAll\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_util_Collection$1$iter
                    = this.vjava_util_CollectionIter("containsAll", 0);
                this.check_has_data
                    (vjava_util_Collection$1$iter,
                     "this.vjava_util_CollectionIter(\"containsAll\", 0)");
                while (!vjava_util_Collection$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final java.util.Collection c
                        = (java.util.Collection) vjava_util_Collection$1$iter.get();
                    methodTests$.addTest
                        (new TestContainsAll(receiver$, c));
                    vjava_util_Collection$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the containsAll method. */
    protected static class TestContainsAll extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument c */
        private java.util.Collection c;

        /** Initialize this instance. */
        public TestContainsAll(org.jmlspecs.models.JMLValueSet receiver$, java.util.Collection c) {
            super("containsAll"+ ":" + (c==null? "null" :"{java.util.Collection}"));
            this.receiver$ = receiver$;
            this.c = c;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.containsAll(c);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'containsAll' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument c: " + this.c;
            return msg;
        }
    }

    /** Add tests for the equals method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEquals
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("equals");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("equals", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"equals\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("equals", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"equals\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final java.lang.Object s2
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestEquals(receiver$, s2));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the equals method. */
    protected static class TestEquals extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument s2 */
        private java.lang.Object s2;

        /** Initialize this instance. */
        public TestEquals(org.jmlspecs.models.JMLValueSet receiver$, java.lang.Object s2) {
            super("equals"+ ":" + (s2==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.equals(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'equals' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the hashCode method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHashCode
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("hashCode");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("hashCode", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"hashCode\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestHashCode(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the hashCode method. */
    protected static class TestHashCode extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestHashCode(org.jmlspecs.models.JMLValueSet receiver$) {
            super("hashCode");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.hashCode();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'hashCode' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isEmpty method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsEmpty
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isEmpty");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("isEmpty", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"isEmpty\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsEmpty(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isEmpty method. */
    protected static class TestIsEmpty extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestIsEmpty(org.jmlspecs.models.JMLValueSet receiver$) {
            super("isEmpty");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isEmpty();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isEmpty' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the int_size method
     * to the overall test suite. */
    private void addTestSuiteFor$TestInt_size
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("int_size");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("int_size", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"int_size\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestInt_size(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the int_size method. */
    protected static class TestInt_size extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestInt_size(org.jmlspecs.models.JMLValueSet receiver$) {
            super("int_size");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.int_size();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'int_size' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isSubset method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsSubset
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isSubset");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("isSubset", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"isSubset\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLValueSet$1$iter
                    = this.vorg_jmlspecs_models_JMLValueSetIter("isSubset", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLValueSet$1$iter,
                     "this.vorg_jmlspecs_models_JMLValueSetIter(\"isSubset\", 0)");
                while (!vorg_jmlspecs_models_JMLValueSet$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLValueSet s2
                        = (org.jmlspecs.models.JMLValueSet) vorg_jmlspecs_models_JMLValueSet$1$iter.get();
                    methodTests$.addTest
                        (new TestIsSubset(receiver$, s2));
                    vorg_jmlspecs_models_JMLValueSet$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isSubset method. */
    protected static class TestIsSubset extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.JMLValueSet s2;

        /** Initialize this instance. */
        public TestIsSubset(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLValueSet s2) {
            super("isSubset"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.JMLValueSet}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isSubset(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isSubset' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the isProperSubset method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsProperSubset
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isProperSubset");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("isProperSubset", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"isProperSubset\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLValueSet$1$iter
                    = this.vorg_jmlspecs_models_JMLValueSetIter("isProperSubset", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLValueSet$1$iter,
                     "this.vorg_jmlspecs_models_JMLValueSetIter(\"isProperSubset\", 0)");
                while (!vorg_jmlspecs_models_JMLValueSet$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLValueSet s2
                        = (org.jmlspecs.models.JMLValueSet) vorg_jmlspecs_models_JMLValueSet$1$iter.get();
                    methodTests$.addTest
                        (new TestIsProperSubset(receiver$, s2));
                    vorg_jmlspecs_models_JMLValueSet$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isProperSubset method. */
    protected static class TestIsProperSubset extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.JMLValueSet s2;

        /** Initialize this instance. */
        public TestIsProperSubset(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLValueSet s2) {
            super("isProperSubset"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.JMLValueSet}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isProperSubset(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isProperSubset' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the isSuperset method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsSuperset
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isSuperset");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("isSuperset", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"isSuperset\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLValueSet$1$iter
                    = this.vorg_jmlspecs_models_JMLValueSetIter("isSuperset", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLValueSet$1$iter,
                     "this.vorg_jmlspecs_models_JMLValueSetIter(\"isSuperset\", 0)");
                while (!vorg_jmlspecs_models_JMLValueSet$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLValueSet s2
                        = (org.jmlspecs.models.JMLValueSet) vorg_jmlspecs_models_JMLValueSet$1$iter.get();
                    methodTests$.addTest
                        (new TestIsSuperset(receiver$, s2));
                    vorg_jmlspecs_models_JMLValueSet$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isSuperset method. */
    protected static class TestIsSuperset extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.JMLValueSet s2;

        /** Initialize this instance. */
        public TestIsSuperset(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLValueSet s2) {
            super("isSuperset"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.JMLValueSet}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isSuperset(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isSuperset' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the isProperSuperset method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsProperSuperset
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isProperSuperset");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("isProperSuperset", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"isProperSuperset\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLValueSet$1$iter
                    = this.vorg_jmlspecs_models_JMLValueSetIter("isProperSuperset", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLValueSet$1$iter,
                     "this.vorg_jmlspecs_models_JMLValueSetIter(\"isProperSuperset\", 0)");
                while (!vorg_jmlspecs_models_JMLValueSet$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLValueSet s2
                        = (org.jmlspecs.models.JMLValueSet) vorg_jmlspecs_models_JMLValueSet$1$iter.get();
                    methodTests$.addTest
                        (new TestIsProperSuperset(receiver$, s2));
                    vorg_jmlspecs_models_JMLValueSet$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isProperSuperset method. */
    protected static class TestIsProperSuperset extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.JMLValueSet s2;

        /** Initialize this instance. */
        public TestIsProperSuperset(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLValueSet s2) {
            super("isProperSuperset"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.JMLValueSet}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isProperSuperset(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isProperSuperset' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the choose method
     * to the overall test suite. */
    private void addTestSuiteFor$TestChoose
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("choose");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("choose", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"choose\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestChoose(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the choose method. */
    protected static class TestChoose extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestChoose(org.jmlspecs.models.JMLValueSet receiver$) {
            super("choose");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.choose();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'choose' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the clone method
     * to the overall test suite. */
    private void addTestSuiteFor$TestClone
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("clone");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("clone", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"clone\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestClone(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the clone method. */
    protected static class TestClone extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestClone(org.jmlspecs.models.JMLValueSet receiver$) {
            super("clone");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.clone();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'clone' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the insert method
     * to the overall test suite. */
    private void addTestSuiteFor$TestInsert
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("insert");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("insert", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"insert\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLType$1$iter
                    = this.vorg_jmlspecs_models_JMLTypeIter("insert", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLType$1$iter,
                     "this.vorg_jmlspecs_models_JMLTypeIter(\"insert\", 0)");
                while (!vorg_jmlspecs_models_JMLType$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLType elem
                        = (org.jmlspecs.models.JMLType) vorg_jmlspecs_models_JMLType$1$iter.get();
                    methodTests$.addTest
                        (new TestInsert(receiver$, elem));
                    vorg_jmlspecs_models_JMLType$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the insert method. */
    protected static class TestInsert extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument elem */
        private org.jmlspecs.models.JMLType elem;

        /** Initialize this instance. */
        public TestInsert(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLType elem) {
            super("insert"+ ":" + (elem==null? "null" :"{org.jmlspecs.models.JMLType}"));
            this.receiver$ = receiver$;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.insert(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'insert' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the remove method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRemove
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("remove");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("remove", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"remove\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLType$1$iter
                    = this.vorg_jmlspecs_models_JMLTypeIter("remove", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLType$1$iter,
                     "this.vorg_jmlspecs_models_JMLTypeIter(\"remove\", 0)");
                while (!vorg_jmlspecs_models_JMLType$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLType elem
                        = (org.jmlspecs.models.JMLType) vorg_jmlspecs_models_JMLType$1$iter.get();
                    methodTests$.addTest
                        (new TestRemove(receiver$, elem));
                    vorg_jmlspecs_models_JMLType$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the remove method. */
    protected static class TestRemove extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument elem */
        private org.jmlspecs.models.JMLType elem;

        /** Initialize this instance. */
        public TestRemove(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLType elem) {
            super("remove"+ ":" + (elem==null? "null" :"{org.jmlspecs.models.JMLType}"));
            this.receiver$ = receiver$;
            this.elem = elem;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.remove(elem);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'remove' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument elem: " + this.elem;
            return msg;
        }
    }

    /** Add tests for the intersection method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIntersection
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("intersection");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("intersection", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"intersection\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLValueSet$1$iter
                    = this.vorg_jmlspecs_models_JMLValueSetIter("intersection", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLValueSet$1$iter,
                     "this.vorg_jmlspecs_models_JMLValueSetIter(\"intersection\", 0)");
                while (!vorg_jmlspecs_models_JMLValueSet$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLValueSet s2
                        = (org.jmlspecs.models.JMLValueSet) vorg_jmlspecs_models_JMLValueSet$1$iter.get();
                    methodTests$.addTest
                        (new TestIntersection(receiver$, s2));
                    vorg_jmlspecs_models_JMLValueSet$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the intersection method. */
    protected static class TestIntersection extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.JMLValueSet s2;

        /** Initialize this instance. */
        public TestIntersection(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLValueSet s2) {
            super("intersection"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.JMLValueSet}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.intersection(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'intersection' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the union method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUnion
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("union");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("union", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"union\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLValueSet$1$iter
                    = this.vorg_jmlspecs_models_JMLValueSetIter("union", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLValueSet$1$iter,
                     "this.vorg_jmlspecs_models_JMLValueSetIter(\"union\", 0)");
                while (!vorg_jmlspecs_models_JMLValueSet$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLValueSet s2
                        = (org.jmlspecs.models.JMLValueSet) vorg_jmlspecs_models_JMLValueSet$1$iter.get();
                    methodTests$.addTest
                        (new TestUnion(receiver$, s2));
                    vorg_jmlspecs_models_JMLValueSet$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the union method. */
    protected static class TestUnion extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.JMLValueSet s2;

        /** Initialize this instance. */
        public TestUnion(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLValueSet s2) {
            super("union"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.JMLValueSet}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.union(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'union' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the difference method
     * to the overall test suite. */
    private void addTestSuiteFor$TestDifference
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("difference");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("difference", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"difference\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLValueSet$1$iter
                    = this.vorg_jmlspecs_models_JMLValueSetIter("difference", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLValueSet$1$iter,
                     "this.vorg_jmlspecs_models_JMLValueSetIter(\"difference\", 0)");
                while (!vorg_jmlspecs_models_JMLValueSet$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final org.jmlspecs.models.JMLValueSet s2
                        = (org.jmlspecs.models.JMLValueSet) vorg_jmlspecs_models_JMLValueSet$1$iter.get();
                    methodTests$.addTest
                        (new TestDifference(receiver$, s2));
                    vorg_jmlspecs_models_JMLValueSet$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the difference method. */
    protected static class TestDifference extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument s2 */
        private org.jmlspecs.models.JMLValueSet s2;

        /** Initialize this instance. */
        public TestDifference(org.jmlspecs.models.JMLValueSet receiver$, org.jmlspecs.models.JMLValueSet s2) {
            super("difference"+ ":" + (s2==null? "null" :"{org.jmlspecs.models.JMLValueSet}"));
            this.receiver$ = receiver$;
            this.s2 = s2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.difference(s2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'difference' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s2: " + this.s2;
            return msg;
        }
    }

    /** Add tests for the powerSet method
     * to the overall test suite. */
    private void addTestSuiteFor$TestPowerSet
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("powerSet");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("powerSet", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"powerSet\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestPowerSet(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the powerSet method. */
    protected static class TestPowerSet extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestPowerSet(org.jmlspecs.models.JMLValueSet receiver$) {
            super("powerSet");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.powerSet();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'powerSet' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the toBag method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToBag
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toBag");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("toBag", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"toBag\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestToBag(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toBag method. */
    protected static class TestToBag extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestToBag(org.jmlspecs.models.JMLValueSet receiver$) {
            super("toBag");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toBag();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toBag' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the toSequence method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToSequence
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toSequence");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("toSequence", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"toSequence\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestToSequence(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toSequence method. */
    protected static class TestToSequence extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestToSequence(org.jmlspecs.models.JMLValueSet receiver$) {
            super("toSequence");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toSequence();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toSequence' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the toArray method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToArray
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toArray");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("toArray", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"toArray\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestToArray(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toArray method. */
    protected static class TestToArray extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestToArray(org.jmlspecs.models.JMLValueSet receiver$) {
            super("toArray");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toArray();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toArray' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the elements method
     * to the overall test suite. */
    private void addTestSuiteFor$TestElements
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("elements");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("elements", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"elements\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestElements(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the elements method. */
    protected static class TestElements extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestElements(org.jmlspecs.models.JMLValueSet receiver$) {
            super("elements");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.elements();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'elements' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the iterator method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIterator
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("iterator");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("iterator", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"iterator\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestIterator(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the iterator method. */
    protected static class TestIterator extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestIterator(org.jmlspecs.models.JMLValueSet receiver$) {
            super("iterator");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.iterator();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'iterator' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the toString method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToString
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toString");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("toString", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"toString\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLValueSet receiver$
                    = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                methodTests$.addTest
                    (new TestToString(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toString method. */
    protected static class TestToString extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;

        /** Initialize this instance. */
        public TestToString(org.jmlspecs.models.JMLValueSet receiver$) {
            super("toString");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toString();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toString' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the has method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHas$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("has");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLValueSetIter("has", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLValueSetIter(\"has\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("has", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"has\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLValueSet receiver$
                        = (org.jmlspecs.models.JMLValueSet) receivers$iter.get();
                    final java.lang.Object arg1
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestHas$1(receiver$, arg1));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the has method. */
    protected static class TestHas$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLValueSet receiver$;
        /** Argument arg1 */
        private java.lang.Object arg1;

        /** Initialize this instance. */
        public TestHas$1(org.jmlspecs.models.JMLValueSet receiver$, java.lang.Object arg1) {
            super("has"+ ":" + (arg1==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.arg1 = arg1;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.has(arg1);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'has' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument arg1: " + this.arg1;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
