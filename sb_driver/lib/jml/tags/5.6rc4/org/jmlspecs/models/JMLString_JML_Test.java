// This file was generated by jmlunit on Mon Mar 16 13:11:57 EDT 2009.

package org.jmlspecs.models;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JMLString. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JMLString.java
 * </pre>
 * to regenerate this class whenever JMLString.java changes.
 */
public class JMLString_JML_Test
     extends JMLString_JML_TestData
{
    /** Initialize this class. */
    public JMLString_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class JMLString
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class JMLString"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JMLString.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JMLString_JML_Test testobj
            = new JMLString_JML_Test("JMLString_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JMLString_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JMLString_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JMLString.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestJMLString(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestJMLString$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestClone(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCompareTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCompareTo$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEquals(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEqualsIgnoreCase(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEqualsIgnoreCase$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestHashCode(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToString(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestConcat(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestConcat$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestConcat$2(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the JMLString contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLString
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLString");
        try {
            methodTests$.addTest
                (new TestJMLString());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLString contructor. */
    protected static class TestJMLString extends OneTest {

        /** Initialize this instance. */
        public TestJMLString() {
            super("JMLString");
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLString();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLString'";
            return msg;
        }
    }

    /** Add tests for the JMLString contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestJMLString$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("JMLString");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                vjava_lang_String$1$iter
                = this.vjava_lang_StringIter("JMLString", 0);
            this.check_has_data
                (vjava_lang_String$1$iter,
                 "this.vjava_lang_StringIter(\"JMLString\", 0)");
            while (!vjava_lang_String$1$iter.atEnd()) {
                final java.lang.String s
                    = (java.lang.String) vjava_lang_String$1$iter.get();
                methodTests$.addTest
                    (new TestJMLString$1(s));
                vjava_lang_String$1$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the JMLString contructor. */
    protected static class TestJMLString$1 extends OneTest {
        /** Argument s */
        private java.lang.String s;

        /** Initialize this instance. */
        public TestJMLString$1(java.lang.String s) {
            super("JMLString"+ ":" + (s==null? "null" :("\""+s+"\"")));
            this.s = s;
        }

        protected void doCall() throws java.lang.Throwable {
            new JMLString(s);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'JMLString' applied to";
            msg += "\n\tArgument s: " + this.s;
            return msg;
        }
    }

    /** Add tests for the clone method
     * to the overall test suite. */
    private void addTestSuiteFor$TestClone
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("clone");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("clone", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"clone\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLString receiver$
                    = (org.jmlspecs.models.JMLString) receivers$iter.get();
                methodTests$.addTest
                    (new TestClone(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the clone method. */
    protected static class TestClone extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;

        /** Initialize this instance. */
        public TestClone(org.jmlspecs.models.JMLString receiver$) {
            super("clone");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.clone();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'clone' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the compareTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCompareTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("compareTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("compareTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"compareTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("compareTo", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"compareTo\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLString receiver$
                        = (org.jmlspecs.models.JMLString) receivers$iter.get();
                    final java.lang.Object op2
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestCompareTo(receiver$, op2));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the compareTo method. */
    protected static class TestCompareTo extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;
        /** Argument op2 */
        private java.lang.Object op2;

        /** Initialize this instance. */
        public TestCompareTo(org.jmlspecs.models.JMLString receiver$, java.lang.Object op2) {
            super("compareTo"+ ":" + (op2==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.op2 = op2;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.compareTo(op2);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'compareTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument op2: " + this.op2;
            return msg;
        }
    }

    /** Add tests for the compareTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCompareTo$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("compareTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("compareTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"compareTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLString$1$iter
                    = this.vorg_jmlspecs_models_JMLStringIter("compareTo", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLString$1$iter,
                     "this.vorg_jmlspecs_models_JMLStringIter(\"compareTo\", 0)");
                while (!vorg_jmlspecs_models_JMLString$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLString receiver$
                        = (org.jmlspecs.models.JMLString) receivers$iter.get();
                    final org.jmlspecs.models.JMLString another
                        = (org.jmlspecs.models.JMLString) vorg_jmlspecs_models_JMLString$1$iter.get();
                    methodTests$.addTest
                        (new TestCompareTo$1(receiver$, another));
                    vorg_jmlspecs_models_JMLString$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the compareTo method. */
    protected static class TestCompareTo$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;
        /** Argument another */
        private org.jmlspecs.models.JMLString another;

        /** Initialize this instance. */
        public TestCompareTo$1(org.jmlspecs.models.JMLString receiver$, org.jmlspecs.models.JMLString another) {
            super("compareTo"+ ":" + (another==null? "null" :"{org.jmlspecs.models.JMLString}"));
            this.receiver$ = receiver$;
            this.another = another;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.compareTo(another);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'compareTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument another: " + this.another;
            return msg;
        }
    }

    /** Add tests for the equals method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEquals
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("equals");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("equals", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"equals\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("equals", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"equals\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLString receiver$
                        = (org.jmlspecs.models.JMLString) receivers$iter.get();
                    final java.lang.Object s
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestEquals(receiver$, s));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the equals method. */
    protected static class TestEquals extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;
        /** Argument s */
        private java.lang.Object s;

        /** Initialize this instance. */
        public TestEquals(org.jmlspecs.models.JMLString receiver$, java.lang.Object s) {
            super("equals"+ ":" + (s==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.s = s;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.equals(s);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'equals' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s: " + this.s;
            return msg;
        }
    }

    /** Add tests for the equalsIgnoreCase method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEqualsIgnoreCase
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("equalsIgnoreCase");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("equalsIgnoreCase", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"equalsIgnoreCase\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLString$1$iter
                    = this.vorg_jmlspecs_models_JMLStringIter("equalsIgnoreCase", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLString$1$iter,
                     "this.vorg_jmlspecs_models_JMLStringIter(\"equalsIgnoreCase\", 0)");
                while (!vorg_jmlspecs_models_JMLString$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLString receiver$
                        = (org.jmlspecs.models.JMLString) receivers$iter.get();
                    final org.jmlspecs.models.JMLString another
                        = (org.jmlspecs.models.JMLString) vorg_jmlspecs_models_JMLString$1$iter.get();
                    methodTests$.addTest
                        (new TestEqualsIgnoreCase(receiver$, another));
                    vorg_jmlspecs_models_JMLString$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the equalsIgnoreCase method. */
    protected static class TestEqualsIgnoreCase extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;
        /** Argument another */
        private org.jmlspecs.models.JMLString another;

        /** Initialize this instance. */
        public TestEqualsIgnoreCase(org.jmlspecs.models.JMLString receiver$, org.jmlspecs.models.JMLString another) {
            super("equalsIgnoreCase"+ ":" + (another==null? "null" :"{org.jmlspecs.models.JMLString}"));
            this.receiver$ = receiver$;
            this.another = another;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.equalsIgnoreCase(another);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'equalsIgnoreCase' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument another: " + this.another;
            return msg;
        }
    }

    /** Add tests for the equalsIgnoreCase method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEqualsIgnoreCase$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("equalsIgnoreCase");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("equalsIgnoreCase", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"equalsIgnoreCase\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_String$1$iter
                    = this.vjava_lang_StringIter("equalsIgnoreCase", 0);
                this.check_has_data
                    (vjava_lang_String$1$iter,
                     "this.vjava_lang_StringIter(\"equalsIgnoreCase\", 0)");
                while (!vjava_lang_String$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLString receiver$
                        = (org.jmlspecs.models.JMLString) receivers$iter.get();
                    final java.lang.String another
                        = (java.lang.String) vjava_lang_String$1$iter.get();
                    methodTests$.addTest
                        (new TestEqualsIgnoreCase$1(receiver$, another));
                    vjava_lang_String$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the equalsIgnoreCase method. */
    protected static class TestEqualsIgnoreCase$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;
        /** Argument another */
        private java.lang.String another;

        /** Initialize this instance. */
        public TestEqualsIgnoreCase$1(org.jmlspecs.models.JMLString receiver$, java.lang.String another) {
            super("equalsIgnoreCase"+ ":" + (another==null? "null" :("\""+another+"\"")));
            this.receiver$ = receiver$;
            this.another = another;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.equalsIgnoreCase(another);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'equalsIgnoreCase' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument another: " + this.another;
            return msg;
        }
    }

    /** Add tests for the hashCode method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHashCode
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("hashCode");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("hashCode", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"hashCode\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLString receiver$
                    = (org.jmlspecs.models.JMLString) receivers$iter.get();
                methodTests$.addTest
                    (new TestHashCode(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the hashCode method. */
    protected static class TestHashCode extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;

        /** Initialize this instance. */
        public TestHashCode(org.jmlspecs.models.JMLString receiver$) {
            super("hashCode");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.hashCode();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'hashCode' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the toString method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToString
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toString");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("toString", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"toString\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLString receiver$
                    = (org.jmlspecs.models.JMLString) receivers$iter.get();
                methodTests$.addTest
                    (new TestToString(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toString method. */
    protected static class TestToString extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;

        /** Initialize this instance. */
        public TestToString(org.jmlspecs.models.JMLString receiver$) {
            super("toString");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toString();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toString' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the concat method
     * to the overall test suite. */
    private void addTestSuiteFor$TestConcat
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("concat");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("concat", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"concat\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLString$1$iter
                    = this.vorg_jmlspecs_models_JMLStringIter("concat", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLString$1$iter,
                     "this.vorg_jmlspecs_models_JMLStringIter(\"concat\", 0)");
                while (!vorg_jmlspecs_models_JMLString$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLString receiver$
                        = (org.jmlspecs.models.JMLString) receivers$iter.get();
                    final org.jmlspecs.models.JMLString s
                        = (org.jmlspecs.models.JMLString) vorg_jmlspecs_models_JMLString$1$iter.get();
                    methodTests$.addTest
                        (new TestConcat(receiver$, s));
                    vorg_jmlspecs_models_JMLString$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the concat method. */
    protected static class TestConcat extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;
        /** Argument s */
        private org.jmlspecs.models.JMLString s;

        /** Initialize this instance. */
        public TestConcat(org.jmlspecs.models.JMLString receiver$, org.jmlspecs.models.JMLString s) {
            super("concat"+ ":" + (s==null? "null" :"{org.jmlspecs.models.JMLString}"));
            this.receiver$ = receiver$;
            this.s = s;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.concat(s);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'concat' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s: " + this.s;
            return msg;
        }
    }

    /** Add tests for the concat method
     * to the overall test suite. */
    private void addTestSuiteFor$TestConcat$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("concat");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("concat", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"concat\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_String$1$iter
                    = this.vjava_lang_StringIter("concat", 0);
                this.check_has_data
                    (vjava_lang_String$1$iter,
                     "this.vjava_lang_StringIter(\"concat\", 0)");
                while (!vjava_lang_String$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLString receiver$
                        = (org.jmlspecs.models.JMLString) receivers$iter.get();
                    final java.lang.String s
                        = (java.lang.String) vjava_lang_String$1$iter.get();
                    methodTests$.addTest
                        (new TestConcat$1(receiver$, s));
                    vjava_lang_String$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the concat method. */
    protected static class TestConcat$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;
        /** Argument s */
        private java.lang.String s;

        /** Initialize this instance. */
        public TestConcat$1(org.jmlspecs.models.JMLString receiver$, java.lang.String s) {
            super("concat"+ ":" + (s==null? "null" :("\""+s+"\"")));
            this.receiver$ = receiver$;
            this.s = s;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.concat(s);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'concat' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument s: " + this.s;
            return msg;
        }
    }

    /** Add tests for the concat method
     * to the overall test suite. */
    private void addTestSuiteFor$TestConcat$2
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("concat");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLStringIter("concat", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLStringIter(\"concat\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.CharIterator
                    vchar$1$iter
                    = this.vcharIter("concat", 0);
                this.check_has_data
                    (vchar$1$iter,
                     "this.vcharIter(\"concat\", 0)");
                while (!vchar$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLString receiver$
                        = (org.jmlspecs.models.JMLString) receivers$iter.get();
                    final char c
                        = vchar$1$iter.getChar();
                    methodTests$.addTest
                        (new TestConcat$2(receiver$, c));
                    vchar$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the concat method. */
    protected static class TestConcat$2 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLString receiver$;
        /** Argument c */
        private char c;

        /** Initialize this instance. */
        public TestConcat$2(org.jmlspecs.models.JMLString receiver$, char c) {
            super("concat"+ ":" + "\'"+charToString(c)+"\'");
            this.receiver$ = receiver$;
            this.c = c;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.concat(c);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'concat' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument c: " + this.c;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
