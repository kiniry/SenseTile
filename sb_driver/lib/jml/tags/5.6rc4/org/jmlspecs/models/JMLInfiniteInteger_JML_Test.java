// This file was generated by jmlunit on Mon Mar 16 13:11:57 EDT 2009.

package org.jmlspecs.models;

import java.math.BigInteger;

/** Automatically-generated test driver for JML and JUnit based
 * testing of JMLInfiniteInteger. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit JMLInfiniteInteger.java
 * </pre>
 * to regenerate this class whenever JMLInfiniteInteger.java changes.
 */
public class JMLInfiniteInteger_JML_Test
     extends JMLInfiniteInteger_JML_TestData
{
    /** Initialize this class. */
    public JMLInfiniteInteger_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for interface JMLInfiniteInteger
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for interface JMLInfiniteInteger"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(JMLInfiniteInteger.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        JMLInfiniteInteger_JML_Test testobj
            = new JMLInfiniteInteger_JML_Test("JMLInfiniteInteger_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(JMLInfiniteInteger_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends JMLInfiniteInteger_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * JMLInfiniteInteger.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestSignum(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsFinite(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestFiniteValue(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCompareTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEquals(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGreaterThanOrEqualTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLessThanOrEqualTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGreaterThan(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLessThan(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestHashCode(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAbs(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestMax(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestMin(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestNegate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAdd(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSubtract(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestMultiply(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestDivide(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRemainder(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestMod(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestPow(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestDoubleValue(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestFloatValue(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToString(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestToString$1(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestClone(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the signum method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSignum
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("signum");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("signum", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"signum\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestSignum(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the signum method. */
    protected static class TestSignum extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestSignum(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("signum");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.signum();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'signum' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isFinite method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsFinite
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isFinite");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("isFinite", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"isFinite\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestIsFinite(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isFinite method. */
    protected static class TestIsFinite extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestIsFinite(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("isFinite");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isFinite();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isFinite' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the finiteValue method
     * to the overall test suite. */
    private void addTestSuiteFor$TestFiniteValue
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("finiteValue");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("finiteValue", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"finiteValue\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestFiniteValue(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the finiteValue method. */
    protected static class TestFiniteValue extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestFiniteValue(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("finiteValue");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.finiteValue();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'finiteValue' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the compareTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCompareTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("compareTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("compareTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"compareTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("compareTo", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"compareTo\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final java.lang.Object o
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestCompareTo(receiver$, o));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the compareTo method. */
    protected static class TestCompareTo extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument o */
        private java.lang.Object o;

        /** Initialize this instance. */
        public TestCompareTo(org.jmlspecs.models.JMLInfiniteInteger receiver$, java.lang.Object o) {
            super("compareTo"+ ":" + (o==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.o = o;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.compareTo(o);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'compareTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument o: " + this.o;
            return msg;
        }
    }

    /** Add tests for the equals method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEquals
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("equals");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("equals", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"equals\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vjava_lang_Object$1$iter
                    = this.vjava_lang_ObjectIter("equals", 0);
                this.check_has_data
                    (vjava_lang_Object$1$iter,
                     "this.vjava_lang_ObjectIter(\"equals\", 0)");
                while (!vjava_lang_Object$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final java.lang.Object o
                        = (java.lang.Object) vjava_lang_Object$1$iter.get();
                    methodTests$.addTest
                        (new TestEquals(receiver$, o));
                    vjava_lang_Object$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the equals method. */
    protected static class TestEquals extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument o */
        private java.lang.Object o;

        /** Initialize this instance. */
        public TestEquals(org.jmlspecs.models.JMLInfiniteInteger receiver$, java.lang.Object o) {
            super("equals"+ ":" + (o==null? "null" :"{java.lang.Object}"));
            this.receiver$ = receiver$;
            this.o = o;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.equals(o);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'equals' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument o: " + this.o;
            return msg;
        }
    }

    /** Add tests for the greaterThanOrEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGreaterThanOrEqualTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("greaterThanOrEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("greaterThanOrEqualTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"greaterThanOrEqualTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("greaterThanOrEqualTo", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"greaterThanOrEqualTo\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestGreaterThanOrEqualTo(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the greaterThanOrEqualTo method. */
    protected static class TestGreaterThanOrEqualTo extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestGreaterThanOrEqualTo(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("greaterThanOrEqualTo"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.greaterThanOrEqualTo(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'greaterThanOrEqualTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the lessThanOrEqualTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLessThanOrEqualTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("lessThanOrEqualTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("lessThanOrEqualTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"lessThanOrEqualTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("lessThanOrEqualTo", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"lessThanOrEqualTo\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestLessThanOrEqualTo(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the lessThanOrEqualTo method. */
    protected static class TestLessThanOrEqualTo extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestLessThanOrEqualTo(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("lessThanOrEqualTo"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.lessThanOrEqualTo(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'lessThanOrEqualTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the greaterThan method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGreaterThan
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("greaterThan");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("greaterThan", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"greaterThan\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("greaterThan", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"greaterThan\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestGreaterThan(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the greaterThan method. */
    protected static class TestGreaterThan extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestGreaterThan(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("greaterThan"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.greaterThan(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'greaterThan' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the lessThan method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLessThan
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("lessThan");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("lessThan", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"lessThan\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("lessThan", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"lessThan\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestLessThan(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the lessThan method. */
    protected static class TestLessThan extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestLessThan(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("lessThan"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.lessThan(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'lessThan' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the hashCode method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHashCode
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("hashCode");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("hashCode", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"hashCode\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestHashCode(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the hashCode method. */
    protected static class TestHashCode extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestHashCode(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("hashCode");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.hashCode();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'hashCode' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the abs method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAbs
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("abs");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("abs", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"abs\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestAbs(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the abs method. */
    protected static class TestAbs extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestAbs(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("abs");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.abs();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'abs' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the max method
     * to the overall test suite. */
    private void addTestSuiteFor$TestMax
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("max");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("max", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"max\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("max", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"max\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestMax(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the max method. */
    protected static class TestMax extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestMax(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("max"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.max(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'max' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the min method
     * to the overall test suite. */
    private void addTestSuiteFor$TestMin
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("min");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("min", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"min\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("min", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"min\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestMin(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the min method. */
    protected static class TestMin extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestMin(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("min"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.min(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'min' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the negate method
     * to the overall test suite. */
    private void addTestSuiteFor$TestNegate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("negate");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("negate", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"negate\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestNegate(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the negate method. */
    protected static class TestNegate extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestNegate(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("negate");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.negate();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'negate' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the add method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAdd
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("add");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("add", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"add\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("add", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"add\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestAdd(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the add method. */
    protected static class TestAdd extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestAdd(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("add"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.add(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'add' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the subtract method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSubtract
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("subtract");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("subtract", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"subtract\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("subtract", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"subtract\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestSubtract(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the subtract method. */
    protected static class TestSubtract extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestSubtract(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("subtract"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.subtract(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'subtract' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the multiply method
     * to the overall test suite. */
    private void addTestSuiteFor$TestMultiply
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("multiply");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("multiply", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"multiply\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("multiply", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"multiply\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestMultiply(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the multiply method. */
    protected static class TestMultiply extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestMultiply(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("multiply"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.multiply(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'multiply' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the divide method
     * to the overall test suite. */
    private void addTestSuiteFor$TestDivide
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("divide");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("divide", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"divide\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("divide", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"divide\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestDivide(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the divide method. */
    protected static class TestDivide extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestDivide(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("divide"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.divide(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'divide' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the remainder method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRemainder
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("remainder");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("remainder", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"remainder\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("remainder", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"remainder\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestRemainder(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the remainder method. */
    protected static class TestRemainder extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestRemainder(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("remainder"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.remainder(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'remainder' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the mod method
     * to the overall test suite. */
    private void addTestSuiteFor$TestMod
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("mod");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("mod", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"mod\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter
                    = this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("mod", 0);
                this.check_has_data
                    (vorg_jmlspecs_models_JMLInfiniteInteger$1$iter,
                     "this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"mod\", 0)");
                while (!vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final org.jmlspecs.models.JMLInfiniteInteger n
                        = (org.jmlspecs.models.JMLInfiniteInteger) vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.get();
                    methodTests$.addTest
                        (new TestMod(receiver$, n));
                    vorg_jmlspecs_models_JMLInfiniteInteger$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the mod method. */
    protected static class TestMod extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private org.jmlspecs.models.JMLInfiniteInteger n;

        /** Initialize this instance. */
        public TestMod(org.jmlspecs.models.JMLInfiniteInteger receiver$, org.jmlspecs.models.JMLInfiniteInteger n) {
            super("mod"+ ":" + (n==null? "null" :"{org.jmlspecs.models.JMLInfiniteInteger}"));
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.mod(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'mod' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the pow method
     * to the overall test suite. */
    private void addTestSuiteFor$TestPow
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("pow");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("pow", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"pow\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("pow", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"pow\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final int n
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestPow(receiver$, n));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the pow method. */
    protected static class TestPow extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument n */
        private int n;

        /** Initialize this instance. */
        public TestPow(org.jmlspecs.models.JMLInfiniteInteger receiver$, int n) {
            super("pow"+ ":" + n);
            this.receiver$ = receiver$;
            this.n = n;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.pow(n);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'pow' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument n: " + this.n;
            return msg;
        }
    }

    /** Add tests for the doubleValue method
     * to the overall test suite. */
    private void addTestSuiteFor$TestDoubleValue
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("doubleValue");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("doubleValue", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"doubleValue\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestDoubleValue(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the doubleValue method. */
    protected static class TestDoubleValue extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestDoubleValue(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("doubleValue");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.doubleValue();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'doubleValue' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the floatValue method
     * to the overall test suite. */
    private void addTestSuiteFor$TestFloatValue
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("floatValue");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("floatValue", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"floatValue\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestFloatValue(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the floatValue method. */
    protected static class TestFloatValue extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestFloatValue(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("floatValue");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.floatValue();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'floatValue' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the toString method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToString
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toString");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("toString", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"toString\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestToString(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toString method. */
    protected static class TestToString extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestToString(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("toString");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toString();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toString' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the toString method
     * to the overall test suite. */
    private void addTestSuiteFor$TestToString$1
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("toString");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("toString", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"toString\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("toString", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"toString\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final org.jmlspecs.models.JMLInfiniteInteger receiver$
                        = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                    final int radix
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestToString$1(receiver$, radix));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the toString method. */
    protected static class TestToString$1 extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;
        /** Argument radix */
        private int radix;

        /** Initialize this instance. */
        public TestToString$1(org.jmlspecs.models.JMLInfiniteInteger receiver$, int radix) {
            super("toString"+ ":" + radix);
            this.receiver$ = receiver$;
            this.radix = radix;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.toString(radix);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'toString' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument radix: " + this.radix;
            return msg;
        }
    }

    /** Add tests for the clone method
     * to the overall test suite. */
    private void addTestSuiteFor$TestClone
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("clone");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vorg_jmlspecs_models_JMLInfiniteIntegerIter("clone", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vorg_jmlspecs_models_JMLInfiniteIntegerIter(\"clone\", 0))");
            while (!receivers$iter.atEnd()) {
                final org.jmlspecs.models.JMLInfiniteInteger receiver$
                    = (org.jmlspecs.models.JMLInfiniteInteger) receivers$iter.get();
                methodTests$.addTest
                    (new TestClone(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the clone method. */
    protected static class TestClone extends OneTest {
        /** The receiver */
        private org.jmlspecs.models.JMLInfiniteInteger receiver$;

        /** Initialize this instance. */
        public TestClone(org.jmlspecs.models.JMLInfiniteInteger receiver$) {
            super("clone");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.clone();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'clone' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
