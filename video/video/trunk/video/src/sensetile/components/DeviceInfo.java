package sensetile.components;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import sensetile.common.messages.IMessage;
import sensetile.devices.DeviceDetectorService;
import sensetile.devices.IDevice;
import javax.swing.JDialog;
import sensetile.common.services.BroadcasterService;
import sensetile.common.messages.DeviceMessage;
import sensetile.common.messages.MessageType.Validity;
import sensetile.common.services.IObservable;
import sensetile.common.utils.CommonUtils;
import sensetile.common.utils.Guard;
import sensetile.devices.TelosDevice;
/**
 * Represent an Vide Device info tabular presentation.
 * @author SenseTile
 */
public class DeviceInfo extends JDialog implements IObservable {

    /** Creates new form VideoDeviceInfo */
    public DeviceInfo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        BroadcasterService.getInstance().attachObserver(this);
        DeviceDetectorService service = DeviceDetectorService.getInstance();
        service.initialize();
        List<IDevice> devices = service.getDevice();
        
        tableInfo.setModel(createTableModel());
        fillModel( devices );
        tableInfo.getColumnModel().getColumn(1).setMinWidth(200);
    }

    private DefaultTableModel createTableModel()
    {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Device");
        model.addColumn("Name");
        model.addColumn("Version");
        model.addColumn("Type");
        return model;
    }



    private void fillModel(final List<IDevice> devices)
    {
        
        String[] line = new String[4];
        for (IDevice d : devices)
        {
            line[0] = d.getFile().getAbsolutePath();
            line[1] = d.getName();
            line[2] = d.getVersion().name();
            line[3] = d.getType().name();
            ((DefaultTableModel)tableInfo.getModel()).addRow(line);
         }
        
    }

    private void clearTable()
    {
         DefaultTableModel model = (DefaultTableModel) tableInfo.getModel();
         for(int i = tableInfo.getRowCount() - 1; i >= 0; i--)
         {
            model.removeRow(i);
         }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroller = new javax.swing.JScrollPane();
        tableInfo = new javax.swing.JTable();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sensetile/Languages"); // NOI18N
        setTitle(bundle.getString("DEVICEINFO")); // NOI18N
        setResizable(false);

        scroller.setBackground(new java.awt.Color(3, 3, 3));
        scroller.setBorder(new javax.swing.border.LineBorder(javax.swing.UIManager.getDefaults().getColor("Button.shadow"), 1, true));
        scroller.setViewportBorder(null);
        scroller.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        scroller.setName("scroller"); // NOI18N

        tableInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Device", "Name", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableInfo.setName("tableInfo"); // NOI18N
        scroller.setViewportView(tableInfo);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sensetile/resources/tango/cancel.png"))); // NOI18N
        btnClose.setMaximumSize(new java.awt.Dimension(25, 25));
        btnClose.setMinimumSize(new java.awt.Dimension(25, 25));
        btnClose.setName("btnClose"); // NOI18N
        btnClose.setPreferredSize(new java.awt.Dimension(32, 32));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scroller, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroller, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
}//GEN-LAST:event_btnCloseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JScrollPane scroller;
    private javax.swing.JTable tableInfo;
    // End of variables declaration//GEN-END:variables

    public void update(IMessage message)
    {
        if(!CommonUtils.isTypeOf(message,
                "sensetile.common.messages.DeviceMessage"))
        {
            return;
        }
        DeviceMessage devMessage = (DeviceMessage)message;
        if(devMessage.getValidity()== Validity.INVALID)
        {
            if(CommonUtils.isTypeOf(devMessage.getMessage(),
                    "sensetile.devices.TelosDevice"))
            {
                TelosDevice telosDev = (TelosDevice)devMessage.getMessage();
                removeItem(telosDev.getName());
            }
        }
        
    }

    private void removeItem(final String deviceName)
    {
        DefaultTableModel model = (DefaultTableModel) tableInfo.getModel();
         for(int i = tableInfo.getRowCount() - 1; i >= 0; i--)
         {

            Vector dataVector = (Vector)model.getDataVector().elementAt(i);
            for(int index=0; index< dataVector.size(); index++)
            {
               if(deviceName.
                       equalsIgnoreCase(dataVector.get(index).toString()))
               {
                   break;
               }
            }
            model.getDataVector().remove(dataVector);
            break;
         }
        tableInfo.revalidate();
    }

    public void updateSequence(final List<IMessage> messages)
    {
        Guard.ArgumentNotNull(messages, "Message list cannot be a null.");
        clearTable();
        List<IDevice> newList = new ArrayList<IDevice>();
        for(IMessage message :messages ) 
        {
            if (!message.getClass().isAssignableFrom(DeviceMessage.class))
            {
              continue;
            }
            DeviceMessage packetMessage = (DeviceMessage)message;
            if (packetMessage.getValidity() == Validity.VALID)
             {
               IDevice device = (IDevice)packetMessage.getMessage();
               newList.add(device);
             }
        }
        fillModel(newList);
        tableInfo.revalidate();
    }

}
