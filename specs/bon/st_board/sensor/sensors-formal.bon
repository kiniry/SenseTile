static_diagram STATIC_DIAGRAM
component
  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -- TYPE_CLUSTER cluster classes
  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
  cluster TYPE_CLUSTER

    class THERMISTOR_SENSOR_TYPE 
    indexing
    	about:        "This class represents an implementation of sensor types.";
  		title:        "SensorType";
  		author:       "Dragan Stosic";
  		copyright:    "none";
  		organisation: "School of Computer Science and Informatics, UCD";
  		date:         "2009/07/05";
  		version:      "Revision: 1.00";
    feature{NONE}
      make
      
    feature
      -- The enum values, which are stored in an array, is constant and that 
      -- all fields declared as that type are of that type.
      array: SEQUENCE[INTEGER]  
        ensure
          Result /= Void;
        end
      						-- The Negative temperature coefficient thermistor.
      						-- For NTCs, the resistance decreases with temperature.
      NTC: INTEGER
        ensure
          Result = 0;
        end
      
                            -- The Positive temperature coefficient thermistor. 
	  						-- For PTCs, the resistance increases with temperature.
      PTC: INTEGER
        ensure
          Result = 1;
        end
    
    feature{THERMISTOR_SENSOR_TYPE}
    
      legal_ThermSensorType: BOOLEAN -> e: INTEGER
        require
          e /= Void;
        ensure
          Result /= Void;
          (e = array.item(0) or e = array.item(1)) <-> Result;
        end
    
    invariant
      legal_ThermSensorType(0);
      legal_ThermSensorType(1);
    end
    class ULTRASONIC_SENSOR_TYPE 
    indexing
    	about:        "This class represents ultrasonic sensor type.";
  		title:        "UltrasonicSensorType";
  		author:       "Dragan Stosic";
  		copyright:    "none";
  		organisation: "School of Computer Science and Informatics, UCD";
  		date:         "2009/07/05";
  		version:      "Revision: 1.00";
    feature{NONE}
      make
    feature
      -- The enum values, which are stored in an array, is constant and that 
      -- all fields declared as that type are of that type.
      array: SEQUENCE[INTEGER]
        ensure
          Result /= Void;
        end
      PROX: INTEGER			--The Proximity ultrasonic sensor.
        ensure
          Result = 0;
        end
      RANG: INTEGER			--The Ranging ultrasonic sensor.
        ensure
          Result = 1;
        end
        
    feature{ULTRASONIC_SENSOR_TYPE}
      legal_UltraSensorType: BOOLEAN -> e: INTEGER
        require
          e /= Void;
        ensure
          Result /= Void;
          (e = array.item(0) or e = array.item(1)) <-> Result;
        end

    invariant
      legal_UltraSensorType(0);
      legal_UltraSensorType(1);
      end
      
   class SOUND_SENSOR_TYPE 
    indexing
    	about:        "This class represents microphone sensor type.";
  		title:        "SoundSensorType";
  		author:       "Dragan Stosic";
  		copyright:    "none";
  		organisation: "School of Computer Science and Informatics, UCD";
  		date:         "2009/07/05";
  		version:      "Revision: 1.00";
    feature{NONE}
      make
    -- The enum values, which are stored in an array, is constant and that 
    -- all fields declared as that type are of that type.
    feature
      array: SEQUENCE[INTEGER]
        ensure
          Result /= Void;
        end
      CCEM: INTEGER		--Condenser, capacitor or electrostatic microphone sensor.
        ensure
          Result = 8;
        end
      CMS: INTEGER		--The Carbon microphone sensor.
        ensure
          Result = 1;
        end
      DMS: INTEGER		--The Dynamic microphone sensor.
        ensure
          Result = 0;
        end
      FOS: INTEGER		--The Fiber optical microphone sensor.    
        ensure
          Result = 3;
        end
      LMS: INTEGER		--The Laser microphone sensor.
        ensure
          Result = 4;
        end
      LQMS: INTEGER		--The Liquid microphone sensor.
        ensure
          Result = 5;
        end
      MEMS: INTEGER		--The MEMS microphone sensor.
        ensure
          Result = 6;
        end
      PMS: INTEGER		--The Piezoelectric microphone sensor.
        ensure
          Result = 2;
        end
      SMS: INTEGER 		--The Speaker as microphone sensor.
        ensure
          Result = 7;
        end
    feature{SOUND_SENSOR_TYPE}
      legal_SoundSensorType: BOOLEAN -> e: INTEGER
        require
          e /= Void;
        ensure
          Result /= Void;
          (e = array.item(0) or e = array.item(1) or 
           e = array.item(2) or e = array.item(3) or 
           e = array.item(4) or e = array.item(5) or 
           e = array.item(6) or e = array.item(7) or 
           e = array.item(8)) <-> Result;
        end

    invariant
      legal_SoundSensorType(0);
      legal_SoundSensorType(1);
      legal_SoundSensorType(2);
      legal_SoundSensorType(3);
      legal_SoundSensorType(4);
      legal_SoundSensorType(5);
      legal_SoundSensorType(6);
      legal_SoundSensorType(7);
      legal_SoundSensorType(8);
     end
   
   class SENSOR_TYPE 
    indexing
    	about:        "This class represents an implementation of sensor types.";
  		title:        "SensorType";
  		author:       "Dragan Stosic";
  		copyright:    "none";
  		organisation: "School of Computer Science and Informatics, UCD";
  		date:         "2009/07/05";
  		version:      "Revision: 1.00";
    feature{NONE}
      make
    feature
    -- The enum values, which are stored in an array, is constant and that 
    -- all fields declared as that type are of that type.
      array: SEQUENCE[INTEGER]
        ensure
          Result /= Void;
        end
      ACCEL_X: INTEGER		-- Accelerometer sensor - X axe orientation.
        ensure
          Result = 5;
        end
      ACCEL_Y: INTEGER		-- Accelerometer sensor - Y axe orientation.
        ensure
          Result = 6;
        end
      ACCEL_Z: INTEGER		-- Accelerometer sensor - Z axe orientation.
        ensure
          Result = 7;
        end
      
      LIGHT: INTEGER		-- The Light sensor type.
        ensure
          Result = 1;
        end
      PRESS: INTEGER		-- The Pressure sensor type.
        ensure
          Result = 2;
        end
      SOUND: INTEGER		-- The Sound sensor type.
        ensure
          Result = 3;
        end
      THERM: INTEGER		-- The Thermistor sensor type.
        ensure
          Result = 0;
        end
      ULTRA: INTEGER		-- The Ultrasonic sensor type.
        ensure
          Result = 4;
        end
    feature{SENSOR_TYPE}
      legal_SensorType: BOOLEAN -> e: INTEGER
        require
          e /= Void;
        ensure
          Result /= Void;
          (e = array.item(0) or e = array.item(1) or 
           e = array.item(2) or e = array.item(3) or 
           e = array.item(4) or e = array.item(5) or 
           e = array.item(6) or e = array.item(7)) <-> Result;
        end

    invariant
      legal_SensorType(0);
      legal_SensorType(1);
      legal_SensorType(2);
      legal_SensorType(3);
      legal_SensorType(4);
      legal_SensorType(5);
      legal_SensorType(6);
      legal_SensorType(7);
    end
    
    class PRESSURE_SENSOR_TYPE 
    indexing
    	about:        "This class represents pressure sensor type.";
  		title:        "PressureSensorType";
  		author:       "Dragan Stosic";
  		copyright:    "none";
  		organisation: "School of Computer Science and Informatics, UCD";
  		date:         "2009/07/05";
  		version:      "Revision: 1.00";
    feature{NONE}
      make
      
    feature
    -- The enum values, which are stored in an array, is constant and that 
    -- all fields declared as that type are of that type.
      array: SEQUENCE[INTEGER]
        ensure
          Result /= Void;
        end
      
      APS: INTEGER		-- The Absolute pressure sensor.
        ensure
          Result = 0;
        end
      
      DPS: INTEGER		--The Differential pressure sensor.
        ensure
          Result = 3;
        end
      GPS: INTEGER		--The Gauge pressure sensor.
        ensure
          Result = 1;
        end
      SPS: INTEGER		--The Sealed pressure sensor.
        ensure
          Result = 4;
        end
      VPS: INTEGER		--The Vacuum pressure sensor.
        ensure
          Result = 2;
        end
    feature{PRESSURE_SENSOR_TYPE}
      legal_PressSensorType: BOOLEAN -> e: INTEGER
        require
          e /= Void;
        ensure
          Result /= Void;
          (e = array.item(0) or e = array.item(1) or 
           e = array.item(2) or e = array.item(3) or 
           e = array.item(4)) <-> Result;
        end
   
    invariant
      legal_PressSensorType(0);
      legal_PressSensorType(1);
      legal_PressSensorType(2);
      legal_PressSensorType(3);
      legal_PressSensorType(4);
      end
      
    class LIGHT_SENSOR_TYPE 
     indexing
    	about:        "This class represents light sensor type.";
  		title:        "LightSensorType";
  		author:       "Dragan Stosic";
  		copyright:    "none";
  		organisation: "School of Computer Science and Informatics, UCD";
  		date:         "2009/07/05";
  		version:      "Revision: 1.00";
  	feature{NONE}
      make
    
    feature
     -- The enum values, which are stored in an array, is constant and that 
    -- all fields declared as that type are of that type.
      array: SEQUENCE[INTEGER]
        ensure
          Result /= Void;
        end
      
      PCC: INTEGER		--The Photo-conductive Cells light sensor.
        ensure
          Result = 1;
        end
      
      PEC: INTEGER		--The Photo-emissive Cells light sensor.
        ensure
          Result = 0;
        end
      
      PJU: INTEGER		--The Photo-junction light sensor.
        ensure
          Result = 3;
        end
      
      PVC: INTEGER		--The Photo-voltaic Cells light sensor.
        ensure
          Result = 2;
        end
    
    feature{LIGHT_SENSOR_TYPE}
      legal_LightSensorType: BOOLEAN -> e: INTEGER
        require
          e /= Void;
        ensure
          Result /= Void;
          (e = array.item(0) or e = array.item(1) or 
           e = array.item(2) or e = array.item(3)) <-> Result;
        end

    invariant
      legal_LightSensorType(0);
      legal_LightSensorType(1);
      legal_LightSensorType(2);
      legal_LightSensorType(3);
    end
       class ACCELEROMETER_SENSOR_TYPE 
    indexing
    	about:        "This class represents accelerometer sensor type.";
  		title:        "AccelerometerSensorType";
  		author:       "Dragan Stosic";
  		copyright:    "none";
  		organisation: "School of Computer Science and Informatics, UCD";
  		date:         "2009/07/05";
  		version:      "Revision: 1.00";
    feature{NONE}
      make
    feature
     -- The enum values, which are stored in an array, is constant and that 
    -- all fields declared as that type are of that type.    
      array: SEQUENCE[INTEGER]
        ensure
          Result /= Void;
        end
        
      MEMS: INTEGER		--The Surface Micromachined Capacitive.
        ensure
          Result = 2;
        end
      
      PFPS: INTEGER		--The Piezo-film or piezoelectric sensor.
        ensure
          Result = 0;
        end
      
      SMA: INTEGER		--The Shear Mode Accelerometer.
        ensure
          Result = 1;
        end
      
      TCMOS: INTEGER	--Thermal (submicrometre CMOS process).
        ensure
          Result = 3;
        end
    feature{ACCELEROMETER_SENSOR_TYPE}
      legal_AccSensorType: BOOLEAN -> e: INTEGER
        require
          e /= Void;
        ensure
          Result /= Void;
          (e = array.item(0) or e = array.item(1) or 
           e = array.item(2) or e = array.item(3)) <-> Result;
        end

    invariant
      legal_AccSensorType(0);
      legal_AccSensorType(1);
      legal_AccSensorType(2);
      legal_AccSensorType(3);
      end
  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -- SENSOR_CLUSTER cluster classes
  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~       
    cluster SENSOR_CLUSTER

    deferred class ISENSOR interfaced 
    indexing
    	about:        "This deffered class represents an abstract sensor.";
  		title:        "ISensor";
  		author:       "Dragan Stosic";
  		copyright:    "none";
  		organisation: "School of Computer Science and Informatics, UCD";
  		date:         "2009/07/05";
  		version:      "Revision: 1.00";
    feature

      mod_enabled: BOOLEAN      -- @.Model @.Instance boolean mod_enabled;
        ensure
          Result /= Void;
        end
      mod_max: INTEGER 			-- @.Model @.Instance int mod_max;
        ensure
          Result /= Void;
        end
      mod_mesure: JMLDATA_GROUP -- @.Model @.Instance JMLDataGroup mod_mesure;
        ensure
          Result /= Void;
        end
      mod_min: INTEGER			-- @.Model @.Instance int mod_min;
        ensure
          Result /= Void;
        end
      mod_type: INTEGER			-- @.Model @.Instance int mod_type;
        ensure
          Result /= Void;
        end
      mod_value: INTEGER		-- @.Model @.Instance int mod_value;
        ensure
          Result /= Void;
        end
    
     feature{ISENSOR}
      
      deferred getMax: INTEGER --What is the maximal value for this component ?
        require
          isEnabled;
        ensure
          Result /= Void;
          Result = mod_max;
        end
      
      deferred getMin: INTEGER --What is the minimal value for this component ?
        require
          isEnabled;
        ensure
          Result /= Void;
          Result = mod_min;
        end
      deferred getSensorType: INTEGER --Which type of sensor are you?
        ensure
          Result /= Void;
          Result = mod_type;
        end
        
      deferred getValue: INTEGER --What is the measured value for this component ?
        require
          isEnabled;
        ensure
          Result /= Void;
          Result = mod_value;
        end
      
      deferred isEnabled: BOOLEAN --Are you enabled ?
        ensure
          Result /= Void;
        end
      
      deferred measure --Measure current value.If sensor is not available notify client class.
        require
          isEnabled;
        ensure
          delta {mod_mesure, mod_value};
          mod_min <= mod_value;
          mod_value <= mod_max;
        end
      
      deferred setEnable		--Turn off / on this component.
        -> theFlag: BOOLEAN
        require
          theFlag /= Void;
        ensure
          delta mod_enabled;
          mod_enabled = theFlag;
        end
     
     invariant					--Measured value must to be between minimum and maximum value.
      mod_min <= mod_value;
      mod_value <= mod_max;
    end
    
    class MEASUREMENT_UNIT 
    indexing
      about: "This class represents typesafe implementation of measurement units.";
      title:        "MeasurementUnit";
  	  author:       "Dragan Stosic";
  	  copyright:    "none";
  	  organisation: "School of Computer Science and Informatics, UCD";
  	  date:         "2009/07/05";
  	  version:      "Revision: 1.00";
	feature{NONE}
      make    
    
    feature
    -- The enum values, which are stored in an array, is constant and that 
    -- all fields declared as that type are of that type.   
      array: SEQUENCE[INTEGER]
        ensure
          Result /= Void;
        end
        
      AMPER: INTEGER	--A -Amper (currency).
        ensure
          Result = 0;
        end
      
      CELSIUS: INTEGER	--C - Temperature - Celsius.
        ensure
          Result = 5;
        end
      
      DECIBEL: INTEGER	--dB - Decibel.
        ensure
          Result = 4;
        end
      
      HERTZ: INTEGER	--Hz - Hertz (frequency).
        ensure
          Result = 3;
        end
      
      LUX: INTEGER		--lux - light - lux.
        ensure
          Result = 7;
        end
      
      MVOLT: INTEGER	--mV -mili Voltage (voltage).
        ensure
          Result = 2;
        end
      
      PASCAL: INTEGER	--pa - pressure - Pascal.
        ensure
          Result = 6;
        end
      
      VOLT: INTEGER		--V -Voltage (voltage).
        ensure
          Result = 1;
        end
        
    feature{MEASUREMENT_UNIT}
      legal_unit: BOOLEAN -> e: INTEGER
        require
          e /= Void;
        ensure
          Result /= Void;
          (e = array.item(0) or e = array.item(1) or 
           e = array.item(2) or e = array.item(3) or 
           e = array.item(4) or e = array.item(5) or 
           e = array.item(6) or e = array.item(7)) <-> Result;
        end

    invariant
      legal_unit(0);
      legal_unit(1);
      legal_unit(2);
      legal_unit(3);
      legal_unit(4);
      legal_unit(5);
      legal_unit(6);
      legal_unit(7);
      end
      
     effective class MISSING_SENSOR_EXCEPTION  
     indexing
      about: "Class implementation of sensor.MissingSensorException. Exception is used during measurement operations.";
      title:        "MeasurementUnit";
  	  author:       "Dragan Stosic";
  	  copyright:    "none";
  	  organisation: "School of Computer Science and Informatics, UCD";
  	  date:         "2009/07/05";
  	  version:      "Revision: 1.00";
  	  
     feature
      make
      make0 -> message: STRING
        require
          message /= Void;
        end
        
      make1 -> cause: THROWABLE
        require
          cause /= Void;
        end
        
      make2 -> message: STRING -> cause: THROWABLE
        require
          message /= Void;
          cause /= Void;
        end
        
    feature{MISSING_SENSOR_EXCEPTION}
      serialVersionUID: INTEGER
    end
    
    
      
  end
